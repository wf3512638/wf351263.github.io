<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WF&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linuxwf.com/"/>
  <updated>2020-04-13T04:53:50.064Z</updated>
  <id>http://linuxwf.com/</id>
  
  <author>
    <name>Wu Fei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>7.Ansible playbook 剧本</title>
    <link href="http://linuxwf.com/2020/04/13/7-Ansible-playbook-%E5%89%A7%E6%9C%AC/"/>
    <id>http://linuxwf.com/2020/04/13/7-Ansible-playbook-%E5%89%A7%E6%9C%AC/</id>
    <published>2020-04-13T04:52:00.000Z</published>
    <updated>2020-04-13T04:53:50.064Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Ansible-playbook-剧本"><a href="#Ansible-playbook-剧本" class="headerlink" title="Ansible playbook 剧本"></a>Ansible playbook 剧本</h1><h2 id="第1章-playbook剧本简介"><a href="#第1章-playbook剧本简介" class="headerlink" title="第1章 playbook剧本简介"></a>第1章 playbook剧本简介</h2><h3 id="1-1-什么是playbook剧本？"><a href="#1-1-什么是playbook剧本？" class="headerlink" title="1.1 什么是playbook剧本？"></a>1.1 什么是playbook剧本？</h3><p> <code>Playbooks</code>与Ad-Hoc相比，是一种完全不同的运用Ansible的方式，而且是非常之强大的；也是系统ansible命令的集合，其利用yaml语言编写，运行过程，<code>ansbile-playbook</code>命令根据自上而下的顺序依次执行。<br>简单来说，Playbooks 是一种简单的配置管理系统与多机器部署系统的基础。与现有的其他系统有不同之处，且非常适合于复杂应用的部署。</p><p><code>playbook</code>翻译过来就是“剧本”， 那 <code>playbook</code> 组成如下</p><ul><li>play: 定义的是主机的角色</li><li>task: 定义的是具体执行的任务</li><li>playbook: 由一个或多个 play 组成，一个 play 可以包含多个 task 任务。简单理解为: 使用不同的模块完成一件事情</li></ul><h3 id="1-2-playbook的优势"><a href="#1-2-playbook的优势" class="headerlink" title="1.2 playbook的优势"></a>1.2 playbook的优势</h3><ol><li>功能比ansible命令更强大</li><li>能很好的控制先后执行顺序, 以及依赖关系</li><li>语法展现更加的直观</li><li>ansible命令无法持久使用， playbook 可以持久使用</li></ol><h2 id="第2章-playbook剧本的书写格式"><a href="#第2章-playbook剧本的书写格式" class="headerlink" title="第2章 playbook剧本的书写格式"></a>第2章 playbook剧本的书写格式</h2><h3 id="2-1-剧本的组成"><a href="#2-1-剧本的组成" class="headerlink" title="2.1 剧本的组成"></a>2.1 剧本的组成</h3><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/14248468-86ef95f63d01ed09.webp"  alt=""></p><h3 id="2-2-注意缩进"><a href="#2-2-注意缩进" class="headerlink" title="2.2 注意缩进"></a>2.2 注意缩进</h3><ol><li>合理的信息缩进，两个空格表示一个缩进关系</li><li>一定不要使用tab</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标题一</span><br><span class="line">_ _ 标题二</span><br><span class="line">_ _ _ _ 标题三</span><br></pre></td></tr></table></figure><h3 id="2-3-冒号"><a href="#2-3-冒号" class="headerlink" title="2.3 冒号"></a>2.3 冒号</h3><p>所有冒号后面都要加上空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- hosts: 172.16.1.41</span><br><span class="line">  tasks:</span><br><span class="line">  - name: 01-add group</span><br><span class="line">    group: name=www gid=666</span><br></pre></td></tr></table></figure><h3 id="2-4-短横线-列表功能"><a href="#2-4-短横线-列表功能" class="headerlink" title="2.4 短横线 - 列表功能"></a>2.4 短横线 - 列表功能</h3><p>使用短横线构成列表信息,短横线后面需要有空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 老张</span><br><span class="line">  男</span><br><span class="line">- 爱好</span><br><span class="line">  游泳</span><br></pre></td></tr></table></figure><h2 id="第3章-剧本书写"><a href="#第3章-剧本书写" class="headerlink" title="第3章 剧本书写"></a>第3章 剧本书写</h2><h3 id="3-1-剧本文件名格式"><a href="#3-1-剧本文件名格式" class="headerlink" title="3.1 剧本文件名格式"></a>3.1 剧本文件名格式</h3><p>剧本文件拓展名为xxx.yaml<br>1.方便识别文件是一个剧本文件<br>2.文件编写时会有颜色提示</p><h3 id="3-2-创建剧本"><a href="#3-2-创建剧本" class="headerlink" title="3.2 创建剧本"></a>3.2 创建剧本</h3><p>练习: 写一个剧本，使用yum/copy/service等模块安装部署启动rsync服务</p><h4 id="3-2-1-服务端操作步骤"><a href="#3-2-1-服务端操作步骤" class="headerlink" title="3.2.1 服务端操作步骤"></a>3.2.1 服务端操作步骤</h4><p>1.安装软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 172.16.1.41 -m yum -a <span class="string">"name=rsync state=installed"</span></span><br></pre></td></tr></table></figure><p>2.备份/etc/rsyncd.conf文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 172.16.1.41 -m yum -a <span class="string">"src=/etc/rsyncd.conf dest=/etc/rsyncd.conf.bak remote_src=yes"</span></span><br></pre></td></tr></table></figure><p>3.copy配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 172.16.1.41 -m copy -a <span class="string">"src=/server/scripts/rsyncd.conf dest=/etc/"</span></span><br></pre></td></tr></table></figure><p>4.创建www组和www用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible 172.16.1.41 -m group -a <span class="string">"name=www gid=666"</span></span><br><span class="line">ansible 172.16.1.41 -m user -a <span class="string">"name=www create_home=no shell=/sbin/nologin group=www uid=666"</span></span><br></pre></td></tr></table></figure><p>5.创建备份目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 172.16.1.41 -m file -a <span class="string">"dest=/backup state=directory owner=www group=www"</span></span><br></pre></td></tr></table></figure><p>6.创建密码文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 172.16.1.41 -m copy -a <span class="string">"content='rsync_backup:oldboy' dest=/etc/rsync.password mode=600"</span></span><br></pre></td></tr></table></figure><p>7.启动服务，加入开机自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 172.16.1.41 -m service -a <span class="string">"name=rsyncd state=started enabled=yes"</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-客户端操作步骤"><a href="#3-2-2-客户端操作步骤" class="headerlink" title="3.2.2 客户端操作步骤"></a>3.2.2 客户端操作步骤</h4><p>1.安装软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 172.16.1.31 -m yum -a <span class="string">"name=rsync state=installed"</span></span><br></pre></td></tr></table></figure><p>2.创建密码文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 172.16.1.31 -m copy -a <span class="string">"content='oldboy' dest=/etc/rsync.password mode=600"</span></span><br></pre></td></tr></table></figure><p>3.创建用户和组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible 172.16.1.31 -m group -a <span class="string">"name=www gid=666"</span></span><br><span class="line">ansible 172.16.1.31 -m user -a <span class="string">"name=www create_home=no shell=/sbin/nologin group=www uid=666"</span></span><br></pre></td></tr></table></figure><p>4.创建备份目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 172.16.1.31 -m file -a <span class="string">"dest=/backup state=directory owner=www group=www"</span></span><br></pre></td></tr></table></figure><h4 id="3-2-3-rsync剧本"><a href="#3-2-3-rsync剧本" class="headerlink" title="3.2.3 rsync剧本"></a>3.2.3 rsync剧本</h4><p>服务端剧本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat rsync_server.yaml </span></span><br><span class="line">---</span><br><span class="line">- hosts: rsync_server</span><br><span class="line">  tasks:</span><br><span class="line">  - name: 01-install rsync</span><br><span class="line">    yum: name=rsync state=installed</span><br><span class="line">  - name: 02-backup rsyncd.conf</span><br><span class="line">    copy: src=/etc/rsyncd.conf dest=/etc/rsyncd.conf.bak remote_src=yes</span><br><span class="line">  - name: 03-copy rsyncd.conf</span><br><span class="line">    copy: src=/server/scripts/playbook/rsyncd.conf dest=/etc/</span><br><span class="line">  - name: 04-create passwd</span><br><span class="line">    copy: content=<span class="string">'rsync_backup:oldboy'</span> dest=/etc/rsync.passwd mode=0600</span><br><span class="line">  - name: 05-add group</span><br><span class="line">    group: name=www gid=666</span><br><span class="line">  - name: 06-add user</span><br><span class="line">    user: name=www uid=666 group=www shell=/sbin/nologin create_home=no</span><br><span class="line">  - name: 07-create backup dir</span><br><span class="line">    file: path=/backup state=directory owner=www group=www</span><br><span class="line">  - name: 08-create data dir</span><br><span class="line">    file: path=/data state=directory owner=www group=www</span><br><span class="line">  - name: 09-start rsyncd</span><br><span class="line">    service: name=rsyncd state=started enabled=yes</span><br></pre></td></tr></table></figure><p>客户端剧本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat rsync_clinet.yaml </span></span><br><span class="line">---</span><br><span class="line">- hosts: rsync_client</span><br><span class="line">  tasks:</span><br><span class="line">  - name: 01-install rsync</span><br><span class="line">    yum: name=rsync state=installed</span><br><span class="line">  - name: 02-create passwd</span><br><span class="line">    copy: content=<span class="string">'oldboy'</span> dest=/etc/rsync.passwd mode=0600</span><br><span class="line">  - name: 03-add group</span><br><span class="line">    group: name=www gid=666</span><br><span class="line">  - name: 04-add user</span><br><span class="line">    user: name=www uid=666 group=www shell=/sbin/nologin create_home=no</span><br><span class="line">  - name: 05-create backup dir</span><br><span class="line">    file: path=/backup state=directory owner=www group=www</span><br><span class="line">  - name: 06-create data dir</span><br><span class="line">    file: path=/data state=directory owner=www group=www</span><br></pre></td></tr></table></figure><h4 id="3-2-4-NFS剧本"><a href="#3-2-4-NFS剧本" class="headerlink" title="3.2.4 NFS剧本"></a>3.2.4 NFS剧本</h4><p>NFS服务器端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat nfs_server.yaml </span></span><br><span class="line">---</span><br><span class="line">- hosts: nfs_server</span><br><span class="line">  tasks:</span><br><span class="line">  - name: 01-install nfs service</span><br><span class="line">    yum: name=nfs-utils state=latest</span><br><span class="line">  - name: 02-copy nfs exports</span><br><span class="line">    copy: src=/server/scripts/playbook/exports dest=/etc/</span><br><span class="line">  - name: 03-add group</span><br><span class="line">    group: name=www gid=<span class="string">'666'</span></span><br><span class="line">  - name: 04-add user</span><br><span class="line">    user: name=www uid=666 group=www shell=/sbin/nologin create_home=no</span><br><span class="line">  - name: 05-create data dir</span><br><span class="line">    file: path=/data state=directory owner=www group=www</span><br><span class="line">  - name: 06-start rpcbind</span><br><span class="line">    service: name=rpcbind state=started</span><br><span class="line">  - name: 07-start nfs</span><br><span class="line">    service: name=nfs state=started</span><br><span class="line">  - name: 08-enable rpcbind                                                                                                                                      </span><br><span class="line">    systemd: name=rpcbind enabled=yes</span><br><span class="line">  - name: 09-enable nfs </span><br><span class="line">    systemd: name=nfs enabled=yes</span><br></pre></td></tr></table></figure><p>NFS客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat nfs_client.yaml </span></span><br><span class="line">---</span><br><span class="line">- hosts: nfs_client</span><br><span class="line">  tasks:</span><br><span class="line">  - name: 01-install nfs service</span><br><span class="line">    yum: name=nfs-utils state=latest</span><br><span class="line">  - name: 02-add group</span><br><span class="line">    group: name=www gid=666</span><br><span class="line">  - name: 03-add user</span><br><span class="line">    user: name=www create_home=no shell=/sbin/nologin group=www uid=666</span><br><span class="line">  - name: 04-create data dir</span><br><span class="line">    file: path=/data state=directory owner=www group=www</span><br><span class="line">  - name: 05-start rpcbind</span><br><span class="line">    service: name=rpcbind state=started enabled=yes</span><br><span class="line">  - name: 06-mount data</span><br><span class="line">    mount: path=/data src=172.16.1.31:/data fstype=nfs opts=defaults state=mounted</span><br></pre></td></tr></table></figure><h3 id="3-3-检查剧本语法"><a href="#3-3-检查剧本语法" class="headerlink" title="3.3 检查剧本语法"></a>3.3 检查剧本语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook --syntax-check nfs_client.yaml</span><br></pre></td></tr></table></figure><h3 id="3-4-模拟执行剧本（常用）"><a href="#3-4-模拟执行剧本（常用）" class="headerlink" title="3.4 模拟执行剧本（常用）"></a>3.4 模拟执行剧本（常用）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -C nfs_client.yaml</span><br></pre></td></tr></table></figure><h3 id="3-5-执行剧本"><a href="#3-5-执行剧本" class="headerlink" title="3.5 执行剧本"></a>3.5 执行剧本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook nfs_client.yaml</span><br></pre></td></tr></table></figure><h2 id="第4章-剧本高级-特性"><a href="#第4章-剧本高级-特性" class="headerlink" title="第4章 剧本高级 特性"></a>第4章 剧本高级 特性</h2><p>我们已经体验了使用剧本来安装服务，但是上述的简单ansible剧本存在一定的局限性<br>1.全部写成一行虽然看起来整洁，但是有一些特性没办法使用<br>2.比如同时需要创建多个目录，启动多个服务，需要重复写多条语句<br>3.参数不直观，不好修改<br>4.剧本里写的是启动服务，如果配置文件发生变化，重复执行不会重启服务</p><p>不过没有关系，等学习了下面的高级特性，然后我们可以换一种写法</p><h3 id="4-1-循环"><a href="#4-1-循环" class="headerlink" title="4.1 循环"></a>4.1 循环</h3><p>官方网址: </p><p><a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html</a></p><p>使用情景：<br>1.需要创建多个目录<br>2.需要启动多个服务<br>具体实现：</p><p>1.同时创建2个目录/data和/backup</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat loops.yaml </span></span><br><span class="line">- hosts: 172.16.1.41</span><br><span class="line">  tasks:</span><br><span class="line">  - name: 01-create dir data and backuo</span><br><span class="line">    file:</span><br><span class="line">      path: <span class="string">"&#123;&#123; item &#125;&#125;"</span></span><br><span class="line">      state: directory</span><br><span class="line">      owner: www</span><br><span class="line">      group: www</span><br><span class="line">    loop: </span><br><span class="line">    - /data</span><br><span class="line">    - /backup</span><br></pre></td></tr></table></figure><p>2.同时启动2个服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat service.yaml </span></span><br><span class="line">- hosts: 172.16.1.31</span><br><span class="line">  tasks: </span><br><span class="line">  - name: 01-start rpcbind nfs service</span><br><span class="line">    service: </span><br><span class="line">      name: <span class="string">"&#123;&#123; item &#125;&#125;"</span></span><br><span class="line">      state: started</span><br><span class="line">    loop:</span><br><span class="line">      - rpcbind</span><br><span class="line">      - nfs</span><br></pre></td></tr></table></figure><h3 id="4-2-变量"><a href="#4-2-变量" class="headerlink" title="4.2 变量"></a>4.2 变量</h3><p>官方网址：</p><p><a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html</a></p><p>使用情景：<br>1.自定义某个名称，在任务中会多次引用<br>2.从主机收集的系统信息中提取某个变量并引用，例如网卡信息</p><p>具体实现：</p><p>1.自定义一个文件名变量，创建文件时引用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat vars.yaml </span></span><br><span class="line">- hosts: 172.16.1.41</span><br><span class="line">  vars:</span><br><span class="line">    file_name: oldboy</span><br><span class="line"></span><br><span class="line">  tasks: </span><br><span class="line">  - name: 01-use vars create dir</span><br><span class="line">    file: </span><br><span class="line">      path: <span class="string">"/root/&#123;&#123; file_name &#125;&#125;"</span></span><br><span class="line">      state: directory</span><br><span class="line">      owner: www</span><br><span class="line">      group: www</span><br></pre></td></tr></table></figure><p>2.使用变量获取主机的eth1地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat ip.yaml </span></span><br><span class="line">- hosts: 172.16.1.41</span><br><span class="line">  tasks:</span><br><span class="line">  - name: 01-get ip address</span><br><span class="line">    shell: <span class="string">"echo &#123;&#123; ansible_facts.eth1.ipv4.address &#125;&#125; &gt; /root/ip_eth1.txt"</span></span><br></pre></td></tr></table></figure><p>3.在主机hosts中指定变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># cat /etc/ansible/hosts</span></span><br><span class="line">[backup]</span><br><span class="line">172.16.1.41</span><br><span class="line"></span><br><span class="line">[backup:vars]</span><br><span class="line">file_name=<span class="string">"oldzhang"</span></span><br></pre></td></tr></table></figure><h3 id="4-3-注册变量"><a href="#4-3-注册变量" class="headerlink" title="4.3 注册变量"></a>4.3 注册变量</h3><p>使用情景：将配置文件的状态注册成一个变量，方便其他任务引用</p><p>具体实现：<br>1.将配置文件的状态注册成一个服务变量并打印出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat register.yaml </span></span><br><span class="line">- hosts: 172.16.1.41</span><br><span class="line">  tasks:</span><br><span class="line">  - name: 01-register rsync status</span><br><span class="line">    shell: netstat -lntp|grep rsync</span><br><span class="line">    register: rsync_port</span><br><span class="line"></span><br><span class="line">  - name: 02-out rsync status</span><br><span class="line">    debug:</span><br><span class="line">      msg: <span class="string">"&#123;&#123; rsync_port.stdout_lines &#125;&#125;"</span></span><br></pre></td></tr></table></figure><p>2.打印多个信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- hosts: nfs</span><br><span class="line">  tasks:</span><br><span class="line">  - name: 01-echo hostname</span><br><span class="line">    shell: <span class="built_in">echo</span> $(hostname)</span><br><span class="line">    register: nfs_hostname    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  - name: debug nfs_hostname</span><br><span class="line">    debug:</span><br><span class="line">      msg: <span class="string">"&#123;&#123; item &#125;&#125;"</span>      <span class="comment">#</span></span><br><span class="line">    loop:</span><br><span class="line">      - <span class="string">"&#123;&#123; nfs_hostname.stdout &#125;&#125;"</span></span><br><span class="line">      - <span class="string">"&#123;&#123; nfs_hostname.cmd &#125;&#125;"</span></span><br></pre></td></tr></table></figure><h3 id="4-4-服务管理"><a href="#4-4-服务管理" class="headerlink" title="4.4 服务管理"></a>4.4 服务管理</h3><p>官网地址：</p><p><a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html?highlight=handlers#handlers-running-operations-on-change" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html?highlight=handlers#handlers-running-operations-on-change</a></p><p>使用情景：如果配置文件发生了变化，就重启服务，否则什么都不操作<br>具体实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># </span></span><br><span class="line">- hosts: rsync_server</span><br><span class="line">  tasks:</span><br><span class="line">  - name: 02-backup &amp; copy</span><br><span class="line">    copy:</span><br><span class="line">      src: <span class="string">"&#123;&#123; rsync_conf_path &#125;&#125;"</span></span><br><span class="line">      dest: /etc/</span><br><span class="line">      backup: yes</span><br><span class="line">    notify:</span><br><span class="line">      - restart rsyncd</span><br><span class="line">  handlers:  </span><br><span class="line">  - name: restart rsyncd</span><br><span class="line">    service: </span><br><span class="line">      name: rsyncd</span><br><span class="line">      state: restarted</span><br></pre></td></tr></table></figure><h3 id="4-5-标签"><a href="#4-5-标签" class="headerlink" title="4.5 标签"></a>4.5 标签</h3><p>使用情景：从我们指定的任务开始执行，而不是从头到尾执行一遍<br>具体实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat rsync_server2.yaml </span></span><br><span class="line">---</span><br><span class="line">- hosts: rsync_server</span><br><span class="line">  tasks:</span><br><span class="line">  - name: 01-install rsync</span><br><span class="line">    yum: name=rsync state=installed</span><br><span class="line">    tags: 01-install-rsync</span><br><span class="line">  - name: 02-backup rsyncd.conf</span><br><span class="line">    copy: src=/etc/rsyncd.conf dest=/etc/rsyncd.conf.bak remote_src=yes</span><br><span class="line">    tags: 02-backup-rsyncd.conf</span><br><span class="line">  - name: 03-copy rsyncd.conf</span><br><span class="line">    copy: src=/server/scripts/playbook/rsyncd.conf dest=/etc/</span><br><span class="line">    tags: 03-copy-rsyncd.conf</span><br><span class="line">  - name: 04-create passwd</span><br><span class="line">    copy: content=<span class="string">'rsync_backup:oldboy'</span> dest=/etc/rsync.passwd mode=0600</span><br><span class="line">    tags: 04-create-passwd</span><br><span class="line">  - name: 05-add group</span><br><span class="line">    group: name=www gid=666</span><br><span class="line">    tags: 05-add-group</span><br><span class="line">  - name: 06-add user</span><br><span class="line">    user: name=www uid=666 group=www shell=/sbin/nologin create_home=no</span><br><span class="line">    tags: 06-add-user</span><br><span class="line">  - name: 07-create backup dir</span><br><span class="line">    file: path=/backup state=directory owner=www group=www</span><br><span class="line">    tags: 07-create-backup-dir</span><br><span class="line">  - name: 08-create data dir</span><br><span class="line">    file: path=/data state=directory owner=www group=www</span><br><span class="line">    tags: 08-create-data-dir</span><br><span class="line">  - name: 09-start rsyncd</span><br><span class="line">    service: name=rsyncd state=started enabled=yes</span><br><span class="line">    tags: 09-start-rsyncd</span><br></pre></td></tr></table></figure><p>调用标签：<br>1.打印出playbook里要执行的所有标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># ansible-playbook --list-tags rsync_server2.yaml</span></span><br></pre></td></tr></table></figure><p>2.指定运行某个标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># ansible-playbook -t 04-create-passwd rsync_server2.yaml</span></span><br></pre></td></tr></table></figure><p>3.指定运行多个标签，使用逗号隔开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># ansible-playbook -t 04-create-passwd,07-create-backup-dir rsync_server2.yaml</span></span><br></pre></td></tr></table></figure><p>4.指定不运行某个标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># ansible-playbook --skip-tags=08-create-data-dir rsync_server2.yaml</span></span><br></pre></td></tr></table></figure><h2 id="第5章-运行检查规范"><a href="#第5章-运行检查规范" class="headerlink" title="第5章 运行检查规范"></a>第5章 运行检查规范</h2><h3 id="5-1-检查剧本拼写规范"><a href="#5-1-检查剧本拼写规范" class="headerlink" title="5.1 检查剧本拼写规范"></a>5.1 检查剧本拼写规范</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook --syntax-check check.yam</span><br></pre></td></tr></table></figure><h3 id="5-2-检查这个任务执行的主机对象"><a href="#5-2-检查这个任务执行的主机对象" class="headerlink" title="5.2 检查这个任务执行的主机对象"></a>5.2 检查这个任务执行的主机对象</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook --list-host check.yaml</span><br></pre></td></tr></table></figure><h3 id="5-3-检查这个剧本需要执行哪些任务"><a href="#5-3-检查这个剧本需要执行哪些任务" class="headerlink" title="5.3 检查这个剧本需要执行哪些任务"></a>5.3 检查这个剧本需要执行哪些任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook --list-tasks check.yaml</span><br></pre></td></tr></table></figure><h3 id="5-4-检查这个剧本执行哪些tag"><a href="#5-4-检查这个剧本执行哪些tag" class="headerlink" title="5.4 检查这个剧本执行哪些tag"></a>5.4 检查这个剧本执行哪些tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook --list-tags check.yaml</span><br></pre></td></tr></table></figure><h3 id="5-5-模拟执行剧本"><a href="#5-5-模拟执行剧本" class="headerlink" title="5.5 模拟执行剧本"></a>5.5 模拟执行剧本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -C check.yaml</span><br></pre></td></tr></table></figure><h2 id="第6章-实战剧本部署rsync-nfs-lsyncd"><a href="#第6章-实战剧本部署rsync-nfs-lsyncd" class="headerlink" title="第6章 实战剧本部署rsync/nfs/lsyncd"></a>第6章 实战剧本部署rsync/nfs/lsyncd</h2><h3 id="6-1-rsync-脚本"><a href="#6-1-rsync-脚本" class="headerlink" title="6.1 rsync 脚本"></a>6.1 rsync 脚本</h3><p>rsync 服务端脚本实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat rsync_serverV2.yaml </span></span><br><span class="line">---</span><br><span class="line">- hosts: rsync_server</span><br><span class="line">  vars:</span><br><span class="line">    rsync_conf_path: <span class="string">'/server/scripts/playbook/rsyncd.conf'</span></span><br><span class="line"></span><br><span class="line">  tasks: </span><br><span class="line">  - name: 01-install-rsync</span><br><span class="line">    yum:</span><br><span class="line">      name: rsync</span><br><span class="line">      state: installed</span><br><span class="line">    tags: 01-yum</span><br><span class="line"></span><br><span class="line">  - name: 02-backup &amp; copy</span><br><span class="line">    copy:</span><br><span class="line">      src: <span class="string">"&#123;&#123; rsync_conf_path &#125;&#125;"</span></span><br><span class="line">      dest: /etc/</span><br><span class="line">      backup: yes</span><br><span class="line">    notify:</span><br><span class="line">      - restart rsyncd</span><br><span class="line">    tags: 02-copy</span><br><span class="line"></span><br><span class="line">  - name: 03-create-group</span><br><span class="line">    group: </span><br><span class="line">      name: www</span><br><span class="line">      gid: 666</span><br><span class="line">    tags: 03-create-group</span><br><span class="line">      </span><br><span class="line">  - name: 04-create-user</span><br><span class="line">    user: </span><br><span class="line">      name: www</span><br><span class="line">      uid: 666</span><br><span class="line">      group: www</span><br><span class="line">      shell: /sbin/nologin</span><br><span class="line">      create_home: no</span><br><span class="line">    tags: 04-create-user</span><br><span class="line"></span><br><span class="line">  - name: 05-create-dir</span><br><span class="line">    file: </span><br><span class="line">      dest: <span class="string">"&#123;&#123; item &#125;&#125;"</span></span><br><span class="line">      state: directory</span><br><span class="line">      owner: www</span><br><span class="line">      group: www</span><br><span class="line">    loop:</span><br><span class="line">      - /backup</span><br><span class="line">      - /data</span><br><span class="line">    tags: 05-create-dir</span><br><span class="line"></span><br><span class="line">  - name: 06-create-passwd</span><br><span class="line">    copy: </span><br><span class="line">      content: <span class="string">'rsync_backup:oldboy'</span></span><br><span class="line">      dest: /etc/rsync.passwd</span><br><span class="line">      mode: 0600</span><br><span class="line">    tags: 06-create-passwd</span><br><span class="line">  </span><br><span class="line">  - name: 07-start-rsynd</span><br><span class="line">    service: </span><br><span class="line">      name: rsyncd </span><br><span class="line">      state: started </span><br><span class="line">      enabled: yes</span><br><span class="line">    tags: 07-start-rsynd</span><br><span class="line"></span><br><span class="line">  handlers:  </span><br><span class="line">  - name: restart rsyncd</span><br><span class="line">    service: </span><br><span class="line">      name: rsyncd</span><br><span class="line">      state: restarted</span><br></pre></td></tr></table></figure><p>rsync 客户端脚本实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat rsync_clinetV2.yaml </span></span><br><span class="line">---</span><br><span class="line">- hosts: rsync_client</span><br><span class="line">  tasks:</span><br><span class="line">  - name: 01-install-rsync</span><br><span class="line">    yum:</span><br><span class="line">      name: rsync</span><br><span class="line">      state: installed</span><br><span class="line">    tags: 01-yum</span><br><span class="line"></span><br><span class="line">  - name: 02-create-passwd</span><br><span class="line">    copy:</span><br><span class="line">      content: <span class="string">'oldboy'</span></span><br><span class="line">      dest: /etc/rsync.passwd</span><br><span class="line">      mode: 0600</span><br><span class="line">    tags: 02-create-passwd</span><br><span class="line"></span><br><span class="line">  - name: 03-create-group</span><br><span class="line">    group: </span><br><span class="line">      name: www</span><br><span class="line">      gid: 666</span><br><span class="line">    tags: 03-create-group</span><br><span class="line"></span><br><span class="line">  - name: 04-create-user</span><br><span class="line">    user: </span><br><span class="line">      name: www</span><br><span class="line">      uid: 666</span><br><span class="line">      group: www</span><br><span class="line">      shell: /sbin/nologin</span><br><span class="line">      create_home: no</span><br><span class="line">    tags: 04-create-user</span><br><span class="line"></span><br><span class="line">  - name: 05-create-dir</span><br><span class="line">    file: </span><br><span class="line">      dest: <span class="string">"&#123;&#123; item &#125;&#125;"</span></span><br><span class="line">      state: directory</span><br><span class="line">      owner: www</span><br><span class="line">      group: www</span><br><span class="line">    loop:</span><br><span class="line">      - /backup</span><br><span class="line">      - /data</span><br><span class="line">    tags: 05-create-dir</span><br></pre></td></tr></table></figure><h3 id="6-2-NFS-脚本"><a href="#6-2-NFS-脚本" class="headerlink" title="6.2 NFS 脚本"></a>6.2 NFS 脚本</h3><p>NFS服务端脚本实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat nfs_serverV2.yaml </span></span><br><span class="line">---</span><br><span class="line">- hosts: nfs_server</span><br><span class="line">  vars:</span><br><span class="line">    exports_path: <span class="string">'/server/scripts/playbook/exports'</span></span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">  - name: 01-install-nfs</span><br><span class="line">    yum: </span><br><span class="line">      name: nfs-utils </span><br><span class="line">      state: latest</span><br><span class="line">    tags: 01-yum-nfs</span><br><span class="line"></span><br><span class="line">  - name: 02-copy-nfs-exports</span><br><span class="line">    copy:</span><br><span class="line">      src: <span class="string">"&#123;&#123; exports_path &#125;&#125;"</span></span><br><span class="line">      dest: /etc/</span><br><span class="line">    notify:</span><br><span class="line">      - restart rpcbind</span><br><span class="line">      - restart nfs-server</span><br><span class="line">    tags: 02-copy-nfs-exports</span><br><span class="line"></span><br><span class="line">  - name: 03-create-group</span><br><span class="line">    group:</span><br><span class="line">      name: www</span><br><span class="line">      gid: 666</span><br><span class="line">    tags: 03-create-group</span><br><span class="line"></span><br><span class="line">  - name: 04-create-user</span><br><span class="line">    user:</span><br><span class="line">      name: www</span><br><span class="line">      uid: 666</span><br><span class="line">      shell: /sbin/nologin</span><br><span class="line">      create_home: no</span><br><span class="line">    tags: 04-create-user</span><br><span class="line"></span><br><span class="line">  - name: 05-create-dir</span><br><span class="line">    file:</span><br><span class="line">      dest: <span class="string">"&#123;&#123; item &#125;&#125;"</span></span><br><span class="line">      state: directory</span><br><span class="line">      owner: www</span><br><span class="line">      group: www</span><br><span class="line">    loop:</span><br><span class="line">      - /backup</span><br><span class="line">      - /data</span><br><span class="line">    tags: 05-create-dir</span><br><span class="line"></span><br><span class="line">  - name: 06-start-rpc &amp; nfs</span><br><span class="line">    service: </span><br><span class="line">      name: <span class="string">"&#123;&#123; item &#125;&#125;"</span></span><br><span class="line">      state: started</span><br><span class="line">      enabled: yes</span><br><span class="line">    loop:</span><br><span class="line">      - rpcbind</span><br><span class="line">      - nfs-server</span><br><span class="line">    tags: 06-start-rpc-nfs</span><br><span class="line"></span><br><span class="line">  handlers:</span><br><span class="line">  - name: restart rpcbind</span><br><span class="line">    service:</span><br><span class="line">      name: rpcbind</span><br><span class="line">      state: restarted</span><br><span class="line">  - name: restart nfs-server</span><br><span class="line">    service:</span><br><span class="line">      name: nfs-server</span><br><span class="line">      state: restarted</span><br></pre></td></tr></table></figure><p>NFS客户端脚本实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat nfs_clientV2.yaml</span></span><br><span class="line">---</span><br><span class="line">- hosts: nfs_client</span><br><span class="line">  tasks:</span><br><span class="line">  - name: 01-install-nfs</span><br><span class="line">    yum:</span><br><span class="line">      name: nfs-utils</span><br><span class="line">      state: latest</span><br><span class="line">    tags: 01-install-nfs</span><br><span class="line"></span><br><span class="line">  - name: 02-create-group</span><br><span class="line">    group:</span><br><span class="line">      name: www</span><br><span class="line">      gid: 666</span><br><span class="line">    tags: 02-create-group</span><br><span class="line">  </span><br><span class="line">  - name: 03-create-user</span><br><span class="line">    user:</span><br><span class="line">      name: www</span><br><span class="line">      uid: 666</span><br><span class="line">      group: www</span><br><span class="line">      shell: /sbin/nologin</span><br><span class="line">      create_home: no</span><br><span class="line">    tags: 03-create-user</span><br><span class="line"></span><br><span class="line">  - name: 04-create-dir</span><br><span class="line">    file: </span><br><span class="line">      path: /data</span><br><span class="line">      state: directory</span><br><span class="line">      owner: www</span><br><span class="line">      group: www</span><br><span class="line">    tags: 04-create-dir</span><br><span class="line"></span><br><span class="line">  - name: 05-start-rpcbind</span><br><span class="line">    service: </span><br><span class="line">      name: rpcbind</span><br><span class="line">      state: started</span><br><span class="line">      enabled: yes</span><br><span class="line">    tags: 05-start-rpcbind</span><br><span class="line"></span><br><span class="line">  - name: 06-mount-data</span><br><span class="line">    mount:</span><br><span class="line">      path: /data</span><br><span class="line">      src: 172.16.1.31:/data</span><br><span class="line">      fstype: nfs</span><br><span class="line">      opts: defaults</span><br><span class="line">      state: mounted</span><br><span class="line">    tags: 06-mount-data</span><br></pre></td></tr></table></figure><h3 id="6-3-lsync-脚本"><a href="#6-3-lsync-脚本" class="headerlink" title="6.3 lsync 脚本"></a>6.3 lsync 脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 /server/scripts/playbook]<span class="comment"># cat lsyncd.yaml </span></span><br><span class="line">---</span><br><span class="line">- hosts: nfs</span><br><span class="line">  vars: </span><br><span class="line">    lsyncd_conf_path: <span class="string">'/server/scripts/playbook/lsyncd.conf'</span></span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">  - name: 01-install-lsyncd</span><br><span class="line">    yum:</span><br><span class="line">      name: lsyncd</span><br><span class="line">      state: latest</span><br><span class="line">    tags: 01-install-lsyncd</span><br><span class="line"></span><br><span class="line">  - name: 02-copy-lsyncd.conf</span><br><span class="line">    copy:</span><br><span class="line">      src: <span class="string">"&#123;&#123; lsyncd_conf_path &#125;&#125;"</span></span><br><span class="line">      dest: /etc/</span><br><span class="line">      backup: yes</span><br><span class="line">    notify:</span><br><span class="line">      - restart lsyncd</span><br><span class="line">    tags: 02-copy-lsyncd.conf</span><br><span class="line"></span><br><span class="line">  - name: 03-start-lsyncd</span><br><span class="line">    service: </span><br><span class="line">      name: lsyncd</span><br><span class="line">      state: started</span><br><span class="line">      enabled: yes</span><br><span class="line">    tags: 03-start-lsyncd</span><br><span class="line"></span><br><span class="line">  handlers:</span><br><span class="line">  - name: restart lsyncd</span><br><span class="line">    service: </span><br><span class="line">      name: lsyncd</span><br><span class="line">      state: restarted</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="LNMP" scheme="http://linuxwf.com/categories/LNMP/"/>
    
    
      <category term="ansible" scheme="http://linuxwf.com/tags/ansible/"/>
    
      <category term="ansible playbook" scheme="http://linuxwf.com/tags/ansible-playbook/"/>
    
  </entry>
  
  <entry>
    <title>6.ansible服务</title>
    <link href="http://linuxwf.com/2020/04/13/6-ansible%E6%9C%8D%E5%8A%A1/"/>
    <id>http://linuxwf.com/2020/04/13/6-ansible%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-04-13T04:23:00.000Z</published>
    <updated>2020-04-13T04:25:44.499Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Ansible服务"><a href="#Ansible服务" class="headerlink" title="Ansible服务"></a>Ansible服务</h1><h2 id="第1章-Ansible介绍"><a href="#第1章-Ansible介绍" class="headerlink" title="第1章 Ansible介绍"></a>第1章 Ansible介绍</h2><h3 id="1-1-什么是Ansible？"><a href="#1-1-什么是Ansible？" class="headerlink" title="1.1 什么是Ansible？"></a>1.1 什么是Ansible？</h3><p><code>ansible</code>是一种自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能，默认通过SSH协议管理机器。 </p><p>ansible是基于模块工作的，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架，不需要在远程主机上安装client/agents，因为它们是基于ssh来和远程主机通讯的。</p><h3 id="1-2-为什么需要Ansible？"><a href="#1-2-为什么需要Ansible？" class="headerlink" title="1.2 为什么需要Ansible？"></a>1.2 为什么需要Ansible？</h3><p><strong>批量管理功能：</strong></p><p>1）可以实现批量系统操作配置</p><p>2）可以实现批量软件服务部署</p><p>3）可以实现批量文件数据分发</p><p>4）可以实现批量系统信息收集</p><p><strong>管理服务意义：</strong></p><p>1）提高工作的效率（部署综合架构） </p><p>2）提高工作准确度</p><p>3）减少维护的成本</p><p>4）减少重复性工作 </p><p><strong>ansible 安装部署简单：</strong></p><p>1）没有配置文件（不需要配置）</p><p>2）不需要启动服务</p><p>3）客户端没有需要部署任务</p><h2 id="第2章-ansible-安装部署"><a href="#第2章-ansible-安装部署" class="headerlink" title="第2章 ansible 安装部署"></a>第2章 ansible 安装部署</h2><p>Ansible的安装部署十分简单，只需要在管理机yum安装就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># yum -y install ansible</span></span><br></pre></td></tr></table></figure><h2 id="第3章-ansible-主机清单"><a href="#第3章-ansible-主机清单" class="headerlink" title="第3章 ansible 主机清单"></a>第3章 ansible 主机清单</h2><p>主机资产清单 <code>/etc/ansible/hosts</code> 文件，用于定义被管理主机的认证信息， 例如 ssh 登录用户名、密码以及 key相关信息。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.主机支持主机名通配以及正则表达式，例如 web[1:3].oldboy.com 代表三台主机</span><br><span class="line">2.主机支持基于非标准的 ssh 端口，例如 web1.oldboy.com:6666</span><br><span class="line">3.主机支持指定变量，可对个别主机的特殊配置，如登陆用户，密码</span><br><span class="line">4.主机组支持指定变量[group_name:vars]，同时支持嵌套[game:children]</span><br></pre></td></tr></table></figure><h3 id="3-1-指定主机组相关配置"><a href="#3-1-指定主机组相关配置" class="headerlink" title="3.1 指定主机组相关配置"></a>3.1 指定主机组相关配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主机组 第一种方式 (已经配置好ssh)</span></span><br><span class="line">[root@ssh-61 ~]<span class="comment"># cat /etc/ansible/hosts</span></span><br><span class="line">[webserver]</span><br><span class="line">172.16.1.31 </span><br><span class="line">172.16.1.41</span><br><span class="line"><span class="comment">#主机+端口+密码 第二种方式（ssh未分发公钥）</span></span><br><span class="line">[webserver]</span><br><span class="line">172.16.1.31 ansible_ssh_port=9999 ansible_ssh_user=root ansible_ssh_pass=<span class="string">'123456'</span></span><br><span class="line">172.16.1.41 ansible_ssh_port=9999 ansible_ssh_user=root ansible_ssh_pass=<span class="string">'123456'</span></span><br><span class="line"><span class="comment">#对整个主机组都生效的变量 </span></span><br><span class="line">[webserver:vars]</span><br><span class="line">ansible_ssh_pass=<span class="string">'123456'</span></span><br></pre></td></tr></table></figure><p>我们一般使用，先配置好<code>ssh</code>服务，分发公钥后，再指定主机组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># cat /etc/ansible/hosts</span></span><br><span class="line">[webserver]</span><br><span class="line">172.16.1.41 </span><br><span class="line">172.16.1.31 </span><br><span class="line"></span><br><span class="line">[webserver:vars]</span><br><span class="line">ansible_ssh_port=9999</span><br><span class="line">ansible_ssh_user=root</span><br><span class="line">ansible_ssh_pass=<span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line">[nfs]</span><br><span class="line">172.16.1.31</span><br><span class="line"></span><br><span class="line">[backup]</span><br><span class="line">172.16.1.41</span><br></pre></td></tr></table></figure><h2 id="第4章-ansible-常用模块"><a href="#第4章-ansible-常用模块" class="headerlink" title="第4章 ansible 常用模块"></a>第4章 ansible 常用模块</h2><p>ansible 官方网站 ： <a href="https://docs.ansible.com" target="_blank" rel="noopener">https://docs.ansible.com</a></p><p>模块的应用语法格式:<br>ansible 主机名称/主机组名称/主机地址信息/all -m(指定应用的模块信息) 模块名称 -a(指定动作信息) “执行什么动作”</p><h3 id="4-1-ping"><a href="#4-1-ping" class="headerlink" title="4.1 ping"></a>4.1 ping</h3><p>应用场景：测试主机和ansible之间的连通性<br>举例：对webserver主机组测试是否连通</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m ping</span></span><br><span class="line">172.16.1.41 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">172.16.1.31 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-command-简单模块"><a href="#4-2-command-简单模块" class="headerlink" title="4.2 command 简单模块"></a>4.2 command 简单模块</h3><p>应用场景：<br>类似shell,但是只能执行简单的命令，复杂的命令和有些符号并不能识别，用的比较少<br>01.查看主机名，可以执行成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m command -a "hostname"</span></span><br><span class="line">172.16.1.41 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">backup</span><br><span class="line"></span><br><span class="line">172.16.1.31 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">nfs</span><br></pre></td></tr></table></figure><p>02.使用awk拼接查看主机IP执行失败</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m command -a "ifconfig eth1|awk 'NR==2&#123;print $2&#125;'"</span></span><br><span class="line">172.16.1.41 | FAILED | rc=1 &gt;&gt;</span><br><span class="line">NR==2&#123;<span class="built_in">print</span> &#125;: Unknown host</span><br><span class="line">ifconfig: `--<span class="built_in">help</span><span class="string">' gives usage information.non-zero return code</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">172.16.1.31 | FAILED | rc=1 &gt;&gt;</span></span><br><span class="line"><span class="string">NR==2&#123;print &#125;: Unknown host</span></span><br><span class="line"><span class="string">ifconfig: `--help'</span> gives usage information.non-zero <span class="built_in">return</span> code</span><br></pre></td></tr></table></figure><h3 id="4-3-shell-万能模块"><a href="#4-3-shell-万能模块" class="headerlink" title="4.3 shell 万能模块"></a>4.3 shell 万能模块</h3><p>万能模块，所有命令都可以执行，和本地执行效果一样</p><h4 id="4-3-1-使用管道查询IP地址"><a href="#4-3-1-使用管道查询IP地址" class="headerlink" title="4.3.1 使用管道查询IP地址"></a>4.3.1 使用管道查询IP地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m shell -a "ifconfig eth1|awk 'NR==2'"</span></span><br><span class="line">172.16.1.31 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">        inet 172.16.1.31  netmask 255.255.255.0  broadcast 172.16.1.255</span><br><span class="line"></span><br><span class="line">172.16.1.41 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">        inet 172.16.1.41  netmask 255.255.255.0  broadcast 172.16.1.255</span><br></pre></td></tr></table></figure><h4 id="4-3-2-批量执行脚本"><a href="#4-3-2-批量执行脚本" class="headerlink" title="4.3.2 批量执行脚本"></a>4.3.2 批量执行脚本</h4><p>在其他主机上创建一个脚本，内容为打印主机名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; echo.sh &lt;&lt; EOF </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$(hostname)</span>"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>然后使用ansible的shell模块批量执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m shell -a "/bin/bash /root/echo.sh"</span></span><br><span class="line">172.16.1.31 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">nfs</span><br><span class="line"></span><br><span class="line">172.16.1.41 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">backup</span><br></pre></td></tr></table></figure><h3 id="4-4-copy-拷贝文件"><a href="#4-4-copy-拷贝文件" class="headerlink" title="4.4 copy 拷贝文件"></a>4.4 copy 拷贝文件</h3><p>1.拷贝ssh-61的/etc/hostname文件到其他主机的/tmp目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m copy -a "src=/etc/hostname dest=/tmp"</span></span><br><span class="line">172.16.1.41 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"c5b01b59eec249e998dd82c375b269fe10cff9d3"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/tmp/hostname"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 0, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"d61060d5859d1e67541238e8c296938e"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0644"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 7, </span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"/root/.ansible/tmp/ansible-tmp-1563897217.78-184562543546238/source"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在copy 文件时修改文件属主和属组信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m copy -a "src=/etc/hostname dest=/tmp owner=oldboy group=oldboy"</span></span><br><span class="line">172.16.1.31 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"c5b01b59eec249e998dd82c375b269fe10cff9d3"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/tmp/hostname"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 1000, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"oldboy"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0644"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"oldboy"</span>, </span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/tmp/hostname"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 7, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 1000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在copy文件时修改文件的权限信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m copy -a "src=/etc/hostname dest=/tmp mode=0666"</span></span><br><span class="line">172.16.1.41 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"c5b01b59eec249e998dd82c375b269fe10cff9d3"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/tmp/hostname"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 1000, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"oldboy"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0666"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"oldboy"</span>, </span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/tmp/hostname"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 7, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 1000</span><br><span class="line">&#125;</span><br><span class="line">[root@backup ~]<span class="comment"># ll /tmp/hostname </span></span><br><span class="line">-rw-rw-rw- 1 oldboy oldboy 7 Jul 23 23:53 /tmp/hostname</span><br></pre></td></tr></table></figure><p>4.创建文件并直接写入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m copy -a "content='oldboy' dest=/root/oldboy.txt"</span></span><br><span class="line">172.16.1.41 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"da3a7ab3551120059810d0c7156a8150a0bc245a"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/root/oldboy.txt"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 0, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"890b185727556f1be31d7fe5ee5ce4dc"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0644"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 6, </span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"/root/.ansible/tmp/ansible-tmp-1563897755.59-265719354438343/source"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 0</span><br><span class="line">&#125;</span><br><span class="line">[root@backup ~]<span class="comment"># cat oldboy.txt </span></span><br><span class="line">oldboy</span><br></pre></td></tr></table></figure><p>5.复制目录</p><p>src后面目录没有/: 将目录本身以及目录下面的内容都进行远程传输复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible webservser -m copy -a <span class="string">"src=/data dest=/data"</span></span><br></pre></td></tr></table></figure><p>src后面目录有/: 只将目录下面的内容都进行远程传输复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible webservser -m copy -a <span class="string">"src=/data/ dest=/data"</span></span><br></pre></td></tr></table></figure><h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src <span class="comment">#推送数据的源文件信息</span></span><br><span class="line">dest <span class="comment">#推送数据的目标路径</span></span><br><span class="line">backup <span class="comment">#对推送传输过去的文件，进行备份</span></span><br><span class="line">content <span class="comment">#直接批量在被管理端文件中添加内容</span></span><br><span class="line">group <span class="comment">#将本地文件推送到远端，指定文件属组信息</span></span><br><span class="line">owner <span class="comment">#将本地文件推送到远端，指定文件属主信息</span></span><br><span class="line">mode <span class="comment">#将本地文件推送到远端，指定文件权限信息</span></span><br></pre></td></tr></table></figure><h3 id="4-5-file-设置文件属性"><a href="#4-5-file-设置文件属性" class="headerlink" title="4.5 file 设置文件属性"></a>4.5 file 设置文件属性</h3><h4 id="4-5-1-创建文件夹"><a href="#4-5-1-创建文件夹" class="headerlink" title="4.5.1 创建文件夹"></a>4.5.1 创建文件夹</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m file -a "path=/root/oldboy state=directory"</span></span><br><span class="line">172.16.1.31 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 0, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0755"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/root/oldboy"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 6, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"directory"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 0</span><br><span class="line">&#125;</span><br><span class="line">[root@nfs ~]<span class="comment"># ll -d oldboy</span></span><br><span class="line">drwxr-xr-x 2 root root 6 Jul 24 00:10 oldboy</span><br></pre></td></tr></table></figure><h4 id="4-5-2-创建文件并更改属性"><a href="#4-5-2-创建文件并更改属性" class="headerlink" title="4.5.2 创建文件并更改属性"></a>4.5.2 创建文件并更改属性</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m file -a "path=/tmp/oldboy.txt state=touch mode=666 owner=oldboy group=oldboy"</span></span><br><span class="line">172.16.1.41 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/tmp/oldboy.txt"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 1000, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"oldboy"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0666"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"oldboy"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 0, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 1000</span><br><span class="line">&#125;</span><br><span class="line">[root@backup ~]<span class="comment"># ll /tmp/oldboy.txt </span></span><br><span class="line">-rw-rw-rw- 1 oldboy oldboy 0 Jul 24 00:12 /tmp/oldboy.txt</span><br></pre></td></tr></table></figure><h4 id="4-5-3-创建软链接"><a href="#4-5-3-创建软链接" class="headerlink" title="4.5.3 创建软链接"></a>4.5.3 创建软链接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m file -a "src=/root/oldboy.txt path=/root/oldboy.txt_link state=link"</span></span><br><span class="line">172.16.1.41 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/root/oldboy.txt_link"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 0, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0777"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 16, </span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"/root/oldboy.txt"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"link"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 0</span><br><span class="line">&#125;</span><br><span class="line">[root@backup ~]<span class="comment"># ll</span></span><br><span class="line">lrwxrwxrwx  1 root root   16 Jul 24 00:19 oldboy.txt_link -&gt; /root/oldboy.txt</span><br></pre></td></tr></table></figure><h4 id="4-5-4-参数说明"><a href="#4-5-4-参数说明" class="headerlink" title="4.5.4 参数说明"></a>4.5.4 参数说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">path <span class="comment">#指定远程主机目录或文件信息</span></span><br><span class="line">recurse <span class="comment">#递归授权</span></span><br><span class="line">state</span><br><span class="line">directory <span class="comment">#在远端创建目录</span></span><br><span class="line">touch <span class="comment">#在远端创建文件</span></span><br><span class="line">link <span class="comment">#link 或 hard 表示创建链接文件</span></span><br><span class="line">absent <span class="comment">#表示删除文件或目录</span></span><br><span class="line">mode <span class="comment">#设置文件或目录权限</span></span><br><span class="line">owner <span class="comment">#设置文件或目录属主信息</span></span><br><span class="line">group <span class="comment">#设置文件或目录属组信息</span></span><br></pre></td></tr></table></figure><h3 id="4-6-script模块"><a href="#4-6-script模块" class="headerlink" title="4.6 script模块"></a>4.6 script模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写脚本</span></span><br><span class="line">[root@m01 ~]<span class="comment"># mkdir -p /server/scripts</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cat /server/scripts/echo.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">/usr/bin/<span class="built_in">echo</span> <span class="string">"<span class="variable">$(hostname)</span>"</span></span><br><span class="line"><span class="comment">#在本地运行模块，等同于在远程执行，不需要将脚本文件进行推送目标主机执行</span></span><br><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m script -a "/server/scripts/echo.sh"</span></span><br><span class="line">172.16.1.41 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"rc"</span>: 0, </span><br><span class="line">    <span class="string">"stderr"</span>: <span class="string">"Shared connection to 172.16.1.41 closed.\r\n"</span>, </span><br><span class="line">    <span class="string">"stderr_lines"</span>: [</span><br><span class="line">        <span class="string">"Shared connection to 172.16.1.41 closed."</span></span><br><span class="line">    ], </span><br><span class="line">    <span class="string">"stdout"</span>: <span class="string">"backup\r\n"</span>, </span><br><span class="line">    <span class="string">"stdout_lines"</span>: [</span><br><span class="line">        <span class="string">"backup"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-cron定时任务模块"><a href="#4-7-cron定时任务模块" class="headerlink" title="4.7 cron定时任务模块"></a>4.7 cron定时任务模块</h3><p>1.创建一条定时任务，添加定时任务时注释信息，防止重复，方便修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m cron -a "name='主机名' job='/bin/bash /root/echo.sh &gt;/dev/null 2&gt;&amp;1'"</span></span><br><span class="line"></span><br><span class="line">[root@backup ~]<span class="comment"># crontab -l</span></span><br><span class="line"><span class="comment">#Ansible: 主机名</span></span><br><span class="line">* * * * * /bin/bash /root/echo.sh &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>2.删除相应定时任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m cron -a "name='主机名' state=absent"</span></span><br></pre></td></tr></table></figure><p>3.注释相应定时任务，使定时任务失效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m cron -a "name='主机名' job='/bin/bash /root/echo.sh &gt;/dev/null 2&gt;&amp;1' disabled=yes"</span></span><br><span class="line"></span><br><span class="line">[root@backup ~]<span class="comment"># crontab -l</span></span><br><span class="line"><span class="comment">#Ansible: 主机名</span></span><br><span class="line"><span class="comment">#* * * * * /bin/bash /root/echo.sh &gt;/dev/null 2&gt;&amp;1</span></span><br></pre></td></tr></table></figure><h3 id="4-8-user-和group"><a href="#4-8-user-和group" class="headerlink" title="4.8 user 和group"></a>4.8 user 和group</h3><p>创建用户组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m group -a "name=BBB gid=777 state=present"</span></span><br></pre></td></tr></table></figure><p>创建用户，并属于组BBB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m user -a "name=BBB uid=777 group=777 shell=/sbin/nologin create_home=no"</span></span><br><span class="line">[root@backup ~]<span class="comment"># id BBB</span></span><br><span class="line">uid=777(BBB) gid=777(BBB) groups=777(BBB)</span><br></pre></td></tr></table></figure><p>user参数说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uid <span class="comment">#指定用户的 uid</span></span><br><span class="line">group <span class="comment">#指定用户组名称</span></span><br><span class="line">groups <span class="comment">#指定附加组名称</span></span><br><span class="line">password <span class="comment">#给用户添加密码</span></span><br><span class="line">shell <span class="comment">#指定用户登录 shell</span></span><br><span class="line">create_home <span class="comment">#是否创建家目录</span></span><br></pre></td></tr></table></figure><p>group参数说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name <span class="comment">#指定创建的组名</span></span><br><span class="line">gid <span class="comment">#指定组的 gid</span></span><br><span class="line">state</span><br><span class="line">absent <span class="comment">#移除远端主机的组</span></span><br><span class="line">present <span class="comment">#创建远端主机的组（默认）</span></span><br></pre></td></tr></table></figure><h3 id="4-9-yum"><a href="#4-9-yum" class="headerlink" title="4.9 yum"></a>4.9 yum</h3><p>yum安装ntpdate服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m yum -a "name=ntpdate state=installed"</span></span><br><span class="line">[root@backup ~]<span class="comment"># rpm -qa |grep ntpdate</span></span><br><span class="line">ntpdate-4.2.6p5-28.el7.centos.x86_64</span><br></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name       <span class="comment">#指定要安装的软件包名称</span></span><br><span class="line">state      <span class="comment">#指定使用 yum 的方法</span></span><br><span class="line">installed， present <span class="comment">#安装软件包</span></span><br><span class="line">removed， absent <span class="comment">#移除软件包</span></span><br><span class="line">latest     <span class="comment">#安装最新软件包</span></span><br></pre></td></tr></table></figure><h3 id="4-10-service"><a href="#4-10-service" class="headerlink" title="4.10 service"></a>4.10 service</h3><p>启动或关闭服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m  service -a "name=nfs state=restarted enabled=yes"</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name <span class="comment"># 定义要启动服务的名称</span></span><br><span class="line">state <span class="comment"># 指定服务状态</span></span><br><span class="line">started <span class="comment">#启动服务</span></span><br><span class="line">stopped <span class="comment">#停止服务</span></span><br><span class="line">restarted <span class="comment">#重启服务</span></span><br><span class="line">reloaded <span class="comment">#重载服务</span></span><br><span class="line">enabled <span class="comment">#开机自启</span></span><br></pre></td></tr></table></figure><h3 id="4-11-mount"><a href="#4-11-mount" class="headerlink" title="4.11 mount"></a>4.11 mount</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ansible webservser -m mount -a <span class="string">"src=172.16.1.31:/data path=/data fstype=nfs opts=defaults</span></span><br><span class="line"><span class="string">state=present"</span></span><br><span class="line">ansible webservser -m mount -a <span class="string">"src=172.16.1.31:/data path=/data fstype=nfs opts=defaults</span></span><br><span class="line"><span class="string">state=mounted"</span></span><br><span class="line">ansible webservser -m mount -a <span class="string">"src=172.16.1.31:/data path=/data fstype=nfs opts=defaults</span></span><br><span class="line"><span class="string">state=unmounted"</span></span><br><span class="line">ansible webservser -m mount -a <span class="string">"src=172.16.1.31:/data path=/data fstype=nfs opts=defaults</span></span><br><span class="line"><span class="string">state=absent"</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">present <span class="comment"># 开机挂载，仅将挂载配置写入/etc/fstab</span></span><br><span class="line">mounted <span class="comment"># 挂载设备，并将配置写入/etc/fstab</span></span><br><span class="line">unmounted <span class="comment"># 卸载设备，不会清除/etc/fstab 写入的配置</span></span><br><span class="line">absent <span class="comment"># 卸载设备，会清理/etc/fstab 写入的配置</span></span><br></pre></td></tr></table></figure><h3 id="4-12-unarchive-解压"><a href="#4-12-unarchive-解压" class="headerlink" title="4.12 unarchive 解压"></a>4.12 unarchive 解压</h3><p>1.解压远程服务器的压缩包到指定目录</p><p>远程backup服务器创建压缩包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@backup ~]<span class="comment"># cd / &amp;&amp; tar zcf /root/sys.tar.gz etc/fstab etc/hosts</span></span><br><span class="line">[root@ssh-61 /]<span class="comment"># cd </span></span><br><span class="line">[root@ssh-61 ~]<span class="comment"># ll</span></span><br><span class="line">-rw-r--r--  1 root root  561 Jul 24 01:24 sys.tar.gz</span><br></pre></td></tr></table></figure><p>ansible本地执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible backup -m unarchive -a "src=/root/sys.tar.gz dest=/tmp/ remote_src=yes"</span></span><br><span class="line">[root@backup /tmp/etc]<span class="comment"># ll</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root 595 Jul 18 17:33 fstab</span><br><span class="line">-rw-r--r-- 1 root root 423 Jul 16 04:43 hosts</span><br></pre></td></tr></table></figure><p>2.把本地文件解压到目标机器指定目录<br>创建命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># cd / &amp;&amp; tar zcf /root/sys.tar.gz etc/fstab etc/hosts</span></span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible nfs -m unarchive -a "src=/root/sys.tar.gz dest=/backup/"</span></span><br><span class="line">[root@nfs /backup]<span class="comment"># tree etc/</span></span><br><span class="line">etc/</span><br><span class="line">├── fstab</span><br><span class="line">└── hosts</span><br></pre></td></tr></table></figure><h3 id="4-13-archive-压缩"><a href="#4-13-archive-压缩" class="headerlink" title="4.13 archive 压缩"></a>4.13 archive 压缩</h3><p>压缩单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible nfs -m archive -a "path=/root/1.txt dest=/tmp/1.tar.gz format=gz force_archive=true"</span></span><br><span class="line">[root@nfs /tmp]<span class="comment"># ll</span></span><br><span class="line">-rw-r--r--  1 root   root       56 Jul 24 01:51 1.tar.gz</span><br></pre></td></tr></table></figure><h3 id="4-14-setup"><a href="#4-14-setup" class="headerlink" title="4.14 setup"></a>4.14 setup</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ansible webserver -m setup</span></span><br></pre></td></tr></table></figure><h2 id="第5章-查看帮助"><a href="#第5章-查看帮助" class="headerlink" title="第5章 查看帮助"></a>第5章 查看帮助</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible-doc -l  <span class="comment">#查看所有模块说明信息</span></span><br><span class="line">ansible-doc copy  <span class="comment">#查看copy模块信息</span></span><br></pre></td></tr></table></figure><h2 id="第6章-ansible输出信息颜色解释"><a href="#第6章-ansible输出信息颜色解释" class="headerlink" title="第6章 ansible输出信息颜色解释"></a>第6章 ansible输出信息颜色解释</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">01. 绿色信息:  查看主机信息/对主机未做改动</span><br><span class="line">02. 黄色信息:  对主机数据信息做了修改</span><br><span class="line">03. 红色信息:  命令执行出错了</span><br><span class="line">04. 粉色信息:  忠告信息</span><br><span class="line">05. 蓝色信息:  显示ansible命令执行的过程</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="LNMP" scheme="http://linuxwf.com/categories/LNMP/"/>
    
    
      <category term="ansible" scheme="http://linuxwf.com/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>5.SSH服务</title>
    <link href="http://linuxwf.com/2020/04/13/5-SSH%E6%9C%8D%E5%8A%A1/"/>
    <id>http://linuxwf.com/2020/04/13/5-SSH%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-04-13T04:19:00.000Z</published>
    <updated>2020-04-13T04:43:01.894Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h1><h2 id="第1章-什么是ssh"><a href="#第1章-什么是ssh" class="headerlink" title="第1章 什么是ssh"></a>第1章 什么是ssh</h2><p>`SSH 为 Secure Shell 的缩写，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。<br>SSH是标准的网络协议，可用于大多数UNIX操作系统，能够实现字符界面的远程登录管理，它默认使用22号端口，采用密文的形式在网络中传输数据，相对于通过明文传输的Telnet，具有更高的安全性。<br>SSH提供了口令和密钥两种用户验证方式，这两者都是通过密文传输数据的。</p><p>SSH与Telnet的区别：</p><p>SSH: 系统默认配置 22 默认可以使用root用户进行登录 数据信息进行加密<br>telnet：网络设备默认开启 23 默认只能使用普通用户进行登录 数据信息显示明文</p><p>SSH的作用</p><p>1）对用户身份信息进行认证</p><p>2）利用公钥和私钥对数据信息进行加密处理</p><h2 id="第2章-ssh服务登录验证"><a href="#第2章-ssh服务登录验证" class="headerlink" title="第2章 ssh服务登录验证"></a>第2章 ssh服务登录验证</h2><h3 id="2-1-ssh服务登录验证方式："><a href="#2-1-ssh服务登录验证方式：" class="headerlink" title="2.1. ssh服务登录验证方式："></a>2.1. ssh服务登录验证方式：</h3><ul><li>用户/口令</li><li>基于密钥对</li></ul><h3 id="2-2-基于用户和口令登录验证"><a href="#2-2-基于用户和口令登录验证" class="headerlink" title="2.2 基于用户和口令登录验证"></a>2.2 基于用户和口令登录验证</h3><ul><li>1、客户端发起ssh请求，服务器会把自己的公钥发送给用户</li><li>2、用户会根据服务器发来的公钥对密码进行加密</li><li>3、加密后的信息回传给服务器，服务器用自己的私钥解密，如果密码正确，则用户登录成功</li></ul><h3 id="2-3-基于密钥的登录方式"><a href="#2-3-基于密钥的登录方式" class="headerlink" title="2.3 基于密钥的登录方式"></a>2.3 基于密钥的登录方式</h3><p>基于密钥的登录方式</p><ul><li>1、首先在客户端生成一对密钥（ssh-keygen）</li><li>2、并将客户端的公钥ssh-copy-id 拷贝到服务端</li><li>3、当客户端再次发送一个连接请求，包括ip、用户名</li><li>4、服务端得到客户端的请求后，会到authorized_keys中查找，如果有响应的IP和用户，就会随机生成一个字符串，例如：acdf</li><li>5、服务端将使用客户端拷贝过来的公钥进行加密，然后发送给客户端</li><li>6、得到服务端发来的消息后，客户端会使用私钥进行解密，然后将解密后的字符串发送给服务端</li><li>7、服务端接收到客户端发来的字符串后，跟之前的字符串进行对比，如果一致，就允许免密码登录</li></ul><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/14248468-af025c4191bb5a68.webp.jpg"  alt=""></p><p>原理总结：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">01. 客户端 - 服务端   请求建立ssh远程连接 </span><br><span class="line">02. 服务端 - 客户端   请求确认公钥信息</span><br><span class="line">03. 客户端 - 服务端   确认接收公钥信息，保存~/.ssh/authorized_keys     文件中  </span><br><span class="line">04. 服务端 - 客户端   询问用户密码信息</span><br><span class="line">05. 客户端 - 服务端   用户密码信息</span><br><span class="line">06. 服务端 - 客户端   确认密码信息正确 远程连接建立</span><br><span class="line">01 之后：不用反复确认公钥信息</span><br><span class="line">06 之后：所有传输的数据信息会进行加密处理</span><br></pre></td></tr></table></figure><h2 id="第3章-基于密钥方式实现远程连接步骤"><a href="#第3章-基于密钥方式实现远程连接步骤" class="headerlink" title="第3章 基于密钥方式实现远程连接步骤"></a>第3章 基于密钥方式实现远程连接步骤</h2><h3 id="3-1-管理端服务器"><a href="#3-1-管理端服务器" class="headerlink" title="3.1 管理端服务器"></a>3.1 管理端服务器</h3><h4 id="3-1-1创建密钥对信息"><a href="#3-1-1创建密钥对信息" class="headerlink" title="3.1.1创建密钥对信息"></a>3.1.1创建密钥对信息</h4><p>第一种方式：默认参数，一路回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~/.ssh]<span class="comment"># ssh-keygen</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:x+Xoxb/z59g68vS2DwPieixVCC01yXc83aJ6p/pYR+Y root@ssh-61</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|         +o. . ..|</span></span><br><span class="line"><span class="string">|        o +.. = o|</span></span><br><span class="line"><span class="string">|         o o.o o |</span></span><br><span class="line"><span class="string">|         ..=o    |</span></span><br><span class="line"><span class="string">|        S =o= o  |</span></span><br><span class="line"><span class="string">|         +oo.*.  |</span></span><br><span class="line"><span class="string">|         oo..oE  |</span></span><br><span class="line"><span class="string">|        ..oooooBo|</span></span><br><span class="line"><span class="string">|        .ooo.o=OX|</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>第二种方式：指定加密算法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ssh-keygen -t dsa</span></span><br><span class="line">Generating public/private dsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_dsa): </span><br><span class="line">Created directory <span class="string">'/root/.ssh'</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_dsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_dsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:fW5GHPjirQZoiZhX1tXwnvwWxdjRWgFnsAiLTsyo1Is root@ssh-61</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[DSA 1024]----+</span></span><br><span class="line"><span class="string">|         ..o oo=o|</span></span><br><span class="line"><span class="string">|    . + . +oo +++|</span></span><br><span class="line"><span class="string">|   . o * o..o..o+|</span></span><br><span class="line"><span class="string">|  . o * .. = o.. |</span></span><br><span class="line"><span class="string">|   E = +S o O .  |</span></span><br><span class="line"><span class="string">|  o o + .. * . . |</span></span><br><span class="line"><span class="string">|   . .   .. = o  |</span></span><br><span class="line"><span class="string">|          .+ .   |</span></span><br><span class="line"><span class="string">|         ..      |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><h4 id="3-1-2-分发公钥"><a href="#3-1-2-分发公钥" class="headerlink" title="3.1.2 分发公钥"></a>3.1.2 分发公钥</h4><p>第一种方式：默认参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ssh-copy-id 172.16.1.41</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class="string">"/root/.ssh/id_rsa.pub"</span></span><br><span class="line">The authenticity of host <span class="string">'172.16.1.41 (172.16.1.41)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:wpba7z96j3rm+efG7Ior294sbdQ/qlFFdt+/WNuH3N0.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:66:39:31:20:fc:85:40:2d:d2:83:9c:eb:0b:ca:d2:5b.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span></span><br><span class="line"><span class="string">root@172.16.1.41'</span>s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   <span class="string">"ssh '172.16.1.41'"</span></span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><p>第二种方式：指定传输的公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ssh-copy-id -i /root/.ssh/id_dsa.pub 172.16.1.41</span></span><br></pre></td></tr></table></figure><h4 id="3-1-3-测试远程连接"><a href="#3-1-3-测试远程连接" class="headerlink" title="3.1.3 测试远程连接"></a>3.1.3 测试远程连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ssh 172.16.1.41</span></span><br><span class="line">Last login: Mon Jul 22 23:35:45 2019 from 10.0.1.1</span><br><span class="line">[root@backup ~]<span class="comment"># logout</span></span><br><span class="line">Connection to 172.16.1.41 closed.</span><br><span class="line">[root@ssh-61 ~]<span class="comment"># ssh 172.16.1.41 hostname</span></span><br><span class="line">backup</span><br></pre></td></tr></table></figure><h3 id="3-2-被管理服务器"><a href="#3-2-被管理服务器" class="headerlink" title="3.2 被管理服务器"></a>3.2 被管理服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@backup ~/.ssh]<span class="comment"># ll</span></span><br><span class="line">total 4</span><br><span class="line">-rw------- 1 root root 601 Jul 22 23:33 authorized_keys</span><br></pre></td></tr></table></figure><h2 id="第4章-免交互分发密钥"><a href="#第4章-免交互分发密钥" class="headerlink" title="第4章 免交互分发密钥"></a>第4章 免交互分发密钥</h2><p>当被管理服务器有多台时，如何批量进行分发密钥</p><p>如何解决面交互问题：</p><h4 id="1）首次连接提示yes-no"><a href="#1）首次连接提示yes-no" class="headerlink" title="1）首次连接提示yes/no"></a>1）首次连接提示yes/no</h4><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ssh-copy-id 10.0.1.31 -o StrictHostKeyChecking=no</span></span><br></pre></td></tr></table></figure><h4 id="2）首次连接需要输入密码确认"><a href="#2）首次连接需要输入密码确认" class="headerlink" title="2）首次连接需要输入密码确认"></a>2）首次连接需要输入密码确认</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># yum -y install sshpass  #安装sshpass服务</span></span><br><span class="line">[root@ssh-61 ~]<span class="comment"># sshpass -p123456 ssh-copy-id -i .ssh/id_dsa.pub 172.16.1.31 -o StrictHostKeyChecking=no</span></span><br></pre></td></tr></table></figure><h4 id="3）写成脚本"><a href="#3）写成脚本" class="headerlink" title="3）写成脚本"></a>3）写成脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> &#123;31,41&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  sshpass -p123456 ssh-copy-id -i /root/.ssh/id_dsa.pub 172.16.1.<span class="variable">$ip</span> -o StrictHostKeyChecking=no &amp;&gt;/dev/null</span><br><span class="line">  <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"===============pub_key fenfa ok with 172.16.1.<span class="variable">$ip</span>========================="</span></span><br><span class="line">     ssh 172.16.1.<span class="variable">$&#123;ip&#125;</span> hostname</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"===============pub_key fenfa failed with 172.16.1.<span class="variable">$ip</span>========================="</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">  <span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="第5章-ssh安全优化"><a href="#第5章-ssh安全优化" class="headerlink" title="第5章 ssh安全优化"></a>第5章 ssh安全优化</h2><h3 id="5-1-windows："><a href="#5-1-windows：" class="headerlink" title="5.1 windows："></a>5.1 windows：</h3><p>1）xshell生成密钥对</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/2019-07-30_201033.png"  alt=""></p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/2019-07-30_201119.png"  alt=""></p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/2019-07-30_201149.png"  alt=""></p><p>2）将xshell公钥上传到管理机ssh-61</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.使用rz命令上传公钥文件到管理机ssh-61</span><br><span class="line">2.[root@ssh-61 ~/.ssh]<span class="comment"># mv id_dsa_1024.pub authorized_keys</span></span><br><span class="line">3.[root@ssh-61 ~/.ssh]<span class="comment"># chmod 600 authorized_keys #更改公钥权限</span></span><br><span class="line">4.[root@ssh-61 ~/.ssh]<span class="comment"># ll</span></span><br><span class="line">-rw------- 1 root root  588 Jul 22 16:14 authorized_keys</span><br></pre></td></tr></table></figure><p>xshell测试</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/2019-07-30_201342.png"  alt=""></p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/2019-07-30_201408.png"  alt=""></p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/2019-07-30_201432.png"  alt=""></p><h3 id="5-2-管理机"><a href="#5-2-管理机" class="headerlink" title="5.2 管理机"></a>5.2 管理机</h3><p>1）更改ssh默认端口号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/ssh/sshd_config </span></span><br><span class="line">Port 9999</span><br></pre></td></tr></table></figure><p>2）关闭用户名密码登陆方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/ssh/sshd_config </span></span><br><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure><p>3）开启通过密钥对方式连接</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/2019-07-30_210756.png"  alt=""></p><h3 id="5-3-被管理机"><a href="#5-3-被管理机" class="headerlink" title="5.3 被管理机"></a>5.3 被管理机</h3><p>1）更改ssh默认端口号</p><p>2）关闭用户名密码登录方式</p><p>3）开启通过密钥对方式连接</p><p>4）指定监听内网地址</p><p>更改ssh相关配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/ssh/sshd_config </span></span><br><span class="line">17 Port 9999</span><br><span class="line">19 ListenAddress 172.16.1.41</span><br><span class="line">65 PasswordAuthentication no</span><br><span class="line">[root@ssh-61 ~]<span class="comment"># systemctl restart sshd</span></span><br></pre></td></tr></table></figure><p>管理机ssh登录被管理机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ssh-61 ~]<span class="comment"># ssh 172.16.1.41 -p9999</span></span><br></pre></td></tr></table></figure><h2 id="第6章-作业"><a href="#第6章-作业" class="headerlink" title="第6章 作业"></a>第6章 作业</h2><p>一个脚本完成以下所有任务：</p><ul><li>1.管理机自动创建密钥对</li><li>2.管理机自动将公钥发送到被管理机</li><li>3.修改被管理机的SSH连接端口为9999</li><li>4.修改被管理机的SSH监听地址为172.16.1.X</li><li>5.修改被管理机不允许使用账号密码方式登陆，只允许使用密钥方式连接</li><li>6.修改完之后验证是否生效，验证方法为使用9999端口连接被管理机并打印出主机  信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ -f /root/.ssh/id_dsa ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"密钥已存在,将发送现有文件"</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">    ssh-keygen -t dsa -P <span class="string">""</span> -f /root/.ssh/id_dsa &amp;&amp; <span class="built_in">echo</span> <span class="string">"密钥生成成功"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> &#123;31,41&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    sshpass -p123456 ssh-copy-id -i /root/.ssh/id_dsa.pub 172.16.1.<span class="variable">$&#123;ip&#125;</span> -o StrictHostKeyChecking=no &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="keyword">if</span> [ $?==0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"172.16.1.<span class="variable">$&#123;ip&#125;</span> key sent successful"</span></span><br><span class="line">        ssh 172.16.1.<span class="variable">$&#123;ip&#125;</span> <span class="string">"cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak"</span></span><br><span class="line">        ssh 172.16.1.<span class="variable">$&#123;ip&#125;</span> <span class="string">"sed -i 's/#Port 22/Port 9999/g' /etc/ssh/sshd_config &amp;&amp; echo 'port ok'"</span></span><br><span class="line">        ssh 172.16.1.<span class="variable">$&#123;ip&#125;</span> <span class="string">"sed -i 's/#ListenAddress 0.0.0.0/ListenAddress 172.16.1.<span class="variable">$&#123;ip&#125;</span>/g' /etc/ssh/sshd_config &amp;&amp; echo 'ListenAddress ok'"</span></span><br><span class="line">ssh 172.16.1.<span class="variable">$&#123;ip&#125;</span> <span class="string">"sed -i 's#^PasswordAuthentication yes#PasswordAuthentication no#g' /etc/ssh/sshd_config &amp;&amp; echo 'Password ok'"</span></span><br><span class="line">ssh 172.16.1.<span class="variable">$&#123;ip&#125;</span> <span class="string">"systemctl restart sshd"</span></span><br><span class="line">sleep 3</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------------------"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"172.16.1.<span class="variable">$&#123;ip&#125;</span> hostname is :<span class="variable">$(ssh -p 9999 172.16.1.$&#123;ip&#125; hostname)</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------------------"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"172.16.1.<span class="variable">$&#123;ip&#125;</span> key sent faild"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="LNMP" scheme="http://linuxwf.com/categories/LNMP/"/>
    
    
      <category term="ssh" scheme="http://linuxwf.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>4.NFS服务实时备份</title>
    <link href="http://linuxwf.com/2020/04/13/4-NFS%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%97%B6%E5%A4%87%E4%BB%BD/"/>
    <id>http://linuxwf.com/2020/04/13/4-NFS%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%97%B6%E5%A4%87%E4%BB%BD/</id>
    <published>2020-04-13T04:14:00.000Z</published>
    <updated>2020-04-13T04:23:03.328Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="NFS服务实时备份"><a href="#NFS服务实时备份" class="headerlink" title="NFS服务实时备份"></a>NFS服务实时备份</h1><h2 id="第一章-NFS单点问题"><a href="#第一章-NFS单点问题" class="headerlink" title="第一章 NFS单点问题"></a>第一章 NFS单点问题</h2><h3 id="1-为什么需要解决NFS单点问题"><a href="#1-为什么需要解决NFS单点问题" class="headerlink" title="1.为什么需要解决NFS单点问题"></a>1.为什么需要解决NFS单点问题</h3><p>只有一个NFS服务器时，当出现故障时，数据没办法再实现共享，既不安全也不稳定</p><h3 id="2-解决思路"><a href="#2-解决思路" class="headerlink" title="2. 解决思路"></a>2. 解决思路</h3><p>1).监控文件是否发生变化</p><p>2)如果发生变化,就通过rsync传输到备份服务器,并且数据保持完全一致</p><p>3)备份服务器也需要提供NFS服务,以便NFS服务器故障的时候可以顶替,继续提供NFS服务</p><p>4)假如发生了故障,客户端需要先卸载原有已经挂载的目录,然后重新挂载到备份服务器的NFS共享目录</p><h3 id="3-需要用到的软件"><a href="#3-需要用到的软件" class="headerlink" title="3. 需要用到的软件"></a>3. 需要用到的软件</h3><p>1).监控文件是否发生变化    inotify-tools</p><p>2).实时备份  rsync+inotify-tools / sersync / lsyncd</p><p>3).提供NFS服务  NFS+RPC</p><h3 id="4-环境准备"><a href="#4-环境准备" class="headerlink" title="4. 环境准备"></a>4. 环境准备</h3><table><thead><tr><th>操作系统</th><th>服务器角色</th><th>IP地址</th></tr></thead><tbody><tr><td>CentOS  7.4 x86_64</td><td>NFS服务端（nfs-server）</td><td>172.16.1.31</td></tr><tr><td>CentOS  7.4 x86_64</td><td>NFS备份服务器（backup-server）</td><td>172.16.1.41</td></tr></tbody></table><h2 id="第二章-Inotify简介"><a href="#第二章-Inotify简介" class="headerlink" title="第二章 Inotify简介"></a>第二章 Inotify简介</h2><p>Inotify是一种强大的,细粒度的,异步的文件系统事件监视机制,Linux2.6.13起加入了inotify支持,通过inotify可以监控文件系统中添加,删除,修改,移动等各种事件,利用这个内核接口,第三方软件就可以监控文件系统下文件的各种变化情况,而inotify-tools正是实施这样监控的软件,另外一个这样效果的软件是中国人周洋在金山公司开发的sersync,还有一个配置更简单的软件叫lsyncd</p><h3 id="2-1-查看系统内核"><a href="#2-1-查看系统内核" class="headerlink" title="2.1 查看系统内核"></a>2.1 查看系统内核</h3><p>查看当前系统内核是否支持inotify</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-693.el7.x86_64</span><br></pre></td></tr></table></figure><h3 id="2-2-安装Inotify"><a href="#2-2-安装Inotify" class="headerlink" title="2.2 安装Inotify"></a>2.2 安装Inotify</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># yum search inotify  #查找inotify包名</span></span><br><span class="line">[root@nfs ~]<span class="comment"># yum -y install inotify-tools</span></span><br></pre></td></tr></table></figure><h3 id="2-3-关键参数说明"><a href="#2-3-关键参数说明" class="headerlink" title="2.3 关键参数说明:"></a>2.3 关键参数说明:</h3><p>1)在/proc/sys/fs/inotify目录下有三个文件,对inotify机制有一定限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># ls -l /proc/sys/fs/inotify/</span></span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root root 0 Jul 19 11:37 max_queued_events</span><br><span class="line">-rw-r--r-- 1 root root 0 Jul 19 09:52 max_user_instances</span><br><span class="line">-rw-r--r-- 1 root root 0 Jul 19 11:37 max_user_watches</span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line">max_queued_events   =====&gt;设置inotify设置inotify实例事件(event)队列可容纳的事件数量</span><br><span class="line">max_user_instances  =====&gt;设置每个用户可以运行的inotify或者inotifywatch命令的进程数</span><br><span class="line">max_user_watches    =====&gt;设置inotifywait或者inotifywatch命令可以监视的文件数量(单进程)</span><br></pre></td></tr></table></figure><h3 id="2-4-inotifywait详细参数"><a href="#2-4-inotifywait详细参数" class="headerlink" title="2.4 inotifywait详细参数"></a>2.4 inotifywait详细参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># inotifywait --help</span></span><br><span class="line">inotifywait 3.14</span><br><span class="line">Wait <span class="keyword">for</span> a particular event on a file or <span class="built_in">set</span> of files.</span><br><span class="line">Usage: inotifywait [ options ] file1 [ file2 ] [ file3 ] [ ... ]</span><br><span class="line">Options:</span><br><span class="line">    -h|--<span class="built_in">help</span>       Show this <span class="built_in">help</span> text.</span><br><span class="line">    @&lt;file&gt;         Exclude the specified file from being watched.</span><br><span class="line">    --exclude &lt;pattern&gt;</span><br><span class="line">                    Exclude all events on files matching the</span><br><span class="line">                    extended regular expression &lt;pattern&gt;.</span><br><span class="line">    --excludei &lt;pattern&gt;</span><br><span class="line">                    Like --exclude but <span class="keyword">case</span> insensitive.</span><br><span class="line">                    <span class="comment">###排除文件或目录,不区分大小写</span></span><br><span class="line">    -m|--monitor    Keep listening <span class="keyword">for</span> events forever.  Without</span><br><span class="line">                    this option, inotifywait will <span class="built_in">exit</span> after one</span><br><span class="line">                    event is received.</span><br><span class="line">    -d|--daemon     Same as --monitor, except run <span class="keyword">in</span> the background</span><br><span class="line">                    logging events to a file specified by --outfile.</span><br><span class="line">                    Implies --syslog.</span><br><span class="line">    -r|--recursive  Watch directories recursively. </span><br><span class="line">    <span class="comment">###递归查询目录</span></span><br><span class="line">    --fromfile &lt;file&gt;</span><br><span class="line">                    Read files to watch from &lt;file&gt; or `-<span class="string">' for stdin.</span></span><br><span class="line"><span class="string">    -o|--outfile &lt;file&gt;</span></span><br><span class="line"><span class="string">                    Print events to &lt;file&gt; rather than stdout.</span></span><br><span class="line"><span class="string">    -s|--syslog     Send errors to syslog rather than stderr.</span></span><br><span class="line"><span class="string">    -q|--quiet      Print less (only print events). </span></span><br><span class="line"><span class="string">    ###打印很少的信息,仅仅打印监控事件的信息,安静的</span></span><br><span class="line"><span class="string">    -qq             Print nothing (not even events).</span></span><br><span class="line"><span class="string">    --format &lt;fmt&gt;  Print using a specified printf-like format ###打印指定输出类似格式字符串</span></span><br><span class="line"><span class="string">                    string; read the man page for more details.</span></span><br><span class="line"><span class="string">    --timefmt &lt;fmt&gt; strftime-compatible format string for use with</span></span><br><span class="line"><span class="string">                    %T in --format string.  ###指定时间输出的格式</span></span><br><span class="line"><span class="string">    -c|--csv        Print events in CSV format.</span></span><br><span class="line"><span class="string">    -t|--timeout &lt;seconds&gt;</span></span><br><span class="line"><span class="string">                    When listening for a single event, time out after</span></span><br><span class="line"><span class="string">                    waiting for an event for &lt;seconds&gt; seconds.</span></span><br><span class="line"><span class="string">                    If &lt;seconds&gt; is 0, inotifywait will never time out.</span></span><br><span class="line"><span class="string">    -e|--event &lt;event1&gt; [ -e|--event &lt;event2&gt; ... ]</span></span><br><span class="line"><span class="string">        Listen for specific event(s).  If omitted, all events are </span></span><br><span class="line"><span class="string">        listened for. ###通过次参数可以指定需要监控的事件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Exit status:</span></span><br><span class="line"><span class="string">    0  -  An event you asked to watch for was received.</span></span><br><span class="line"><span class="string">    1  -  An event you did not ask to watch for was received</span></span><br><span class="line"><span class="string">          (usually delete_self or unmount), or some error occurred.</span></span><br><span class="line"><span class="string">    2  -  The --timeout option was given and no events occurred</span></span><br><span class="line"><span class="string">          in the specified interval of time.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Events:</span></span><br><span class="line"><span class="string">    access      file or directory contents were read </span></span><br><span class="line"><span class="string">    ###文件或目录被读取</span></span><br><span class="line"><span class="string">    modify      file or directory contents were written </span></span><br><span class="line"><span class="string">    ###文件或目录被修改</span></span><br><span class="line"><span class="string">    attrib      file or directory attributes changed </span></span><br><span class="line"><span class="string">    ###文件或目录属性被改变</span></span><br><span class="line"><span class="string">    close_write file or directory closed, after being opened in </span></span><br><span class="line"><span class="string">                writeable mode ###文件或目录封闭,无论读/写模式</span></span><br><span class="line"><span class="string">    close_nowrite   file or directory closed, after being opened in</span></span><br><span class="line"><span class="string">                read-only mode</span></span><br><span class="line"><span class="string">    close       file or directory closed, regardless of read/write mode</span></span><br><span class="line"><span class="string">    open        file or directory opened ###文件目录被打开</span></span><br><span class="line"><span class="string">    moved_to    file or directory moved to watched directory ###文件或目录被移动到另一个目录</span></span><br><span class="line"><span class="string">    moved_from  file or directory moved from watched directory</span></span><br><span class="line"><span class="string">    move        file or directory moved to or from watched directory</span></span><br><span class="line"><span class="string">    create      file or directory created within watched directory ###文件或目录被创建在当前目录</span></span><br><span class="line"><span class="string">    delete      file or directory deleted within watched directory ###文件或目录被删除</span></span><br><span class="line"><span class="string">    delete_self file or directory was deleted</span></span><br><span class="line"><span class="string">    unmount     file system containing file or directory unmounted ###文件系统被卸载</span></span><br></pre></td></tr></table></figure><h3 id="2-5-参数说明"><a href="#2-5-参数说明" class="headerlink" title="2.5 参数说明"></a>2.5 参数说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">inotifywait参数说明</span><br><span class="line">参数名称            参数说明</span><br><span class="line">-m ,-monitor       始终保持事件监听状态</span><br><span class="line">-r,-recursive      递归查询目录</span><br><span class="line">-q,-quiet          只打印监控事件的信息</span><br><span class="line">-exclude           排除文件或目录时,不区分大小写</span><br><span class="line">-t,-timeout        超时时间</span><br><span class="line">-timefmt           指定时间输出格式</span><br><span class="line">-format            指定时间输出格式</span><br><span class="line">-e,event           后面指定增,删,改等事件</span><br><span class="line">inotifywait events 事件说明</span><br><span class="line">access             读取文件或目录内容</span><br><span class="line">modify             修改文件或目录内容</span><br><span class="line">attrib             文件或目录的属性改变</span><br><span class="line">close_write        修改真实文件内容</span><br><span class="line">close_nowrite   </span><br><span class="line">close   </span><br><span class="line">open               文件或目录被打开</span><br><span class="line">moved_to           文件或目录移动到</span><br><span class="line">moved_from         文件或目录从...移动到</span><br><span class="line">move               移动文件或目录移动到监视目录</span><br><span class="line">create             在监视目录下创建文件或目录</span><br><span class="line">delete             删除监视目录下的文件或目录</span><br><span class="line">delete_self </span><br><span class="line">umount             卸载文件系统</span><br></pre></td></tr></table></figure><h3 id="2-6-查看inotify默认参数"><a href="#2-6-查看inotify默认参数" class="headerlink" title="2.6 查看inotify默认参数"></a>2.6 查看inotify默认参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># sysctl -a|grep max_queued_events</span></span><br><span class="line">fs.inotify.max_queued_events = 327679</span><br><span class="line">[root@nfs ~]<span class="comment"># sysctl -a |egrep max_user_watches</span></span><br><span class="line">fs.epoll.max_user_watches = 412098</span><br><span class="line">fs.inotify.max_user_watches = 50000000</span><br><span class="line">[root@nfs ~]<span class="comment"># sysctl -a |egrep max_user_instances</span></span><br><span class="line">fs.inotify.max_user_instances = 128</span><br></pre></td></tr></table></figure><h3 id="2-7-测试"><a href="#2-7-测试" class="headerlink" title="2.7 测试"></a>2.7 测试</h3><p>测试inotify-tools监控文件发生变化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inotifywait -mrq --timefmt <span class="string">'%d/%m/%y %H:%M'</span> --format <span class="string">'%T %w%f'</span> -e delete,create /backup</span><br><span class="line">inotifywait -mrq --timefmt <span class="string">'%d/%m/%y %H:%M'</span> --format <span class="string">'%T %w%f'</span> -e close_write /backup</span><br></pre></td></tr></table></figure><p>监控脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cat inotify_push.sh </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">Path=/data</span><br><span class="line">backup_Server=172.16.1.41</span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=oldboy</span><br><span class="line"></span><br><span class="line">/usr/bin/inotifywait -mrq --format <span class="string">'%w%f'</span> -e create,close_write,delete /data | <span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;line&#125;</span>"</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$line</span> ];<span class="keyword">then</span></span><br><span class="line">    rsync -azvP <span class="variable">$line</span> --delete rsync_backup@<span class="variable">$backup_Server</span>::data</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$Path</span> &amp;&amp;\</span><br><span class="line">    rsync -azvP ./ --delete rsync_backup@<span class="variable">$backup_Server</span>::data</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="2-8-inotify优缺点"><a href="#2-8-inotify优缺点" class="headerlink" title="2.8 inotify优缺点"></a>2.8 inotify优缺点</h3><p>inotify优点<br>1)监控文件系统事件变化,通过同步工具实现实时数据同步<br>inotify缺点<br>1)并发如果大于200个文(10-100k),同步就会由延迟<br>2)我们前面的脚本,每次都是全部推送一次,但是确实是增量的,也可以只同步变化的文件<br>3)监控到事件后,调用rsync同步是单进程(加&amp;并发)sersync多进程同步<br>既然有了inotify-tools,为什么还需要sersync呢?</p><p>sersync功能多:(inotify+rsync命令)</p><p>1)支持通过配置文件管理<br>2)真正的守护进程socket<br>3)可以对失败文件定时重传(定时任务功能)<br>4)第三方的HTTP接口(例如:更新cdn缓存)<br>5)默认多线程rsync同步</p><h2 id="第三章sersync安装部署"><a href="#第三章sersync安装部署" class="headerlink" title="第三章sersync安装部署"></a>第三章sersync安装部署</h2><table><thead><tr><th>操作系统</th><th>服务器角色</th><th>IP地址</th></tr></thead><tbody><tr><td>CentOS  7.4 x86_64</td><td>NFS服务端（nfs-server）</td><td>172.16.1.31</td></tr><tr><td>CentOS  7.4 x86_64</td><td>NFS备份服务器（backup-server）</td><td>172.16.1.41</td></tr></tbody></table><h3 id="3-1-下载sersync"><a href="#3-1-下载sersync" class="headerlink" title="3.1 下载sersync"></a>3.1 下载sersync</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># wget https://github.com/wsgzao/sersync/blob/master/sersync2.5.4_64bit_binary_stable_final.tar.gz</span></span><br></pre></td></tr></table></figure><h3 id="3-2-解压"><a href="#3-2-解压" class="headerlink" title="3.2 解压"></a>3.2 解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs /opt]<span class="comment"># tree server/</span></span><br><span class="line">server/</span><br><span class="line">├── confxml.xml</span><br><span class="line">├── confxml.xml.bak</span><br><span class="line">└── sersync2</span><br></pre></td></tr></table></figure><h3 id="3-3修改配置文件"><a href="#3-3修改配置文件" class="headerlink" title="3.3修改配置文件"></a>3.3修改配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;sersync&gt;</span><br><span class="line">   24&lt;localpath watch=<span class="string">"/data"</span>&gt;</span><br><span class="line">   25    &lt;remote ip=<span class="string">"172.16.1.42"</span> name=<span class="string">"/data"</span>/&gt;</span><br><span class="line">   26    &lt;!--&lt;remote ip=<span class="string">"192.168.8.39"</span> name=<span class="string">"tongbu"</span>/&gt;--&gt;</span><br><span class="line">   27    &lt;!--&lt;remote ip=<span class="string">"192.168.8.40"</span> name=<span class="string">"tongbu"</span>/&gt;--&gt;</span><br><span class="line">   28&lt;/localpath&gt;</span><br><span class="line">   29&lt;rsync&gt;</span><br><span class="line">   30    &lt;commonParams params=<span class="string">"-az"</span>/&gt;</span><br><span class="line">   31    &lt;auth start=<span class="string">"true"</span> users=<span class="string">"rsynd_backup"</span> passwordfile=<span class="string">"/etc/rsyncd.conf"</span>/&gt;</span><br><span class="line">   32    &lt;userDefinedPort start=<span class="string">"false"</span> port=<span class="string">"874"</span>/&gt;&lt;!-- port=874 --&gt;</span><br><span class="line">   33    &lt;timeout start=<span class="string">"true"</span> time=<span class="string">"100"</span>/&gt;&lt;!-- timeout=100 --&gt;</span><br><span class="line">   34    &lt;ssh start=<span class="string">"false"</span>/&gt;</span><br><span class="line">   35&lt;/rsync&gt;</span><br><span class="line">   36&lt;failLog path=<span class="string">"/tmp/rsync_fail_log.sh"</span> timeToExecute=<span class="string">"60"</span>/&gt;&lt;!--default every 60mins execute once--&gt;</span><br><span class="line">   37&lt;crontab start=<span class="string">"false"</span> schedule=<span class="string">"600"</span>&gt;&lt;!--600mins--&gt;</span><br><span class="line">   38    &lt;crontabfilter start=<span class="string">"false"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-查看帮助说明"><a href="#3-4-查看帮助说明" class="headerlink" title="3.4 查看帮助说明"></a>3.4 查看帮助说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs /opt/server]<span class="comment">#  ./sersync2 -h</span></span><br><span class="line"><span class="built_in">set</span> the system param</span><br><span class="line">execute：<span class="built_in">echo</span> 50000000 &gt; /proc/sys/fs/inotify/max_user_watches</span><br><span class="line">execute：<span class="built_in">echo</span> 327679 &gt; /proc/sys/fs/inotify/max_queued_events</span><br><span class="line">parse the <span class="built_in">command</span> param</span><br><span class="line">_______________________________________________________</span><br><span class="line">参数-d:启用守护进程模式</span><br><span class="line">参数-r:在监控前，将监控目录与远程主机用rsync命令推送一遍</span><br><span class="line">c参数-n: 指定开启守护线程的数量，默认为10个</span><br><span class="line">参数-o:指定配置文件，默认使用confxml.xml文件</span><br><span class="line">参数-m:单独启用其他模块，使用 -m refreshCDN 开启刷新CDN模块</span><br><span class="line">参数-m:单独启用其他模块，使用 -m socket 开启socket模块</span><br><span class="line">参数-m:单独启用其他模块，使用 -m http 开启http模块</span><br><span class="line">不加-m参数，则默认执行同步程序</span><br></pre></td></tr></table></figure><h3 id="3-5-启动服务"><a href="#3-5-启动服务" class="headerlink" title="3.5 启动服务"></a>3.5 启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs /opt/server]<span class="comment"># ./sersync2 -n 20 -dro confxml.xml</span></span><br><span class="line"><span class="built_in">set</span> the system param</span><br><span class="line">execute：<span class="built_in">echo</span> 50000000 &gt; /proc/sys/fs/inotify/max_user_watches</span><br><span class="line">execute：<span class="built_in">echo</span> 327679 &gt; /proc/sys/fs/inotify/max_queued_events</span><br><span class="line">parse the <span class="built_in">command</span> param</span><br><span class="line">option: -n thread num is：  20</span><br><span class="line">option: -d run as a daemon</span><br><span class="line">option: -r rsync all the <span class="built_in">local</span> files to the remote servers before the sersync work</span><br><span class="line">option: -o config xml name：  confxml.xml</span><br><span class="line">parse xml config file</span><br><span class="line">host ip : localhosthost port: 8008</span><br><span class="line">daemon start，sersync run behind the console </span><br><span class="line">use rsync password-file :</span><br><span class="line">user isrsynd_backup</span><br><span class="line">passwordfile is /etc/rsyncd.conf</span><br><span class="line">config xml parse success</span><br><span class="line">please <span class="built_in">set</span> /etc/rsyncd.conf max connections=0 Manually</span><br><span class="line">sersync working thread 22  = 1(primary thread) + 1(fail retry thread) + 20(daemon sub threads) </span><br><span class="line">Max threads numbers is: 42 = 22(Thread pool nums) + 20(Sub threads)</span><br><span class="line">please according your cpu ，use -n param to adjust the cpu rate</span><br><span class="line">------------------------------------------</span><br><span class="line">rsync the directory recursivly to the remote servers once</span><br><span class="line">working please <span class="built_in">wait</span>...</span><br><span class="line">execute <span class="built_in">command</span>: <span class="built_in">cd</span> /data &amp;&amp; rsync -az -R --delete ./  --timeout=100 rsynd_backup@172.16.1.42::/data --password-file=/etc/rsyncd.conf &gt;/dev/null 2&gt;&amp;1 </span><br><span class="line">run the sersync: </span><br><span class="line">watch path is: /data</span><br></pre></td></tr></table></figure><h3 id="3-6-测试数据同步传输"><a href="#3-6-测试数据同步传输" class="headerlink" title="3.6 测试数据同步传输"></a>3.6 测试数据同步传输</h3><p>nfs服务器生成数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># cd /data</span></span><br><span class="line">[root@nfs /data]<span class="comment"># for i in &#123;1..1000&#125;;do echo "$&#123;i&#125;"; echo "$&#123;i&#125;" &gt; $&#123;i&#125;.txt;sleep 0.1;done</span></span><br></pre></td></tr></table></figure><p>backup备份服务器查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@backup ~]<span class="comment"># cd /data</span></span><br><span class="line">[root@backup /data]<span class="comment"># while true ;do ls |wc -l;sleep 0.1;done</span></span><br></pre></td></tr></table></figure><h2 id="第四章-lsyncd-服务"><a href="#第四章-lsyncd-服务" class="headerlink" title="第四章 lsyncd 服务"></a>第四章 lsyncd 服务</h2><p>官网地址：<a href="https://github.com/axkibe/lsyncd" target="_blank" rel="noopener">https://github.com/axkibe/lsyncd</a></p><p>Lysncd 实际上是lua语言封装了 inotify 和 rsync 工具，采用了 Linux 内核（2.6.13 及以后）里的 inotify 触发机制，然后通过rsync去差异同步，达到实时的效果。我认为它最令人称道的特性是，完美解决了 <code>inotify + rsync</code>海量文件同步带来的文件频繁发送文件列表的问题 —— 通过时间延迟或累计触发事件次数实现。另外，它的配置方式很简单，lua本身就是一种配置语言，可读性非常强。lsyncd也有多种工作模式可以选择，本地目录cp，本地目录rsync，远程目录rsyncssh。实现简单高效的本地目录同步备份（网络存储挂载也当作本地目录），一个命令搞定。</p><h3 id="4-1-安装lsyncd"><a href="#4-1-安装lsyncd" class="headerlink" title="4.1 安装lsyncd"></a>4.1 安装lsyncd</h3><table><thead><tr><th>操作系统</th><th>服务器角色</th><th>IP地址</th></tr></thead><tbody><tr><td>CentOS  7.4 x86_64</td><td>NFS服务端（nfs-server）</td><td>172.16.1.31</td></tr><tr><td>CentOS  7.4 x86_64</td><td>NFS备份服务器（backup-server）</td><td>172.16.1.41</td></tr></tbody></table><p>查看包名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># yum provides lsyncd</span></span><br><span class="line">lsyncd-2.2.2-1.el7.x86_64 : File change monitoring and synchronization daemon</span><br><span class="line">Repo        : epel</span><br></pre></td></tr></table></figure><p>安装lsyncd服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># yum -y install lsyncd</span></span><br></pre></td></tr></table></figure><h3 id="4-2-创建配置文件"><a href="#4-2-创建配置文件" class="headerlink" title="4.2 创建配置文件"></a>4.2 创建配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># rpm -qc lsyncd</span></span><br><span class="line">/etc/lsyncd.conf</span><br><span class="line">[root@nfs /data]<span class="comment"># cat /etc/lsyncd.conf</span></span><br><span class="line">settings &#123;</span><br><span class="line">  logfile = <span class="string">"/var/log/lsyncd/lsyncd.log"</span>,</span><br><span class="line">  statusFile = <span class="string">"/var/log/lsyncd/lsyncd.status"</span>,</span><br><span class="line">  inotifyMode = <span class="string">"CloseWrite"</span>,</span><br><span class="line">  maxProcesses = 8,</span><br><span class="line">&#125;</span><br><span class="line">sync &#123;</span><br><span class="line">  default.rsync,</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">"/data"</span>,</span><br><span class="line">  target = <span class="string">"rsync_backup@172.16.1.41::data"</span>,</span><br><span class="line">  delete= <span class="literal">true</span>,</span><br><span class="line">  exclude = &#123; <span class="string">".*"</span> &#125;,</span><br><span class="line">  delay = 1,</span><br><span class="line">  rsync = &#123;</span><br><span class="line">    binary = <span class="string">"/usr/bin/rsync"</span>,</span><br><span class="line">    archive = <span class="literal">true</span>,</span><br><span class="line">    compress = <span class="literal">true</span>,</span><br><span class="line">    verbose = <span class="literal">true</span>,</span><br><span class="line">    password_file = <span class="string">"/etc/rsync.passwd"</span>,</span><br><span class="line">    _extra = &#123;<span class="string">"--bwlimit=200"</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">sync &#123;</span><br><span class="line">  default.rsync,</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">"/backup"</span>,</span><br><span class="line">  target = <span class="string">"rsync_backup@172.16.1.41::backup"</span>,</span><br><span class="line">  delete= <span class="literal">true</span>,</span><br><span class="line">  exclude = &#123; <span class="string">".*"</span> &#125;,</span><br><span class="line">  delay = 1,</span><br><span class="line">  rsync = &#123;</span><br><span class="line">    binary = <span class="string">"/usr/bin/rsync"</span>,</span><br><span class="line">    archive = <span class="literal">true</span>,</span><br><span class="line">    compress = <span class="literal">true</span>,</span><br><span class="line">    verbose = <span class="literal">true</span>,</span><br><span class="line">    password_file = <span class="string">"/etc/rsync.passwd"</span>,</span><br><span class="line">    _extra = &#123;<span class="string">"--bwlimit=200"</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-配置文件说明"><a href="#4-3-配置文件说明" class="headerlink" title="4.3 配置文件说明"></a>4.3 配置文件说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">settings</span><br><span class="line"></span><br><span class="line">里面是全局设置，--开头表示注释，下面是几个常用选项说明：</span><br><span class="line"></span><br><span class="line">logfile <span class="comment">#定义日志文件</span></span><br><span class="line">stausFile <span class="comment">#定义状态文件</span></span><br><span class="line">nodaemon=<span class="literal">true</span> <span class="comment">#表示不启用守护模式，默认</span></span><br><span class="line">statusInterval <span class="comment">#将lsyncd的状态写入上面的statusFile的间隔，默认10秒</span></span><br><span class="line">inotifyMode <span class="comment">#指定inotify监控的事件，默认是CloseWrite，还可以是Modify或CloseWrite or Modify</span></span><br><span class="line">maxProcesses <span class="comment">#同步进程的最大个数。假如同时有20个文件需要同步，而maxProcesses = 8，则最大能看到有8个rysnc进程</span></span><br><span class="line">maxDelays <span class="comment">#累计到多少所监控的事件激活一次同步，即使后面的delay延迟时间还未到</span></span><br><span class="line">sync</span><br><span class="line"></span><br><span class="line">里面是定义同步参数，可以继续使用maxDelays来重写settings的全局变量。一般第一个参数指定lsyncd以什么模式运行：rsync、rsyncssh、direct三种模式：</span><br><span class="line"></span><br><span class="line">default.rsync <span class="comment">#本地目录间同步，使用rsync，也可以达到使用ssh形式的远程rsync效果，或daemon方式连接远程rsyncd进程；</span></span><br><span class="line">default.direct <span class="comment">#本地目录间同步，使用cp、rm等命令完成差异文件备份；</span></span><br><span class="line">default.rsyncssh <span class="comment">#同步到远程主机目录，rsync的ssh模式，需要使用key来认证</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> 同步的源目录，使用绝对路径。</span><br><span class="line"></span><br><span class="line">target 定义目的地址.对应不同的模式有几种写法：</span><br><span class="line">/tmp/dest <span class="comment">#本地目录同步，可用于direct和rsync模式</span></span><br><span class="line">172.16.1.41:/data <span class="comment">#同步到远程服务器目录，可用于rsync和rsyncssh模式，拼接的命令类似于/usr/bin/rsync -ltsd --delete --include-from=- --exclude=* SOURCE TARGET，剩下的就是rsync的内容了，比如指定username，免密码同步</span></span><br><span class="line">172.16.1.41::data <span class="comment">#同步到远程服务器目录，用于rsync模式</span></span><br><span class="line">三种模式的示例会在后面给出。</span><br><span class="line"></span><br><span class="line">init 这是一个优化选项，当init = <span class="literal">false</span>，只同步进程启动以后发生改动事件的文件，原有的目录即使有差异也不会同步。默认是<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">delay 累计事件，等待rsync同步延时时间，默认15秒（最大累计到1000个不可合并的事件）。也就是15s内监控目录下发生的改动，会累积到一次rsync同步，避免过于频繁的同步。（可合并的意思是，15s内两次修改了同一文件，最后只同步最新的文件）</span><br><span class="line"></span><br><span class="line">excludeFrom 排除选项，后面指定排除的列表文件，如excludeFrom = <span class="string">"/etc/lsyncd.exclude"</span>，如果是简单的排除，可以使用exclude = LIST。</span><br><span class="line">这里的排除规则写法与原生rsync有点不同，更为简单：</span><br><span class="line">监控路径里的任何部分匹配到一个文本，都会被排除，例如/bin/foo/bar可以匹配规则foo</span><br><span class="line">如果规则以斜线/开头，则从头开始要匹配全部</span><br><span class="line">如果规则以/结尾，则要匹配监控路径的末尾</span><br><span class="line">?匹配任何字符，但不包括/</span><br><span class="line">*匹配0或多个字符，但不包括/</span><br><span class="line">**匹配0或多个字符，可以是/</span><br><span class="line">delete 为了保持target与souce完全同步，Lsyncd默认会delete = <span class="literal">true</span>来允许同步删除。它除了<span class="literal">false</span>，还有startup、running值，请参考 Lsyncd 2.1.x ‖ Layer 4 Config ‖ Default Behavior。</span><br></pre></td></tr></table></figure><h3 id="4-4-启动服务"><a href="#4-4-启动服务" class="headerlink" title="4.4 启动服务"></a>4.4 启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># systemctl start lsyncd.service</span></span><br><span class="line">[root@nfs ~]<span class="comment"># systemctl status lsyncd.service</span></span><br></pre></td></tr></table></figure><h3 id="4-5-查看日志"><a href="#4-5-查看日志" class="headerlink" title="4.5 查看日志"></a>4.5 查看日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs /data]<span class="comment"># tail -f /var/log/lsyncd/lsyncd.log </span></span><br><span class="line">[root@nfs /data]<span class="comment"># tail -f /var/log/lsyncd/lsyncd.status</span></span><br></pre></td></tr></table></figure><h3 id="4-6-测试数据"><a href="#4-6-测试数据" class="headerlink" title="4.6 测试数据"></a>4.6 测试数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs /data]<span class="comment"># for i in &#123;1..1000&#125;;do echo "$&#123;i&#125;"; echo "$&#123;i&#125;" &gt; $&#123;i&#125;.txt;sleep 0.1;done</span></span><br></pre></td></tr></table></figure><p>backup备份服务器查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@backup ~]<span class="comment"># cd /data</span></span><br><span class="line">[root@backup /data]<span class="comment"># while true ;do ls |wc -l;sleep 0.1;done</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="LNMP" scheme="http://linuxwf.com/categories/LNMP/"/>
    
    
      <category term="nfs" scheme="http://linuxwf.com/tags/nfs/"/>
    
      <category term="backup" scheme="http://linuxwf.com/tags/backup/"/>
    
      <category term="lsyncd" scheme="http://linuxwf.com/tags/lsyncd/"/>
    
  </entry>
  
  <entry>
    <title>3.NFS文件系统</title>
    <link href="http://linuxwf.com/2020/04/13/3-NFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://linuxwf.com/2020/04/13/3-NFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-04-13T04:10:00.000Z</published>
    <updated>2020-04-13T04:13:17.796Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="NFS文件系统"><a href="#NFS文件系统" class="headerlink" title="NFS文件系统"></a>NFS文件系统</h1><h2 id="第1章-NFS简介"><a href="#第1章-NFS简介" class="headerlink" title="第1章 NFS简介"></a>第1章 NFS简介</h2><p><code>NFS</code> 是Network File System的缩写，中文称为网络文件系统，它的主要功能是通过网络（一个局域网）让不同的主机系统之间可以共享文件或目录，NFS的客户端（一般为应用服务器，例如web）可以通过挂载（mount）的方式将NFS服务器共享的数据目录挂载到NFS客户端本地系统中（就是某一个关在点下），从客户端本地看，NFS服务器端共享目录就好像是客户端自己的磁盘分区或者目录一样，而实际上却是远端的NFS服务器的目录。<br>NFS网络文件系统很像Windows系统的网络共享、安全功能、网络驱动器映射，这也和linux的samba服务类似，只不过一般情况下，Windows网络共享服务或samba服务用户办公局域网共享，而互联网中小型网站集群架构后端常用NFS进行数据共享，若是大型网站，那么有可能还会用到更复杂的分布式文件系统FastDFS,glusterfs,HDFS</p><p>缺点：</p><p>1：nfs属于本地文件系统，在高并发场景和大存储量下，需要使用分布式存储FastDFS,glusterfs,HDFS等。</p><p>2：客户端的数据都是通过明文传送。客户端没有用户认证机制，安全性能一般，所以建议一般在局域网内使用。</p><p>3：容易发生单点故障，即server服务器宕机所有的客户端都不能访问。</p><h3 id="1-1-NFS应用场景"><a href="#1-1-NFS应用场景" class="headerlink" title="1.1 NFS应用场景"></a>1.1 NFS应用场景</h3><p>使用场景：web集群中NFS服务器主要用于存储用户上传的信息，方便集群中机器获取用户数据。如图片 附件 头像 视频 音频。</p><p>下面我将通过图解给大家展示集群需要共享存储服务的理由。</p><p> 1.A 用户上传图片经过负载均衡，负载均衡将上传请求调度至 WEB1 服务器上。</p><p> 2.B 用户访问 A 用户上传的图片，此时 B 用户被负载均衡调度至 WEB2 上，因为 WEB2 上没有这张图片，所以 B用户无法看到 A 用户传的图片</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/01.webp.jpg"  alt=""></p><p>如果有共享存储的情况</p><p>1.A 用户上传图片无论被负载均衡调度至 WEB1 还是 WEB2, 最终数据都被写入至共享存储</p><p>2.B 用户访问 A 用户上传图片时，无论调度至 WEB1 还是 WEB2，最终都会上共享存储访问对应的文件，这样就可以访问到资源了</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/02.webp.jpg"  alt=""></p><h3 id="1-2-nfs存储工作原理实现"><a href="#1-2-nfs存储工作原理实现" class="headerlink" title="1.2 nfs存储工作原理实现"></a>1.2 nfs存储工作原理实现</h3><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/nfs.png"  alt=""></p><p>NFS工作原理</p><p>1.用户进程访问 NFS 客户端，使用不同的函数对数据进行处理</p><p>2.NFS 客户端通过 TCP/IP 的方式传递给 NFS 服务端</p><p>3.NFS 服务端接收到请求后，会先调用 portmap 进程进行端口映射。</p><p>4.nfsd 进程用于判断 NFS 客户端是否拥有权限连接 NFS 服务端。</p><p>5.Rpc.mount 进程判断客户端是否有对应的权限进行验证。</p><p>6.idmap 进程实现用户映射和压缩</p><p>7.最后 NFS 服务端会将对应请求的函数转换为本地能识别的命令，传递至内核，由内核驱动硬件。</p><p>注意: rpc 是一个远程过程调用，那么使用 nfs 必须有 rpc 服务</p><p>前提条件</p><p>1.nfs依赖于RPC服务来传递消息</p><p>2.NFS服务启动的端口号是随机的,启动之后会向本地的RCP注册</p><p>3.先启动RPC服务,再启动NFS服务</p><p>4.NFS和RPC之间的通讯是他们自己内部完成的,对于用户来说无感知</p><p>5.NFS客户端和服务端不会直接沟通,必须通过RPC服务传递消息</p><p>6.防火墙要开放RPC服务的端口</p><h2 id="第2章-NFS服务的搭建"><a href="#第2章-NFS服务的搭建" class="headerlink" title="第2章 NFS服务的搭建"></a>第2章 NFS服务的搭建</h2><h3 id="2-1部署前准备"><a href="#2-1部署前准备" class="headerlink" title="2.1部署前准备"></a>2.1部署前准备</h3><table><thead><tr><th>操作系统</th><th>服务器角色</th><th>IP地址</th></tr></thead><tbody><tr><td>CentOS  7.4 x86_64</td><td>NFS服务端（nfs-server）</td><td>内网：172.16.1.31/24</td></tr><tr><td>CentOS  7.4 x86_64</td><td>NFS客户端（nfs-client1）</td><td>内网：172.16.1.41/24</td></tr></tbody></table><h3 id="2-2-NFS服务端部署"><a href="#2-2-NFS服务端部署" class="headerlink" title="2.2 NFS服务端部署"></a>2.2 NFS服务端部署</h3><h4 id="2-2-1-服务端安装NFS"><a href="#2-2-1-服务端安装NFS" class="headerlink" title="2.2.1 服务端安装NFS"></a>2.2.1 服务端安装NFS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum search nfs  <span class="comment">#查看nfs服务的包名</span></span><br><span class="line">yum -y install nfs-utils  <span class="comment">#安装nfs服务</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-配置参数"><a href="#2-2-2-配置参数" class="headerlink" title="2.2.2 配置参数"></a>2.2.2 配置参数</h4><p>​     <code>nfs</code> 服务程序的配置文件为/etc/exports，需要严格按照共享目录的路径 允许访问的 NFS 客户端（共享权限参数）格式书写，定义要共享的目录与相应的权限，具体书写方式如下图所示</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/canshu.webp.jpg"  alt=""></p><p>配置文件参数解释：<br>执行 man exports 命令，然后切换到文件结尾，可以快速查看如下样例格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nfs共享参数 参数作用</span><br><span class="line">rw         <span class="comment">#读写权限</span></span><br><span class="line">ro         <span class="comment">#只读权限</span></span><br><span class="line">root_squash   <span class="comment">#当 NFS 客户端以 root 管理员访问时，映射为 NFS 服务器的匿名用户(不常用)</span></span><br><span class="line">no_root_squash   <span class="comment">#当 NFS 客户端以 root 管理员访问时，映射为 NFS 服务器的 root 管理员(不常用)</span></span><br><span class="line">all_squash   <span class="comment">#无论 NFS 客户端使用什么账户访问，均映射为 NFS 服务器的匿名用户(常用)</span></span><br><span class="line">no_all_squash   <span class="comment">#无论 NFS 客户端使用什么账户访问，都不进行压缩</span></span><br><span class="line">sync   <span class="comment">#同时将数据写入到内存与硬盘中，保证不丢失数据</span></span><br><span class="line">async  <span class="comment">#优先将数据保存到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据</span></span><br><span class="line">anonuid   <span class="comment">#配置 all_squash 使用,指定 NFS 的用户 UID,必须存在系统</span></span><br><span class="line">anongid   <span class="comment">#配置 all_squash 使用,指定 NFS 的用户 UID,必须存在系统</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-配置NFS服务端"><a href="#2-2-3-配置NFS服务端" class="headerlink" title="2.2.3 配置NFS服务端"></a>2.2.3 配置NFS服务端</h4><p>写入配置文件：注意！IP地址和后面的小括号没有空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/exports &lt;&lt;EOF</span><br><span class="line">/data 172.16.1.0/24(rw,sync,all_squash)  <span class="comment">#这里是172.16.1.0网段</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>创建要共享的数据目录，并授权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data</span><br><span class="line">chown -R nfsnobody:nfsnobody /data/</span><br></pre></td></tr></table></figure><h4 id="2-2-4-启动NFS服务"><a href="#2-2-4-启动NFS服务" class="headerlink" title="2.2.4 启动NFS服务"></a>2.2.4 启动NFS服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rpcbind nfs-server <span class="comment">#注意先启动rpc服务</span></span><br><span class="line">systemctl status rpcbind nfs-server <span class="comment">#查看服务</span></span><br></pre></td></tr></table></figure><h4 id="2-2-5-检查nfs命令"><a href="#2-2-5-检查nfs命令" class="headerlink" title="2.2.5 检查nfs命令"></a>2.2.5 检查nfs命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># showmount -e 172.16.1.31</span></span><br><span class="line">Export list <span class="keyword">for</span> 172.16.1.31:</span><br><span class="line">/data 172.16.1.0/24</span><br></pre></td></tr></table></figure><h4 id="2-2-6-加入开机自启动"><a href="#2-2-6-加入开机自启动" class="headerlink" title="2.2.6 加入开机自启动"></a>2.2.6 加入开机自启动</h4><p>​        在使用 NFS 服务进行文件共享之前，需要使用 RPC（Remote Procedure Call 远程过程调用服务将 NFS 服务器的IP 地址和端口号信息发送给客户端。因此，在启动 NFS 服务之前，需要先重启并启用 rpcbind 服务程序,同时都加入开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> rpcbind nfs-server</span><br><span class="line">systemctl restart rpcbind nfs-server</span><br></pre></td></tr></table></figure><h3 id="2-3-客户端挂载"><a href="#2-3-客户端挂载" class="headerlink" title="2.3 客户端挂载"></a>2.3 客户端挂载</h3><p>客户端安装nfs服务十分简单，只需要安装nfs软件包即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nfs-utils rpcbind</span><br></pre></td></tr></table></figure><p>客户端安装完成后只需要启动rpcbind，不需要启动nfs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rpcbind</span><br><span class="line">systemctl <span class="built_in">enable</span> rpcbind</span><br></pre></td></tr></table></figure><p>客户端使用命令查看nfs共享信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># showmount -e 172.16.1.31</span></span><br><span class="line">Export list <span class="keyword">for</span> 172.16.1.31:</span><br><span class="line">/data 172.16.1.0/24</span><br></pre></td></tr></table></figure><p>客户端挂载 ： 创建挂载目录<br>        在 NFS 客户端创建一个挂载目录, 使用 mount 命令并结合-t 参数, 指定要挂载的文件系统的类型, 并在命令后面写上服务器的 IP 地址, 以及服务器上的共享目录, 最后需要写上要挂载到本地系统(客户端)的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data</span><br><span class="line">mount -t nfs 172.16.1.31:/data /data/</span><br></pre></td></tr></table></figure><p>挂载完成后查看是否挂载成功？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># df -h</span></span><br><span class="line">172.16.1.31:/data   39G  2.8G   37G   8% /data</span><br></pre></td></tr></table></figure><p>卸载命令：注意!卸载的时候如果提示”umount.nfs: /nfsdir: device is busy”先切换到其他目录再卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># umount /data/</span></span><br><span class="line"><span class="comment"># umount -rl /data/  #强制卸载</span></span><br></pre></td></tr></table></figure><h3 id="2-4-测试NFS"><a href="#2-4-测试NFS" class="headerlink" title="2.4 测试NFS"></a>2.4 测试NFS</h3><p>客户端41在挂载目录创建文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># touch oldboy.txt &amp;&amp; echo 123 &gt;oldboy.txt </span></span><br><span class="line"><span class="comment"># cat oldboy.txt </span></span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>NFS服务器端查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs /data]<span class="comment"># ls -l</span></span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 nfsnobody nfsnobody 4 Jul 18 16:56 oldboy.txt</span><br></pre></td></tr></table></figure><p>客户端41写入开机自动挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/fstab</span></span><br><span class="line"><span class="comment"># tail -1 /etc/fstab </span></span><br><span class="line">  172.16.1.31:/data    /data     nfs     defaults   0 0</span><br><span class="line"><span class="comment"># mount -a</span></span><br></pre></td></tr></table></figure><h3 id="2-5-NFS-权限验证"><a href="#2-5-NFS-权限验证" class="headerlink" title="2.5 NFS 权限验证"></a>2.5 NFS 权限验证</h3><h4 id="2-5-1-验证ro权限"><a href="#2-5-1-验证ro权限" class="headerlink" title="2.5.1 验证ro权限"></a>2.5.1 验证ro权限</h4><p>服务器端配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/exports</span></span><br><span class="line">/data 172.16.1.0/24(ro,sync,all_squash)</span><br><span class="line"><span class="comment"># systemctl restart rpcbind nfs-server</span></span><br><span class="line"><span class="comment"># showmount -e 172.16.1.31</span></span><br><span class="line">Export list <span class="keyword">for</span> 172.16.1.31:</span><br><span class="line">/data 172.16.1.0/24</span><br></pre></td></tr></table></figure><p>客户端挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mount -t nfs 172.16.1.31:/data /data</span></span><br><span class="line"><span class="comment"># df -h</span></span><br><span class="line">172.16.1.31:/data   39G  2.8G   37G   8% /data</span><br></pre></td></tr></table></figure><p>客户端测试读取权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /data/oldboy.txt </span></span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>客户端测试写入权限：(没有权限)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo 456 &gt;&gt; /data/oldboy.txt </span></span><br><span class="line">-bash: /data/oldboy.txt: Read-only file system</span><br></pre></td></tr></table></figure><h4 id="2-5-2-验证all-squash、-anonuid、-anongid-权限"><a href="#2-5-2-验证all-squash、-anonuid、-anongid-权限" class="headerlink" title="2.5.2 验证all_squash、 anonuid、 anongid 权限"></a>2.5.2 验证all_squash、 anonuid、 anongid 权限</h4><p>服务器端配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/exports</span></span><br><span class="line">/data 172.16.1.0/24(rw,sync,all_squash,anonuid=666,anongid=666)</span><br></pre></td></tr></table></figure><p>服务端创建用户及授权：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># groupadd -g 666 www</span></span><br><span class="line"><span class="comment"># useradd -u 666 -g 666 -s /sbin/nologin -M www</span></span><br><span class="line"><span class="comment"># id www</span></span><br><span class="line">  uid=666(www) gid=666(www) groups=666(www)</span><br></pre></td></tr></table></figure><p>重启NFS服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl restart rpcbind nfs-server</span></span><br></pre></td></tr></table></figure><p>服务器端更改目录属主、属组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chown -R www.www /data</span></span><br><span class="line"><span class="comment"># ll -d /data/</span></span><br><span class="line">  drwxr-xr-x 2 www www 24 Jul 18 11:52 /data/</span><br></pre></td></tr></table></figure><p>客户端创建用户www</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># groupadd -g 666 www</span></span><br><span class="line"><span class="comment"># useradd -u 666 -g 666 -s /sbin/nologin -M www</span></span><br><span class="line"><span class="comment"># id www</span></span><br><span class="line">  uid=666(www) gid=666(www) groups=666(www)</span><br></pre></td></tr></table></figure><p>客户端挂载测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mount -t nfs 172.16.1.31:/data /data</span></span><br><span class="line"><span class="comment"># ll -d /data</span></span><br><span class="line">drwxr-xr-x 2 www www 24 Jul 18 11:52 /data</span><br></pre></td></tr></table></figure><p>注意：创建用户前，先创建组（666），然后再创建用户www（666），否则会出现属主、属组不同的情况</p><h2 id="第3章查看nfs端口"><a href="#第3章查看nfs端口" class="headerlink" title="第3章查看nfs端口"></a>第3章查看nfs端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpcinfo -p</span></span><br><span class="line">   program vers proto   port  service</span><br><span class="line">    100000    4   tcp    111  portmapper</span><br><span class="line">    100000    3   tcp    111  portmapper</span><br><span class="line">    100000    2   tcp    111  portmapper</span><br><span class="line">    100000    4   udp    111  portmapper</span><br><span class="line">    100000    3   udp    111  portmapper</span><br><span class="line">    100000    2   udp    111  portmapper</span><br><span class="line">    100005    1   udp  20048  mountd</span><br><span class="line">    100005    1   tcp  20048  mountd</span><br><span class="line">    100005    2   udp  20048  mountd</span><br><span class="line">    100005    2   tcp  20048  mountd</span><br><span class="line">    100005    3   udp  20048  mountd</span><br><span class="line">    100005    3   tcp  20048  mountd</span><br><span class="line">    100003    3   tcp   2049  nfs</span><br><span class="line">    100003    4   tcp   2049  nfs</span><br><span class="line">    100227    3   tcp   2049  nfs_acl</span><br><span class="line">    100003    3   udp   2049  nfs</span><br><span class="line">    100003    4   udp   2049  nfs</span><br><span class="line">    100227    3   udp   2049  nfs_acl</span><br><span class="line">    100021    1   udp  37349  nlockmgr</span><br><span class="line">    100021    3   udp  37349  nlockmgr</span><br><span class="line">    100021    4   udp  37349  nlockmgr</span><br><span class="line">    100021    1   tcp  39255  nlockmgr</span><br><span class="line">    100021    3   tcp  39255  nlockmgr</span><br><span class="line">    100021    4   tcp  39255  nlockmgr</span><br></pre></td></tr></table></figure><h3 id="工作中防火墙配置"><a href="#工作中防火墙配置" class="headerlink" title="工作中防火墙配置"></a>工作中防火墙配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-service=nfs --permanent</span><br><span class="line">firewall-cmd --add-service=mountd --permanent</span><br><span class="line">firewall-cmd --add-service=rpc-bind --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="NFS故障案例"><a href="#NFS故障案例" class="headerlink" title="NFS故障案例"></a>NFS故障案例</h3><p>​        在生产环境中，对于共享的NFS目录，一般不会配置到/etc/fstab里。因为在客户端主机重启时如果由于网络等原因连接不上nfs server时，就会导致客户机无法启动的厄运发生。一般是通过把mount -t nfs 172.16.1.31:/data /data命令放到rc.local中来实现开机自动挂载NFS。</p><p>如果设置了开机自启动，但是系统启动的时候NFS并没有提供服务，就会导致开机自检的时候卡在挂在那一步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开机启动时添加rd.break</span><br><span class="line">ctrl+x</span><br><span class="line">mount -o remount,rw /sysroot/</span><br><span class="line">chroot /sysroot/</span><br></pre></td></tr></table></figure><h2 id="第4章-NFS小结"><a href="#第4章-NFS小结" class="headerlink" title="第4章 NFS小结"></a>第4章 NFS小结</h2><p>NFS 存储优点<br>1.NFS 文件系统简单易用、方便部署、数据可靠、服务稳定、满足中小企业需求。<br>2.NFS 文件系统内存放的数据都在文件系统之上，所有数据都是能看得见<br>NFS 存储局限<br>1.存在单点故障, 如果构建高可用维护麻烦 web-&gt;nfs()-&gt;backup<br>2.NFS 数据明文, 并不对数据做任何校验。<br>3.客户端挂载 NFS 服务没有密码验证, 安全性一般(内网使用)<br>NFS 应用建议<br>1.生产场景应将静态数据尽可能往前端推, 减少后端存储压力<br>2.必须将存储里的静态资源通过 CDN 缓存 jpg\png\mp4\avi\css\js<br>3.如果没有缓存或架构本身历史遗留问题太大, 在多存储也无用</p><h2 id="第5章-项目实战"><a href="#第5章-项目实战" class="headerlink" title="第5章 项目实战"></a>第5章 项目实战</h2><h3 id="5-1-项目需求"><a href="#5-1-项目需求" class="headerlink" title="5.1 项目需求"></a>5.1 项目需求</h3><p>准备 3 台虚拟机服务器，并且请按照要求搭建配置 NFS 服务。<br> NFS 服务端（A nfs-31）<br> NFS 客户端（B backup-41）<br> NFS 客户端（C nfs-42）<br> 1.在 NFS 服务端(A)上共享/data/rw(读写)给客户端B及/data/r(只读)给客户端C<br> 2.在 NFS 客户端(B/C)上进行挂载测试</p><p>环境准备</p><table><thead><tr><th>操作系统</th><th>服务器角色</th><th>IP地址</th></tr></thead><tbody><tr><td>CentOS  7.4 x86_64</td><td>NFS服务端（nfs-server）</td><td>内网：172.16.1.31/24</td></tr><tr><td>CentOS  7.4 x86_64</td><td>NFS客户端（nfs-client1）</td><td>内网：172.16.1.41/24</td></tr><tr><td>CentOS  7.4 x86_64</td><td>NFS客户端（nfs-client2）</td><td>内网：172.16.1.42/24</td></tr></tbody></table><h3 id="5-2-服务端配置"><a href="#5-2-服务端配置" class="headerlink" title="5.2 服务端配置"></a>5.2 服务端配置</h3><p>服务器端创建www用户和组，并指定/data目录的属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># groupadd -g 666 www</span></span><br><span class="line"><span class="comment"># useradd -u 666 -g 666 -s /sbin/nologin -M www</span></span><br><span class="line"><span class="comment"># id www</span></span><br><span class="line">  uid=666(www) gid=666(www) groups=666(www)</span><br><span class="line"><span class="comment"># chown -R www.www /data</span></span><br><span class="line"><span class="comment"># ll -d /data/</span></span><br><span class="line">  drwxr-xr-x 2 www www 24 Jul 18 11:52 /data/</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/exports</span></span><br><span class="line">/data 172.16.1.0/24(rw,sync,all_squash) <span class="comment">#注意：这里不指定用户uid和gid，否则权限会失效</span></span><br><span class="line">/data 172.16.1.41/24(rw,sync,all_squash,anonuid=666,anongid=666)</span><br><span class="line">/data 172.16.1.42/24(ro,sync,all_squash,anonuid=666,anongid=666)</span><br></pre></td></tr></table></figure><p>重启服务及查看nfs信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl restart rpcbind nfs-server  #重启服务</span></span><br><span class="line"><span class="comment"># showmount -e 172.16.1.31  #查看nfs共享信息</span></span><br><span class="line">  Export list <span class="keyword">for</span> 172.16.1.31:</span><br><span class="line">  /data 172.16.1.42/24,172.16.1.41/24,172.16.1.0/24</span><br></pre></td></tr></table></figure><h3 id="5-3-客户端挂载测试"><a href="#5-3-客户端挂载测试" class="headerlink" title="5.3 客户端挂载测试"></a>5.3 客户端挂载测试</h3><h4 id="5-3-1-客户端B-（backup-41）"><a href="#5-3-1-客户端B-（backup-41）" class="headerlink" title="5.3.1 客户端B （backup-41）"></a>5.3.1 客户端B （backup-41）</h4><p>重启rpc服务，并写入开机自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rpcbind</span><br><span class="line">systemctl <span class="built_in">enable</span> rpcbind</span><br></pre></td></tr></table></figure><p>创建挂载目录，并挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkdir /data</span></span><br><span class="line"><span class="comment"># mount -t nfs 172.16.1.31:/data /data</span></span><br><span class="line"><span class="comment"># df -h</span></span><br><span class="line">172.16.1.31:/data   39G  2.8G   37G   8% /data</span><br></pre></td></tr></table></figure><p>测试读写权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo 123456 &gt;test.txt   #客户端B写入文件，并读取</span></span><br><span class="line"><span class="comment"># cat test.txt </span></span><br><span class="line">123456</span><br><span class="line"><span class="comment"># ll /data/   #服务器端可以看到文件</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 www www 4 Jul 18 16:56 oldboy.txt</span><br><span class="line">-rw-r--r-- 1 www www 7 Jul 18 18:29 test.txt</span><br></pre></td></tr></table></figure><h4 id="5-3-2-客户端B（nfs-42）"><a href="#5-3-2-客户端B（nfs-42）" class="headerlink" title="5.3.2 客户端B（nfs-42）"></a>5.3.2 客户端B（nfs-42）</h4><p>安装nfs服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum -y install nfs-utils</span></span><br></pre></td></tr></table></figure><p>重启rpc命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl restart rpcbind</span></span><br><span class="line"><span class="comment"># systemctl enable rpcbind  #写入开机自启</span></span><br></pre></td></tr></table></figure><p>创建用户www和组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># groupadd -g 666 www</span></span><br><span class="line"><span class="comment"># useradd -u 666 -g 666 -s /sbin/nologin -M www</span></span><br><span class="line"><span class="comment"># id www</span></span><br><span class="line">  uid=666(www) gid=666(www) groups=666(www)</span><br></pre></td></tr></table></figure><p>创建挂载目录，并授权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkdir /data</span></span><br><span class="line"><span class="comment"># chown -R www.www /data</span></span><br><span class="line"><span class="comment"># ll -d /data/</span></span><br><span class="line">  drwxr-xr-x 2 www www 6 Jul 19 02:41 /data/</span><br></pre></td></tr></table></figure><p>挂载目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mount -t nfs 172.16.1.31:/data /data</span></span><br><span class="line"><span class="comment"># df -h</span></span><br><span class="line"> 172.16.1.31:/data   39G  2.8G   37G   8% /data</span><br></pre></td></tr></table></figure><p>测试只读权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat test.txt  #可以查看文件内容</span></span><br><span class="line"> 123456</span><br><span class="line"><span class="comment"># echo abc &gt;&gt;test.txt  #不能写入内容到文件</span></span><br><span class="line"> -bash: test.txt: Permission denied</span><br><span class="line"><span class="comment"># touch nfs.txt  #不能创建文件</span></span><br><span class="line"> touch: cannot touch ‘nfs.txt’: Permission denied</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="LNMP" scheme="http://linuxwf.com/categories/LNMP/"/>
    
    
      <category term="nfs" scheme="http://linuxwf.com/tags/nfs/"/>
    
  </entry>
  
  <entry>
    <title>2.Rsync备份服务器</title>
    <link href="http://linuxwf.com/2020/04/13/2-Rsync%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://linuxwf.com/2020/04/13/2-Rsync%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-04-13T03:57:00.000Z</published>
    <updated>2020-04-13T04:04:21.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Rsync-备份服务器"><a href="#Rsync-备份服务器" class="headerlink" title="Rsync 备份服务器"></a>Rsync 备份服务器</h1><h2 id="第一章-Rsync基本概述"><a href="#第一章-Rsync基本概述" class="headerlink" title="第一章 Rsync基本概述"></a>第一章 Rsync基本概述</h2><p>rsync 是一款开源的备份工具，可以在不同主机之间进行同步，可实现全量备份与增量备份，因此非常适合用于架构集中式备份或异地备份等应用。<br> rsync 官方地址： 传送门 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Frsync.samba.org" target="_blank" rel="noopener">http://rsync.samba.org</a><br> rsync 监听端口： 873<br> rsync 运行模式： C/S（Client/Server）</p><p>安装rsync服务命令：本地与远程均需安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install rsync</span><br></pre></td></tr></table></figure><h2 id="第二章-Rsync应用场景"><a href="#第二章-Rsync应用场景" class="headerlink" title="第二章 Rsync应用场景"></a>第二章 Rsync应用场景</h2><h3 id="2-1-备份方式："><a href="#2-1-备份方式：" class="headerlink" title="2.1 备份方式："></a>2.1 备份方式：</h3><p>既然需要备份，那么我们应该了解备份的方式<br> 完全备份<br> 增量备份<br>假设客户端上有 file1 file2 file3 文件，服务端上有 file1 文件，现要将客户端上的数据备份至服务端<br> 完全备份方式：</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/wqbf.webp.jpg"  alt=""></p><p>增量备份方式：</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/zlbf.webp.jpg"  alt=""></p><h3 id="2-2-备份架构："><a href="#2-2-备份架构：" class="headerlink" title="2.2 备份架构："></a>2.2 备份架构：</h3><p>1推（上传）    </p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/1tui.png"  alt=""></p><p>2拉 （下载）</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/2la.webp.jpg"  alt=""></p><p>3.大量服务器备份</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/3duo-backup.webp.jpg"  alt=""></p><p>4.异地备份</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/4yidi.webp.jpg"  alt=""></p><h2 id="第三章-Rsync三种模式"><a href="#第三章-Rsync三种模式" class="headerlink" title="第三章 Rsync三种模式"></a>第三章 Rsync三种模式</h2><h3 id="3-1-本地模式"><a href="#3-1-本地模式" class="headerlink" title="3.1 本地模式"></a>3.1 本地模式</h3><p>相当于cp</p><p>创建测试目录及文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.mkdir /data</span><br><span class="line">  <span class="built_in">cd</span> /data/</span><br><span class="line">2.dd <span class="keyword">if</span>=/dev/zero of=/data/500M.txt bs=10M count=50<span class="comment">#创建大文件</span></span><br><span class="line">  50+0 records <span class="keyword">in</span></span><br><span class="line">  50+0 records out</span><br><span class="line">  524288000 bytes (524 MB) copied, 18.1737 s, 28.8 MB/s</span><br><span class="line">3.ll -h</span><br><span class="line">  total 500M</span><br><span class="line">  -rw-r--r-- 1 root root 500M Jul 16 21:58 500M.txt</span><br></pre></td></tr></table></figure><p>测试本地模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.mkdir /tmp/<span class="built_in">test</span></span><br><span class="line">2.rsync -avz /data/500M.txt /tmp/<span class="built_in">test</span>/</span><br><span class="line">  sending incremental file list</span><br><span class="line">  500M.txt</span><br><span class="line"></span><br><span class="line">  sent 509,968 bytes  received 35 bytes  27,567.73 bytes/sec</span><br><span class="line">  total size is 524,288,000  speedup is 1,028.01</span><br><span class="line">3.ll /tmp/<span class="built_in">test</span>/</span><br><span class="line">  total 512000</span><br><span class="line">  -rw-r--r-- 1 root root 524288000 Jul 16 21:58 500M.txt</span><br></pre></td></tr></table></figure><h3 id="3-2-远程模式"><a href="#3-2-远程模式" class="headerlink" title="3.2 远程模式"></a>3.2 远程模式</h3><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz root@172.16.1.31:/tmp/data/ /data/  </span><br><span class="line"><span class="comment">#拉取远程服务器目录下所有文件到本地</span></span><br><span class="line">rsync -avz root@172.16.1.31:/tmp/data /data/    </span><br><span class="line"><span class="comment">#拉取远程服务器目录到本地</span></span><br></pre></td></tr></table></figure><p>上传</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz 1G.txt  root@172.16.1.31:/tmp/data</span><br></pre></td></tr></table></figure><h3 id="3-3-后台服务模式"><a href="#3-3-后台服务模式" class="headerlink" title="3.3 后台服务模式"></a>3.3 后台服务模式</h3><p>Rsync 借助 SSH 协议同步数据存在的缺陷</p><p>1.使用系统用户（不安全）,需要知道root密码</p><p>2.使用普通用户（会导致权限不足情况）需要修改用户属主、属组信息（uid gid）</p><p>3.守护进程传输方式: rsync 自身非常重要的功能(不使用系统用户，更加安全)</p><h3 id="3-4-命令参数解释"><a href="#3-4-命令参数解释" class="headerlink" title="3.4 命令参数解释"></a>3.4 命令参数解释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">rsync <span class="comment">#命令</span></span><br><span class="line">[OPTION...] <span class="comment">#选项</span></span><br><span class="line">SRC... <span class="comment">#远程主机模块(不是目录)</span></span><br><span class="line">[USER@] <span class="comment">#远程主机用户(虚拟用户)</span></span><br><span class="line">HOST:: <span class="comment">#远程主机地址</span></span><br><span class="line">[DEST] <span class="comment">#将远程主机模块备份至本地什么位置</span></span><br><span class="line">-a <span class="comment">#归档模式传输, 等于-tropgDl</span></span><br><span class="line">-v <span class="comment">#详细模式输出, 打印速率, 文件数量等</span></span><br><span class="line">-z <span class="comment">#传输时进行压缩以提高效率</span></span><br><span class="line">-r <span class="comment">#递归传输目录及子目录，即目录下得所有目录都同样传输。</span></span><br><span class="line">-t <span class="comment">#保持文件时间信息</span></span><br><span class="line">-o <span class="comment">#保持文件属主信息</span></span><br><span class="line">-p <span class="comment">#保持文件权限</span></span><br><span class="line">-g <span class="comment">#保持文件属组信息</span></span><br><span class="line">-l <span class="comment">#保留软连接</span></span><br><span class="line">-P <span class="comment">#显示同步的过程及传输时的进度等信息</span></span><br><span class="line">-D <span class="comment">#保持设备文件信息</span></span><br><span class="line">-L <span class="comment">#保留软连接指向的目标文件</span></span><br><span class="line">-e <span class="comment">#使用的信道协议,指定替代 rsh 的 shell 程序</span></span><br><span class="line">--exclude=PATTERN <span class="comment">#指定排除不需要传输的文件模式</span></span><br><span class="line">--exclude-from=file <span class="comment">#文件名所在的目录文件</span></span><br><span class="line">--bwlimit=100 <span class="comment">#限速传输</span></span><br><span class="line">--partial <span class="comment">#断点续传</span></span><br><span class="line">--delete <span class="comment">#让目标目录和源目录数据保持一致</span></span><br></pre></td></tr></table></figure><p>我们一般使用： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz 本地上传文件 目标地址(IP):/路径    <span class="comment">#上传数据</span></span><br><span class="line">rsync -avz 目标地址(IP):/路径/目录(文件) 本地路径   <span class="comment">#下载数据</span></span><br></pre></td></tr></table></figure><h2 id="第四章-后台服务模式-服务端配置"><a href="#第四章-后台服务模式-服务端配置" class="headerlink" title="第四章 后台服务模式-服务端配置"></a>第四章 后台服务模式-服务端配置</h2><h3 id="4-1-安装rsync服务"><a href="#4-1-安装rsync服务" class="headerlink" title="4.1 安装rsync服务"></a>4.1 安装rsync服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install rsync</span><br></pre></td></tr></table></figure><h3 id="4-2-修改配置文件"><a href="#4-2-修改配置文件" class="headerlink" title="4.2 修改配置文件"></a>4.2 修改配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@backup /backup]<span class="comment"># cat /etc/rsyncd.conf</span></span><br><span class="line">uid = www </span><br><span class="line">gid = www </span><br><span class="line">port = 873</span><br><span class="line">fake super = yes</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 200</span><br><span class="line">timeout = 600</span><br><span class="line">ignore errors</span><br><span class="line"><span class="built_in">read</span> only = <span class="literal">false</span></span><br><span class="line">list = <span class="literal">false</span></span><br><span class="line">auth users = rsync_backup</span><br><span class="line">secrets file = /etc/rsync.passwd</span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log</span><br><span class="line"><span class="comment">#####################################</span></span><br><span class="line">[backup]</span><br><span class="line">comment = welcome to oldboyedu backup!</span><br><span class="line">path = /backup</span><br><span class="line"></span><br><span class="line">[data]</span><br><span class="line">path = /data</span><br></pre></td></tr></table></figure><h3 id="4-3-配置文件解释"><a href="#4-3-配置文件解释" class="headerlink" title="4.3 配置文件解释"></a>4.3 配置文件解释</h3><p>注意！以下配置只是为了理解rsync配置参数，配置文件中不要带有#或者中文，不然启动会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">uid = www <span class="comment"># 运行进程的用户</span></span><br><span class="line">gid = www <span class="comment"># 运行进程的用户组</span></span><br><span class="line">port = 873 <span class="comment"># 监听端口</span></span><br><span class="line">fake super = yes <span class="comment"># 无需让 rsync 以 root 身份运行，允许接收文件的完整属性</span></span><br><span class="line">use chroot = no <span class="comment"># 禁锢推送的数据至某个目录, 不允许跳出该目录</span></span><br><span class="line">max connections = 200 <span class="comment"># 最大连接数</span></span><br><span class="line">timeout = 600 <span class="comment"># 超时时间</span></span><br><span class="line">ignore errors <span class="comment"># 忽略错误信息</span></span><br><span class="line"><span class="built_in">read</span> only = <span class="literal">false</span> <span class="comment"># 对备份数据可读写</span></span><br><span class="line">list = <span class="literal">false</span> <span class="comment"># 不允许查看模块信息</span></span><br><span class="line">auth users = rsync_backup <span class="comment"># 定义虚拟用户，作为连接认证用户</span></span><br><span class="line">secrets file = /etc/rsync.passwd <span class="comment"># 定义 rsync 服务用户连接认证密码文件路径</span></span><br><span class="line">[backup] <span class="comment"># 定义模块信息</span></span><br><span class="line">comment = commit <span class="comment"># 模块注释信息</span></span><br><span class="line">path = /backup <span class="comment"># 定义接收备份数据目录</span></span><br></pre></td></tr></table></figure><h3 id="4-4-创建用户以及数据目录-并更改属主"><a href="#4-4-创建用户以及数据目录-并更改属主" class="headerlink" title="4.4 创建用户以及数据目录 并更改属主"></a>4.4 创建用户以及数据目录 并更改属主</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useradd -M -s /sbin/nologin -u 666 www </span><br><span class="line">mkdir /backup /data</span><br><span class="line">chown -R www.www /backup</span><br><span class="line">chown -R www.www /data</span><br></pre></td></tr></table></figure><h3 id="4-5-创建虚拟用户密码文件并授权"><a href="#4-5-创建虚拟用户密码文件并授权" class="headerlink" title="4.5 创建虚拟用户密码文件并授权"></a>4.5 创建虚拟用户密码文件并授权</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"rsync_backup:oldboy"</span> &gt;/etc/rsync.passwd</span><br><span class="line">chmod 600 /etc/rsync.passwd</span><br></pre></td></tr></table></figure><h3 id="4-6-加入开机启动"><a href="#4-6-加入开机启动" class="headerlink" title="4.6 加入开机启动"></a>4.6 加入开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rsyncd  <span class="comment">#启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> rsyncd <span class="comment">#开机自启动</span></span><br></pre></td></tr></table></figure><h3 id="4-7-检查端口和服务"><a href="#4-7-检查端口和服务" class="headerlink" title="4.7 检查端口和服务"></a>4.7 检查端口和服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -lntup|grep 873 <span class="comment">#查看端口</span></span><br><span class="line">systemctl status rsyncd <span class="comment">#查看服务</span></span><br></pre></td></tr></table></figure><h2 id="第五章-后台服务模式-客户端配置"><a href="#第五章-后台服务模式-客户端配置" class="headerlink" title="第五章 后台服务模式-客户端配置"></a>第五章 后台服务模式-客户端配置</h2><h3 id="5-1-安装rsync服务"><a href="#5-1-安装rsync服务" class="headerlink" title="5.1 安装rsync服务"></a>5.1 安装rsync服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install rsync</span><br></pre></td></tr></table></figure><h3 id="5-2-配置密码文件及授权"><a href="#5-2-配置密码文件及授权" class="headerlink" title="5.2 配置密码文件及授权"></a>5.2 配置密码文件及授权</h3><p>两种方式：<br>1.使用密码文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"oldboy"</span> &gt;/etc/rsync.passwd</span><br><span class="line">chmod 600 /etc/rsync.passwd</span><br><span class="line">rsync -avzP linux2NB.txt rsync_backup@172.16.1.41::backup --passwordfile=/etc/rsync.passwd</span><br></pre></td></tr></table></figure><p>2.使用rsync变量-脚本中使用-推荐这种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=oldboy</span><br></pre></td></tr></table></figure><h2 id="第六章-实战内容"><a href="#第六章-实战内容" class="headerlink" title="第六章 实战内容"></a>第六章 实战内容</h2><h3 id="6-1-客户端推送-backup-目录下所有内容至-Rsync-服务端"><a href="#6-1-客户端推送-backup-目录下所有内容至-Rsync-服务端" class="headerlink" title="6.1 客户端推送 backup 目录下所有内容至 Rsync 服务端"></a>6.1 客户端推送 backup 目录下所有内容至 Rsync 服务端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=oldboy</span><br><span class="line">rsync -avzP /backup/ rsync_backup@172.16.1.41::backup</span><br></pre></td></tr></table></figure><h3 id="6-2-客户端拉取-Rsync-服务端-backup-模块数据至本地客户端的-backup-目录"><a href="#6-2-客户端拉取-Rsync-服务端-backup-模块数据至本地客户端的-backup-目录" class="headerlink" title="6.2 客户端拉取 Rsync 服务端 backup 模块数据至本地客户端的 /backup 目录"></a>6.2 客户端拉取 Rsync 服务端 backup 模块数据至本地客户端的 /backup 目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=oldboy</span><br><span class="line">rsync -avzP rsync_backup@172.16.1.41::backup /backup/</span><br></pre></td></tr></table></figure><h3 id="6-3-Rsync-实现数据无差异同步"><a href="#6-3-Rsync-实现数据无差异同步" class="headerlink" title="6.3 Rsync 实现数据无差异同步"></a>6.3 Rsync 实现数据无差异同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取远端数据：远端与本地保持一致,远端没有本地有会被删除, 造成客户端数据丢失</span></span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=oldboy</span><br><span class="line">rsync -avzP --delete rsync_backup@172.16.1.41::backup /data/</span><br><span class="line"><span class="comment">#推送数据至远端：本地与远端保持一致, 本地没有远端会被删除, 造成服务器端数据丢失</span></span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=oldboy</span><br><span class="line">rsync -avzP --delete /data/ rsync_backup@172.16.1.41::backup</span><br></pre></td></tr></table></figure><h3 id="6-4-Rsync-的-Limit-限速"><a href="#6-4-Rsync-的-Limit-限速" class="headerlink" title="6.4 Rsync 的 Limit 限速"></a>6.4 Rsync 的 Limit 限速</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#企业案例：防止备份时带宽不够用，影响其他业务</span></span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=oldboy</span><br><span class="line">rsync -avz --bwlimit=10 rsync_backup@172.16.1.41::backup /data/  <span class="comment">#限制为10M/S传输数据</span></span><br></pre></td></tr></table></figure><h2 id="第七章-全网备份案例"><a href="#第七章-全网备份案例" class="headerlink" title="第七章 全网备份案例"></a>第七章 全网备份案例</h2><h3 id="7-1-客户端需求："><a href="#7-1-客户端需求：" class="headerlink" title="7.1 客户端需求："></a>7.1 客户端需求：</h3><p>1.客户端 每天凌晨1点在服务器本地打包备份(系统配置文件\日志文件\其他目录\应用配置等文件)<br>2.客户端备份的数据必须存放至以主机名<em>ip地址</em>当前时间命名的目录中<br>3.客户端最后通过rsync推送本地已经打包好的备份文件至backup服务器<br>4.客户端服务器本地保留最近7天的数据，避免浪费磁盘空间</p><h3 id="7-2-客户端实现步骤："><a href="#7-2-客户端实现步骤：" class="headerlink" title="7.2 客户端实现步骤："></a>7.2 客户端实现步骤：</h3><h4 id="7-2-1-创建脚本目录"><a href="#7-2-1-创建脚本目录" class="headerlink" title="7.2.1.创建脚本目录"></a>7.2.1.创建脚本目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /server/scripts</span><br></pre></td></tr></table></figure><h4 id="7-2-2-取主机名"><a href="#7-2-2-取主机名" class="headerlink" title="7.2.2. 取主机名"></a>7.2.2. 取主机名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure><h4 id="7-2-3-取IP地址"><a href="#7-2-3-取IP地址" class="headerlink" title="7.2.3 取IP地址"></a>7.2.3 取IP地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth1|awk <span class="string">'NR==2&#123;print $2&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="7-2-4-取时间"><a href="#7-2-4-取时间" class="headerlink" title="7.2.4 取时间"></a>7.2.4 取时间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date +%F</span><br></pre></td></tr></table></figure><h4 id="7-2-5-拼接在一起"><a href="#7-2-5-拼接在一起" class="headerlink" title="7.2.5 拼接在一起"></a>7.2.5 拼接在一起</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(hostname)_$(ifconfig eth1|awk <span class="string">'NR==2&#123;print $2&#125;'</span>)_$(date +%F)</span><br></pre></td></tr></table></figure><h4 id="7-2-6-创建测试"><a href="#7-2-6-创建测试" class="headerlink" title="7.2.6 创建测试"></a>7.2.6 创建测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /backup/$(hostname)_$(ifconfig eth1|awk<span class="string">'NR==2&#123;print $2&#125;'</span>)_$(date +%F)</span><br></pre></td></tr></table></figure><h4 id="7-2-7-打包并查看压缩包内容"><a href="#7-2-7-打包并查看压缩包内容" class="headerlink" title="7.2.7 打包并查看压缩包内容"></a>7.2.7 打包并查看压缩包内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> / &amp;&amp; tar zcvf sys.tar.gz etc/fstab etc/passwd </span><br><span class="line">tar tf sys.tar.gz</span><br></pre></td></tr></table></figure><h4 id="7-2-8-拼接命令"><a href="#7-2-8-拼接命令" class="headerlink" title="7.2.8 拼接命令"></a>7.2.8 拼接命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> / &amp;&amp; tar zcf /backup/$(hostname)_$(ifconfig eth1|awk <span class="string">'NR==2&#123;print $2&#125;'</span>)_$(date +%F)/sys.tar.gz etc/fstab etc/passwd</span><br><span class="line"><span class="built_in">cd</span> / &amp;&amp; tar zcf /backup/$(hostname)_$(ifconfig eth1|awk <span class="string">'NR==2&#123;print $2&#125;'</span>)_$(date +%F)/log.tar.gz var/<span class="built_in">log</span>/messages var/<span class="built_in">log</span>/secure</span><br></pre></td></tr></table></figure><h4 id="7-2-9-创建数据"><a href="#7-2-9-创建数据" class="headerlink" title="7.2.9 创建数据"></a>7.2.9 创建数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat date.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#生成1-31天的系统和日志压缩包</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..31&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">backup=<span class="string">"/backup/<span class="variable">$(hostname)</span>_<span class="variable">$(ifconfig eth1|awk 'NR==2&#123;print $2&#125;')</span>_<span class="variable">$(date +%F)</span>"</span></span><br><span class="line">date -s 2017/07/<span class="variable">$&#123;i&#125;</span></span><br><span class="line">mkdir -p <span class="variable">$&#123;backup&#125;</span></span><br><span class="line"><span class="built_in">cd</span> / &amp;&amp; tar zcf <span class="variable">$&#123;backup&#125;</span>/sys.tar.gz etc/passwd etc/fstab</span><br><span class="line"><span class="built_in">cd</span> / &amp;&amp; tar zcf <span class="variable">$&#123;backup&#125;</span>/log.tar.gz var/<span class="built_in">log</span>/messages var/<span class="built_in">log</span>/secure</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="7-2-10-客户端给压缩文件打上指纹"><a href="#7-2-10-客户端给压缩文件打上指纹" class="headerlink" title="7.2.10 客户端给压缩文件打上指纹"></a>7.2.10 客户端给压缩文件打上指纹</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5sum /backup/$(hostname)_$(ifconfig eth1|awk <span class="string">'NR==2&#123;print $2&#125;'</span>)_$(date +%F)/*.tar.gz &gt;/backup/$(hostname)_$(ifconfig eth1|awk <span class="string">'NR==2&#123;print $2&#125;'</span>)_$(date +%F)/$(date +%F)_md5.txt</span><br></pre></td></tr></table></figure><h4 id="7-2-11-删除7天的前文件"><a href="#7-2-11-删除7天的前文件" class="headerlink" title="7.2.11 删除7天的前文件"></a>7.2.11 删除7天的前文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /backup/ -<span class="built_in">type</span> d -mtime +7|xargs rm -rf</span><br></pre></td></tr></table></figure><h4 id="7-2-12-将路径、IP地址、时间命令替换成变量"><a href="#7-2-12-将路径、IP地址、时间命令替换成变量" class="headerlink" title="7.2.12 将路径、IP地址、时间命令替换成变量"></a>7.2.12 将路径、IP地址、时间命令替换成变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin"</span></span><br><span class="line">BACKUP=/backup</span><br><span class="line">HOST=$(hostname)</span><br><span class="line">IP=$(ifconfig eth1|awk <span class="string">'NR==2&#123;print $2&#125;'</span>)</span><br><span class="line">DATE=$(date +%F)</span><br><span class="line">DEST=<span class="variable">$&#123;HOST&#125;</span>_<span class="variable">$&#123;IP&#125;</span>_<span class="variable">$&#123;DATE&#125;</span></span><br></pre></td></tr></table></figure><h4 id="7-2-13-注意要点："><a href="#7-2-13-注意要点：" class="headerlink" title="7.2.13 注意要点："></a>7.2.13 注意要点：</h4><p>注意踩坑<br>我们的备份脚本最终会以定时任务的形式实现，而定时任务能识别的PATH变量有限，所以最好在脚本里添加PATH变量，或者脚本里命令写绝对路径。</p><h3 id="7-3-服务端需求："><a href="#7-3-服务端需求：" class="headerlink" title="7.3 服务端需求："></a>7.3 服务端需求：</h3><p>1.服务端部署 rsync，用于接收客户端推送过来的备份数据<br>2.服务端需要每天校验客户端推送过来的数据是否完整<br>3.服务端需要每天校验的结果通知给管理员<br>4.服务端仅保留 6 个月的备份数据,其余的全部删除<br>注意：所有服务器的备份目录必须都为/backup</p><h3 id="7-4-服务端实现步骤"><a href="#7-4-服务端实现步骤" class="headerlink" title="7.4 服务端实现步骤"></a>7.4 服务端实现步骤</h3><h4 id="7-4-1-校验客户端发送来的数据文件"><a href="#7-4-1-校验客户端发送来的数据文件" class="headerlink" title="7.4.1 校验客户端发送来的数据文件"></a>7.4.1 校验客户端发送来的数据文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find <span class="variable">$&#123;BACKUP&#125;</span>/ -name <span class="string">"md5.txt"</span> -<span class="built_in">type</span> f|xargs md5sum -c &gt;<span class="variable">$&#123;BACKUP&#125;</span>/check_<span class="variable">$&#123;DATE&#125;</span>.txt</span><br></pre></td></tr></table></figure><h4 id="7-4-2-发送邮件cd"><a href="#7-4-2-发送邮件cd" class="headerlink" title="7.4.2 发送邮件cd"></a>7.4.2 发送邮件cd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mail -s <span class="string">"rsync_check_<span class="variable">$&#123;DATE&#125;</span>"</span> wufei008@qq.com &lt;<span class="variable">$&#123;BACKUP&#125;</span>/check_<span class="variable">$&#123;DATE&#125;</span>.txt</span><br></pre></td></tr></table></figure><h4 id="7-4-3-删除文件"><a href="#7-4-3-删除文件" class="headerlink" title="7.4.3 删除文件"></a>7.4.3 删除文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除超过 7 天的校验结果文件, 删除超过 180 天的备份数据文件</span></span><br><span class="line">find <span class="variable">$&#123;BACKUP&#125;</span>/ -<span class="built_in">type</span> f -name <span class="string">"check*"</span> -mtime +7|xargs rm -rf</span><br><span class="line">find <span class="variable">$&#123;BACKUP&#125;</span>/ -<span class="built_in">type</span> d -mtime +180|xargs rm -rf</span><br></pre></td></tr></table></figure><h4 id="7-4-4-安装配置mailx"><a href="#7-4-4-安装配置mailx" class="headerlink" title="7.4.4  安装配置mailx"></a>7.4.4  安装配置mailx</h4><p>安装mailx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mailx</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/mail.rc</span></span><br><span class="line"><span class="built_in">set</span> from=xxxxxx  <span class="comment">#邮箱地址</span></span><br><span class="line"><span class="built_in">set</span> smtp=smtps://smtp.qq.com:465</span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=xxxxxx  <span class="comment">#邮箱地址</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-password=xxxxxx  <span class="comment">#邮箱授权码</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth=login</span><br><span class="line"><span class="built_in">set</span> ssl-verify=ignore</span><br><span class="line"><span class="built_in">set</span> nss-config-dir=/etc/pki/nssdb/</span><br></pre></td></tr></table></figure><h2 id="第八章-配置文件汇总"><a href="#第八章-配置文件汇总" class="headerlink" title="第八章 配置文件汇总"></a>第八章 配置文件汇总</h2><h3 id="8-1-客户端生成数据脚本"><a href="#8-1-客户端生成数据脚本" class="headerlink" title="8.1 客户端生成数据脚本"></a>8.1 客户端生成数据脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat date.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成1-31天的系统和日志压缩包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..31&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">backup=<span class="string">"/backup/<span class="variable">$(hostname)</span>_<span class="variable">$(ifconfig eth1|awk 'NR==2&#123;print $2&#125;')</span>_<span class="variable">$(date +%F)</span>"</span></span><br><span class="line">date -s 2017/07/<span class="variable">$&#123;i&#125;</span></span><br><span class="line">mkdir -p <span class="variable">$&#123;backup&#125;</span></span><br><span class="line"><span class="built_in">cd</span> / &amp;&amp; tar -zcf <span class="variable">$&#123;backup&#125;</span>/sys.tar.gz etc/passwd etc/fstab</span><br><span class="line"><span class="built_in">cd</span> / &amp;&amp; tar -zcf <span class="variable">$&#123;backup&#125;</span>/log.tar.gz var/<span class="built_in">log</span>/messages var/<span class="built_in">log</span>/secure</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="8-2-客户端上传脚本"><a href="#8-2-客户端上传脚本" class="headerlink" title="8.2 客户端上传脚本"></a>8.2 客户端上传脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat push_rsync.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">PATH=<span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin"</span></span><br><span class="line">BACKUP=/backup</span><br><span class="line">HOST=$(hostname)</span><br><span class="line">IP=$(ifconfig eth1|awk <span class="string">'NR==2&#123;print $2&#125;'</span>)</span><br><span class="line">DATE=$(date +%F)</span><br><span class="line">DEST=<span class="variable">$&#123;HOST&#125;</span>_<span class="variable">$&#123;IP&#125;</span>_<span class="variable">$&#123;DATE&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.创建目录</span></span><br><span class="line">mkdir -p <span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$&#123;DEST&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.打包数据</span></span><br><span class="line"><span class="built_in">cd</span> / &amp;&amp; tar -zcf <span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$&#123;DEST&#125;</span>/sys.tar.gz etc/passwd etc/fstab</span><br><span class="line"><span class="built_in">cd</span> / &amp;&amp; tar -zcf <span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$&#123;DEST&#125;</span>/log.tar.gz var/<span class="built_in">log</span>/messages var/<span class="built_in">log</span>/secure</span><br><span class="line">md5sum <span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$&#123;DEST&#125;</span>/*.tar.gz &gt;<span class="variable">$&#123;BACKUP&#125;</span>/<span class="variable">$&#123;DEST&#125;</span>/<span class="variable">$&#123;DATE&#125;</span>_md5.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.推送</span></span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=oldboy</span><br><span class="line">rsync -avzP <span class="variable">$&#123;BACKUP&#125;</span>/ rsync_backup@172.16.1.41::backup</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.删除7天以前的文件</span></span><br><span class="line">find <span class="variable">$&#123;BACKUP&#125;</span>/ -<span class="built_in">type</span> d -mtime +7 |xargs rm -rf</span><br></pre></td></tr></table></figure><h3 id="8-3-服务器端校验并发送到邮箱脚本"><a href="#8-3-服务器端校验并发送到邮箱脚本" class="headerlink" title="8.3 服务器端校验并发送到邮箱脚本"></a>8.3 服务器端校验并发送到邮箱脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat check_rsync.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">PATH=<span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin"</span></span><br><span class="line">BACKUP=/backup</span><br><span class="line">HOST=$(hostname)</span><br><span class="line">IP=$(ifconfig eth1|awk <span class="string">'NR==2&#123;print $2&#125;'</span>)</span><br><span class="line">DATE=$(date +%F)</span><br><span class="line">DEST=<span class="variable">$&#123;HOST&#125;</span>_<span class="variable">$&#123;IP&#125;</span>_<span class="variable">$&#123;DATE&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.检验客户端发送过来的数据</span></span><br><span class="line">find <span class="variable">$&#123;BACKUP&#125;</span>/ -name <span class="string">"md5.txt"</span> -<span class="built_in">type</span> f|xargs md5sum -c &gt;<span class="variable">$&#123;BACKUP&#125;</span>/check_<span class="variable">$&#123;DATE&#125;</span>.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.邮件发送</span></span><br><span class="line">mail -s <span class="string">"rsync_check_<span class="variable">$&#123;DATE&#125;</span>"</span> wufei008@qq.com &lt;<span class="variable">$&#123;BACKUP&#125;</span>/check_<span class="variable">$&#123;DATE&#125;</span>.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.删除超过 7 天的校验结果文件, 删除超过 180 天的备份数据文件</span></span><br><span class="line">find <span class="variable">$&#123;BACKUP&#125;</span>/ -<span class="built_in">type</span> f -name <span class="string">"check*"</span> -mtime +7|xargs rm -rf</span><br><span class="line">find <span class="variable">$&#123;BACKUP&#125;</span>/ -<span class="built_in">type</span> d -mtime +180|xargs rm -rf</span><br></pre></td></tr></table></figure><h3 id="8-4-服务器rsync安装配置脚本"><a href="#8-4-服务器rsync安装配置脚本" class="headerlink" title="8.4 服务器rsync安装配置脚本"></a>8.4 服务器rsync安装配置脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat rsync_install.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.安装rsync</span></span><br><span class="line">yum install rsync -y</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.创建用户</span></span><br><span class="line">useradd -s /sbin/nologin -M -u 666 www</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.配置文件</span></span><br><span class="line">cat &gt; /etc/rsyncd.conf &lt;&lt;EOF</span><br><span class="line">uid = www </span><br><span class="line">gid = www </span><br><span class="line">port = 873</span><br><span class="line">fake super = yes</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 200</span><br><span class="line">timeout = 600</span><br><span class="line"><span class="built_in">read</span> only = <span class="literal">false</span></span><br><span class="line">list = <span class="literal">false</span></span><br><span class="line">ignore errors</span><br><span class="line">auth users = rsync_backup</span><br><span class="line">secrets file = /etc/rsync.passwd</span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log</span><br><span class="line">[backup]</span><br><span class="line">comment = welcome to oldboyedu backup!</span><br><span class="line">path = /backup</span><br><span class="line">[data]</span><br><span class="line">path = /data</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.创建密码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"rsync_backup:oldboy"</span> &gt;/etc/rsync.passwd</span><br><span class="line">chmod 600 /etc/rsync.passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.创建目录</span></span><br><span class="line">mkdir -p /&#123;data,backup&#125;  </span><br><span class="line">chown -R www:www /&#123;data,backup&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.启动</span></span><br><span class="line">systemctl start rsyncd</span><br><span class="line">systemctl <span class="built_in">enable</span> rsyncd</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.检查</span></span><br><span class="line">ps -ef|grep rsync</span><br><span class="line">ss -lntup|grep 873</span><br><span class="line">netstat -lntup|grep rsync</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="LNMP" scheme="http://linuxwf.com/categories/LNMP/"/>
    
    
      <category term="rsync" scheme="http://linuxwf.com/tags/rsync/"/>
    
  </entry>
  
  <entry>
    <title>1.综合架构环境准备</title>
    <link href="http://linuxwf.com/2020/04/13/1-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    <id>http://linuxwf.com/2020/04/13/1-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</id>
    <published>2020-04-13T03:45:00.000Z</published>
    <updated>2020-04-13T03:53:49.430Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="综合架构环境准备"><a href="#综合架构环境准备" class="headerlink" title="综合架构环境准备"></a>综合架构环境准备</h1><h2 id="1-创建一台全新虚拟机做模板机"><a href="#1-创建一台全新虚拟机做模板机" class="headerlink" title="1.创建一台全新虚拟机做模板机"></a>1.创建一台全新虚拟机做模板机</h2><p>系统：CentOS 7</p><p>内存：2G</p><p>网卡eth0：NAT模式 10.0.1.200   — 外网</p><p>网卡eth1：LAN局域网 172.16.1.200</p><p>硬盘：40G </p><h2 id="2-安装CentOS-7-系统"><a href="#2-安装CentOS-7-系统" class="headerlink" title="2.安装CentOS 7 系统"></a>2.安装CentOS 7 系统</h2><p>添加网卡eth1:</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/01.jpg"  alt=""></p><p>修改网卡名称:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ifnames=0 biosdevname=0</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/02.jpg"  alt=""></p><h2 id="3-优化模板机"><a href="#3-优化模板机" class="headerlink" title="3.优化模板机"></a>3.优化模板机</h2><h3 id="3-1精简网卡配置文件"><a href="#3-1精简网卡配置文件" class="headerlink" title="3.1精简网卡配置文件"></a>3.1精简网卡配置文件</h3><p>如果不删除，重新克隆虚拟机会导致上不了网<br>删除网卡里面包含UUID 的行（centos7），删除UUID和HWADDR（CentOS5和6）<br>清空/etc/udev/rules.d/70-persistent-net.rules(centos 5 和6)</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/03.jpg"  alt=""></p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/04.jpg"  alt=""></p><h3 id="3-2关闭防火墙和Selinux"><a href="#3-2关闭防火墙和Selinux" class="headerlink" title="3.2关闭防火墙和Selinux"></a>3.2关闭防火墙和Selinux</h3><p>关闭防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>关闭selinux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">vim /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><h3 id="3-3优化SSH连接速度慢"><a href="#3-3优化SSH连接速度慢" class="headerlink" title="3.3优化SSH连接速度慢"></a>3.3优化SSH连接速度慢</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">79 GSSAPIAuthentication no</span><br><span class="line">115 UseDNS no</span><br><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><h3 id="3-4优化命令行显示"><a href="#3-4优化命令行显示" class="headerlink" title="3.4优化命令行显示"></a>3.4优化命令行显示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">"[\[\e[34;1m\]\u@\[\e[0m\]\[\e[32;1m\]\H\[\e[0m\] \[\e[31;1m\]\w\[\e[0m\]]\\$ "</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="3-5优化yum源为阿里源"><a href="#3-5优化yum源为阿里源" class="headerlink" title="3.5优化yum源为阿里源"></a>3.5优化yum源为阿里源</h3><p>查看yum 库信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist</span><br></pre></td></tr></table></figure><p>打开阿里源网址<a href="https://opsx.alibaba.com/mirror" target="_blank" rel="noopener">https://opsx.alibaba.com/mirror</a></p><p>选择对应版本，帮助：</p><h4 id="1、备份"><a href="#1、备份" class="headerlink" title="1、备份"></a>1、备份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><h4 id="2、下载新的CentOS-Base-repo-到-etc-yum-repos-d"><a href="#2、下载新的CentOS-Base-repo-到-etc-yum-repos-d" class="headerlink" title="2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/"></a>2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br></pre></td></tr></table></figure><h4 id="3、之后运行yum-makecache-fast生成缓存"><a href="#3、之后运行yum-makecache-fast生成缓存" class="headerlink" title="3、之后运行yum makecache fast生成缓存"></a>3、之后运行yum makecache fast生成缓存</h4><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/05.jpg"  alt=""></p><h4 id="4-安装额外包epel-，选择帮助："><a href="#4-安装额外包epel-，选择帮助：" class="headerlink" title="4.安装额外包epel ，选择帮助："></a>4.安装额外包epel ，选择帮助：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo</span><br></pre></td></tr></table></figure><h3 id="3-6安装常用软件"><a href="#3-6安装常用软件" class="headerlink" title="3.6安装常用软件"></a>3.6安装常用软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install tree vim wget bash-completion bash-completion-extras lrzsz net-tools sysstat iotop iftop htop unzip telnet ntpdate</span><br></pre></td></tr></table></figure><h3 id="3-7配置普通用户sudo权限"><a href="#3-7配置普通用户sudo权限" class="headerlink" title="3.7配置普通用户sudo权限"></a>3.7配置普通用户sudo权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># grep oldboy &#x2F;etc&#x2F;sudoers</span><br><span class="line">oldboy  ALL&#x3D;(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><h3 id="3-8配置-etc-hosts解析"><a href="#3-8配置-etc-hosts解析" class="headerlink" title="3.8配置/etc/hosts解析"></a>3.8配置/etc/hosts解析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line">10.0.1.5 172.16.1.5 lb01</span><br><span class="line">10.0.1.6 172.16.1.6 lb02</span><br><span class="line">10.0.1.7 172.16.1.7 web01</span><br><span class="line">10.0.1.8 172.16.1.8 web02</span><br><span class="line">10.0.1.9 172.16.1.9 web03</span><br><span class="line">10.0.1.31 172.16.1.31 nfs</span><br><span class="line">10.0.1.41 172.16.1.41 backup</span><br><span class="line">10.0.1.51 172.16.1.51 db01</span><br><span class="line">10.0.1.61 172.16.1.61 m01</span><br><span class="line">10.0.1.71 172.16.1.71 zabbix</span><br></pre></td></tr></table></figure><h2 id="4-修改模板机IP、主机名，拍摄快照"><a href="#4-修改模板机IP、主机名，拍摄快照" class="headerlink" title="4.修改模板机IP、主机名，拍摄快照"></a>4.修改模板机IP、主机名，拍摄快照</h2><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/06.jpg"  alt=""></p><h2 id="5-克隆backup服务器"><a href="#5-克隆backup服务器" class="headerlink" title="5.克隆backup服务器"></a>5.克隆backup服务器</h2><h4 id="5-1-backup-41备份服务器"><a href="#5-1-backup-41备份服务器" class="headerlink" title="5.1. backup 41备份服务器"></a>5.1. backup 41备份服务器</h4><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/07.jpg"  alt=""></p><p>设置backup-41</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/08.jpg"  alt=""></p><p>修改backup-41的网卡信息</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/09.jpg"  alt=""></p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/10.jpg"  alt=""></p><p>重启网卡服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>修改主机名为backup</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl <span class="built_in">set</span>-hostname backup</span><br></pre></td></tr></table></figure><h4 id="5-2-NFS-31-服务器克隆"><a href="#5-2-NFS-31-服务器克隆" class="headerlink" title="5.2 NFS 31 服务器克隆"></a>5.2 NFS 31 服务器克隆</h4><p>安装nfs -31服务器</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/11.jpg"  alt=""></p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/12.jpg"  alt=""></p><p>修改nfs -31网卡信息</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/13.jpg"  alt=""></p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/14.jpg"  alt=""></p><p>重启网卡服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>修改主机名为nfs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl <span class="built_in">set</span>-hostname nfs</span><br></pre></td></tr></table></figure><h2 id="6-部署完成给backup和nfs做好快照"><a href="#6-部署完成给backup和nfs做好快照" class="headerlink" title="6.部署完成给backup和nfs做好快照"></a>6.部署完成给backup和nfs做好快照</h2><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/15.jpg"  alt=""></p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/16.jpg"  alt=""></p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/lnmp/17.jpg"  alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="LNMP" scheme="http://linuxwf.com/categories/LNMP/"/>
    
    
      <category term="lnmp" scheme="http://linuxwf.com/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>hexo-tag-dplayer 视频插件</title>
    <link href="http://linuxwf.com/2020/04/11/hexo-tag-dplayer-%E8%A7%86%E9%A2%91%E6%8F%92%E4%BB%B6/"/>
    <id>http://linuxwf.com/2020/04/11/hexo-tag-dplayer-%E8%A7%86%E9%A2%91%E6%8F%92%E4%BB%B6/</id>
    <published>2020-04-11T07:03:00.000Z</published>
    <updated>2020-04-11T07:03:37.287Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer</a> 是 <a href="https://github.com/MoePlayer/DPlayer" target="_blank" rel="noopener">APlayer</a> 播放器的 Hexo 标签插件，可以十分方便地在文章内插入视频播放器。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 hexo-tag-dplayer 插件十分简单，只需要在博客目录执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-dplayer --save</span><br></pre></td></tr></table></figure><p>修改 Hexo 的站点配置文件 <code>_config.yml</code> ，增加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo-tag-dplayer:</span></span><br><span class="line">  <span class="attr">cdn:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.css</span></span><br><span class="line">  <span class="attr">default:</span> </span><br><span class="line">    <span class="attr">api:</span> <span class="string">https://api.prprpr.me/dplayer/</span></span><br><span class="line">    <span class="attr">loop:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">screenshot:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="comment"># 后面还可以接着写其他默认配置</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用 hexo-tag-dplayer 非常简单，只需要在 MarkDown 文件中插入正确的标记就可以了。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer "url=视频地址" %&#125;</span><br></pre></td></tr></table></figure><p>如果还需要其他配置，尽管在上面写就好，详情可以看 [这里] (<a href="https://github.com/MoePlayer/hexo-tag-dplayer)，下面有一个简单的示例可以看一下：" target="_blank" rel="noopener">https://github.com/MoePlayer/hexo-tag-dplayer)，下面有一个简单的示例可以看一下：</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer "url=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.mp4" "addition=https://dplayer.daoapp.io/bilibili?aid=4157142" "api=https://api.prprpr.me/dplayer/" "pic=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.jpg" "id=9E2E3368B56CDBB4" "loop=yes" "theme=#FADFA3" "autoplay=false" "token=tokendemo" %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% dplayer 'url=some.mp4' "id=someid" "api=https://api.prprpr.me/dplayer/" "addition=/some.json" 'code=player.on("loadstart",function()&#123;console.log("loadstart")&#125;)' "autoplay" %&#125;</span><br></pre></td></tr></table></figure><p>附 Dplayer 一些简单的参数列表，注意， Dplayer 的参数仅作为参考，具体请以 <a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer</a> 为准</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>DPlayer 有丰富的参数可以自定义你的播放器实例</p><table><thead><tr><th>名称</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>container</td><td>document.querySelector(‘.dplayer’)</td><td>播放器容器元素</td></tr><tr><td>live</td><td>false</td><td>开启直播模式, 见<a href="http://dplayer.js.org/zh/guide.html#直播" target="_blank" rel="noopener">#直播</a></td></tr><tr><td>autoplay</td><td>false</td><td>视频自动播放</td></tr><tr><td>theme</td><td>‘#b7daff’</td><td>主题色</td></tr><tr><td>loop</td><td>false</td><td>视频循环播放</td></tr><tr><td>lang</td><td>navigator.language.toLowerCase()</td><td>可选值: ‘en’, ‘zh-cn’, ‘zh-tw’</td></tr><tr><td>screenshot</td><td>false</td><td>开启截图，如果开启，视频和视频封面需要允许跨域</td></tr><tr><td>hotkey</td><td>true</td><td>开启热键，支持快进、快退、音量控制、播放暂停</td></tr><tr><td>preload</td><td>‘auto’</td><td>视频预加载，可选值: ‘none’, ‘metadata’, ‘auto’</td></tr><tr><td>volume</td><td>0.7</td><td>默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</td></tr><tr><td>logo</td><td>-</td><td>在左上角展示一个 logo，你可以通过 CSS 调整它的大小和位置</td></tr><tr><td>apiBackend</td><td>-</td><td>自定义获取和发送弹幕行为，见<a href="http://dplayer.js.org/zh/guide.html#直播" target="_blank" rel="noopener">#直播</a></td></tr><tr><td>video</td><td>-</td><td>视频信息</td></tr><tr><td>video.quality</td><td>-</td><td>见<a href="http://dplayer.js.org/zh/guide.html#清晰度切换" target="_blank" rel="noopener">#清晰度切换</a></td></tr><tr><td>video.defaultQuality</td><td>-</td><td>见<a href="http://dplayer.js.org/zh/guide.html#清晰度切换" target="_blank" rel="noopener">#清晰度切换</a></td></tr><tr><td>video.url</td><td>-</td><td>视频链接</td></tr><tr><td>video.pic</td><td>-</td><td>视频封面</td></tr><tr><td>video.thumbnails</td><td>-</td><td>视频缩略图，可以使用 <a href="https://github.com/MoePlayer/DPlayer-thumbnails" target="_blank" rel="noopener">DPlayer-thumbnails</a> 生成</td></tr><tr><td>video.type</td><td>‘auto’</td><td>可选值: ‘auto’, ‘hls’, ‘flv’, ‘dash’, ‘webtorrent’, ‘normal’ 或其他自定义类型, 见<a href="http://dplayer.js.org/zh/guide.html#mse-支持" target="_blank" rel="noopener">#MSE 支持</a></td></tr><tr><td>video.customType</td><td>-</td><td>自定义类型, 见<a href="http://dplayer.js.org/zh/guide.html#mse-支持" target="_blank" rel="noopener">#MSE 支持</a></td></tr><tr><td>subtitle</td><td>-</td><td>外挂字幕</td></tr><tr><td>subtitle.url</td><td><code>required</code></td><td>字幕链接</td></tr><tr><td>subtitle.type</td><td>‘webvtt’</td><td>字幕类型，可选值: ‘webvtt’, ‘ass’，目前只支持 webvtt</td></tr><tr><td>subtitle.fontSize</td><td>‘20px’</td><td>字幕字号</td></tr><tr><td>subtitle.bottom</td><td>‘40px’</td><td>字幕距离播放器底部的距离，取值形如: ‘10px’ ‘10%’</td></tr><tr><td>subtitle.color</td><td>‘#fff’</td><td>字幕颜色</td></tr><tr><td>danmaku</td><td>-</td><td>显示弹幕</td></tr><tr><td>danmaku.id</td><td><code>required</code></td><td>弹幕池 id，必须唯一</td></tr><tr><td>danmaku.api</td><td><code>required</code></td><td>见<a href="http://dplayer.js.org/zh/guide.html#弹幕接口" target="_blank" rel="noopener">#弹幕接口</a></td></tr><tr><td>danmaku.token</td><td>-</td><td>弹幕后端验证 token</td></tr><tr><td>danmaku.maximum</td><td>-</td><td>弹幕最大数量</td></tr><tr><td>danmaku.addition</td><td>-</td><td>额外外挂弹幕，见<a href="http://dplayer.js.org/zh/guide.html#bilibili-弹幕" target="_blank" rel="noopener">#bilibili 弹幕</a></td></tr><tr><td>danmaku.user</td><td>‘DIYgod’</td><td>弹幕用户名</td></tr><tr><td>danmaku.bottom</td><td>-</td><td>弹幕距离播放器底部的距离，防止遮挡字幕，取值形如: ‘10px’ ‘10%’</td></tr><tr><td>danmaku.unlimited</td><td>false</td><td>海量弹幕模式，即使重叠也展示全部弹幕，请注意播放器会记忆用户设置，用户手动设置后即失效</td></tr><tr><td>contextmenu</td><td>[]</td><td>自定义右键菜单</td></tr><tr><td>highlight</td><td>[]</td><td>自定义进度条提示点</td></tr><tr><td>mutex</td><td>true</td><td>互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</td></tr></tbody></table><h2 id="使用弹幕"><a href="#使用弹幕" class="headerlink" title="使用弹幕"></a>使用弹幕</h2><p>上面的示例中已经写了怎么使用弹幕了，使用弹幕首先需要有一个 ID ，建议使用视频的哈希值作为 ID，这样可以尽可能保证 ID 唯一，防止重复，接下来要配置弹幕接口，官方免费的弹幕接口能用，但是不稳定，如果有特殊需求，推荐个人自己搭建弹幕服务器。</p><p>解析 BiliBiLi 弹幕，这个上面的示例也已经有了，同样，免费的服务不一定稳定，有特殊需求的请自己搭建弹幕服务器。</p><p>增加外部弹幕列表，同解析 BiliBiLi 弹幕一样，只要将外部弹幕的地址写进 <code>addition</code> 就可以了。</p><h3 id="bilibili-弹幕"><a href="#bilibili-弹幕" class="headerlink" title="bilibili 弹幕"></a>bilibili 弹幕</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">danmaku.addition</span><br></pre></td></tr></table></figure><p>API: <a href="https://api.prprpr.me/dplayer/v3/bilibili?aid=[aid]" target="_blank" rel="noopener">https://api.prprpr.me/dplayer/v3/bilibili?aid=[aid]</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const option = &#123;</span><br><span class="line">    danmaku: &#123;</span><br><span class="line">        // ...</span><br><span class="line">        addition: [<span class="string">'https://api.prprpr.me/dplayer/v3/bilibili?aid=[aid]'</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="使用字幕"><a href="#使用字幕" class="headerlink" title="使用字幕"></a>使用字幕</h2><p>增加参数 <code>&quot;subtitle=字幕文件地址&quot;</code> 就可以了，如需修改字幕颜色或者字体大小，仿照其他参数写就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Hexo教程" scheme="http://linuxwf.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="http://linuxwf.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Trojan一键安装脚本</title>
    <link href="http://linuxwf.com/2020/04/10/rojan%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
    <id>http://linuxwf.com/2020/04/10/rojan%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</id>
    <published>2020-04-10T06:03:00.000Z</published>
    <updated>2020-04-10T06:06:07.216Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最简单的 Trojan 一键脚本，效率高/速度快/延迟低，系统支持 centos7 /debian9 /ubuntu16 ，完美支持 tls1.3，个人体验速度和延迟都优于 v2ray ws tls1.3，本次的 trojan 一键脚本使用了官方编译的二进制文件，搭建非常快速和简单。脚本中集成了 Trojan 的 Windows 客户端，自动配置证书及启动脚本，安装完成直接下载客户端即可。</p><p><strong>Trojan 面板（Panel）的一键安装脚本已经发布，详情请访问 ：<a href="https://www.v2rayssr.com/trojan-panel-aoto.html" target="_blank" rel="noopener">https://www.v2rayssr.com/trojan-panel-aoto.html</a></strong></p><h2 id="脚本准备及功能"><a href="#脚本准备及功能" class="headerlink" title="脚本准备及功能"></a>脚本准备及功能</h2><ol><li>系统支持 centos7 /debian9 /ubuntu16</li><li>域名解析到 VPS 并生效。</li><li>脚本自动续签 SSL 证书</li><li>自动配置伪装网站，位于/usr/share/nginx/html/目录下，可自行替换其中内容</li><li>请不要在任何<strong>生产环境</strong>使用一键脚本，此条适用于本站所有脚本，专门用来科学上网的 VPS 可以随意使用。</li></ol><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/20200410135451.png"  alt=""></p><h2 id="Trojan-和-v2ray-ws-tls-对比"><a href="#Trojan-和-v2ray-ws-tls-对比" class="headerlink" title="Trojan 和 v2ray ws tls 对比"></a>Trojan 和 v2ray ws tls 对比</h2><p>下面有两张图，可以看出 Trojan 和 v2ray ws tls 还有有一些区别的。但是，由于 Trojan 还算是新兴产物，一些客户端的匹配还没有那么完善，所以，选择哪种方式，就萝卜青菜了。</p><p>下面的图片来源 YouTube 洋葱</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/20200410135527.png"  alt=""></p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/20200410135548.png"  alt=""></p><h2 id="一键脚本代码"><a href="#一键脚本代码" class="headerlink" title="一键脚本代码"></a>一键脚本代码</h2><p>此脚本感谢 atrandys</p><p>Github 项目地址：<a href="https://www.v2rayssr.com/go?url=https://github.com/atrandys/trojan" target="_blank" rel="noopener">点击访问</a></p><p>波仔在 atrandys 的基础之上，合成了 4 IN 1 的一个 BBRPLUS 加速脚本，方便大家使用</p><p>安装好 curl，若是有此环境，请跳过</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update -y &amp;&amp; apt-get install curl -y    <span class="comment">##Ubuntu/Debian 系统安装 Curl 方法</span></span><br><span class="line">yum update -y &amp;&amp; yum install curl -y            <span class="comment">##Centos 系统安装 Curl 方法</span></span><br></pre></td></tr></table></figure><p>有些 VPS 需要安装 <code>XZ</code> 压缩工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install xz-utils   <span class="comment">#Debian/Ubuntu 安装 XZ 压缩工具命令</span></span><br><span class="line">yum install xz    <span class="comment">#CentOS 安装 XZ 压缩工具</span></span><br></pre></td></tr></table></figure><p>Trojan 一键脚本代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://github.com/V2RaySSR/Trojan/raw/master/Trojan.sh)</span><br></pre></td></tr></table></figure><h2 id="下载-Trojan-Windows-Mac-客户端"><a href="#下载-Trojan-Windows-Mac-客户端" class="headerlink" title="下载 Trojan Windows/Mac 客户端"></a>下载 Trojan Windows/Mac 客户端</h2><p>安装完成后，会展示一条下载地址，复制地址，并下载下来即可。</p><p>Trojan Windows 客户端：<a href="https://www.v2rayssr.com/go?url=https://github.com/V2RaySSR/Trojan/raw/master/trojan-client.zip" target="_blank" rel="noopener">点击下载</a></p><h2 id="搭配-Chrome-浏览器插件使用"><a href="#搭配-Chrome-浏览器插件使用" class="headerlink" title="搭配 Chrome 浏览器插件使用"></a>搭配 Chrome 浏览器插件使用</h2><blockquote><p>chrome socks5 插件：<a href="https://www.v2rayssr.com/go?url=https://github.com/V2RaySSR/Trojan/raw/master/SwitchyOmega_Chromium.zip" target="_blank" rel="noopener">SwitchyOmega_Chromium</a> 不要解压 直接拖放这个插件到 chrome 扩展程序页面</p></blockquote><p>安装插件，打开 chrome，打开扩展程序，将下载的插件拖动到扩展程序页面，添加到扩展。</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/20200410135748.png"  alt=""></p><p>完成添加，会跳转到 switchyomega 页面，点跳过教程，然后点击 proxy，如图填写，最后点击应用选项。</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/20200410135828.png"  alt=""></p><p>然后进入 auto switch，删除最上方两条规则，然后点击添加规则列表。</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/20200410135907.png"  alt=""></p><p>然后，在规则列表规则中，情景模式改为 proxy，规则列表网站复制下面的网址，然后点击立即更新情景模式，保存即可。</p><blockquote><p><a href="https://www.v2rayssr.com/go?url=http://$" target="_blank" rel="noopener">http://$</a>{your_domain}/trojan.txt  服务器为你生成的网络地址</p></blockquote><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/20200410135941.png"  alt=""></p><p>点击 chrome 右上角 switchyomega 图标，选择 auto switch 模式即可。</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/20200410140029.png"  alt=""></p><p>之后你便可以自由上网，教程到此结束。</p><h2 id="电脑上其他软件如何使用-Trojan"><a href="#电脑上其他软件如何使用-Trojan" class="headerlink" title="电脑上其他软件如何使用 Trojan"></a><strong>电脑上其他软件如何使用 Trojan</strong></h2><blockquote><p>1、如果软件支持配置 socks5，直接指向 <code>127.0.0.1：1080</code> 即可。</p><p>2、如果软件不支持配置 socks5，可选择 <code>sstap/sockscap64/supercap</code>等软件，曲线实现代理。</p></blockquote><h2 id="服务端怎么修改密码"><a href="#服务端怎么修改密码" class="headerlink" title="服务端怎么修改密码"></a>服务端怎么修改密码</h2><p><code>trojan</code> 服务端配置文件路径如下，如需修改内容，修改以下文件即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/src/trojan/server.conf</span><br></pre></td></tr></table></figure><p>修改完成后，重启 trojan 服务端即可，同时客户端的密码也要同步修改哦。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart trojan</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="科学上网" scheme="http://linuxwf.com/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
      <category term="vpn" scheme="http://linuxwf.com/tags/vpn/"/>
    
      <category term="trojan" scheme="http://linuxwf.com/tags/trojan/"/>
    
  </entry>
  
  <entry>
    <title>BBR PLUS一键安装实现Shadowsocks暴力加速</title>
    <link href="http://linuxwf.com/2020/04/10/BBR-PLUS%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E5%AE%9E%E7%8E%B0Shadowsocks%E6%9A%B4%E5%8A%9B%E5%8A%A0%E9%80%9F/"/>
    <id>http://linuxwf.com/2020/04/10/BBR-PLUS%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E5%AE%9E%E7%8E%B0Shadowsocks%E6%9A%B4%E5%8A%9B%E5%8A%A0%E9%80%9F/</id>
    <published>2020-04-10T05:50:00.000Z</published>
    <updated>2020-04-10T05:51:01.693Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>魔改版BBR可以使VPS实现加速，但是原版(v1.1.7)偶尔会出现高丢包率下易失速以及bbr收敛慢的问题。最新版BBR PLUS修正版可以更好的实现加速效果。下面就是魔改BBR PLUS修正版一键安装步骤。</p><p>安装环境：</p><ul><li>CentOS 7.5 x64</li><li>网络：联通、电信环境测试；</li></ul><h2 id="安装Shadowsocks"><a href="#安装Shadowsocks" class="headerlink" title="安装Shadowsocks"></a>安装Shadowsocks</h2><p>在部署BBR之前，我们先安装一下Shadowsocks，安装过程请参考之前的文章：<a href="https://www.gz1903.club/2019/11/09/Linux科学上网搭建/" target="_blank" rel="noopener">在CENTOS 7上搭建Shadowsocks图文教程</a>；</p><h2 id="一键安装BBR-PLUS修正版"><a href="#一键安装BBR-PLUS修正版" class="headerlink" title="一键安装BBR PLUS修正版"></a>一键安装BBR PLUS修正版</h2><p>依次执行下面的命令：</p><h3 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure><h3 id="执行BBR-PLUS修正版一键脚本"><a href="#执行BBR-PLUS修正版一键脚本" class="headerlink" title="执行BBR PLUS修正版一键脚本"></a>执行BBR PLUS修正版一键脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate <span class="string">"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh"</span> &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><p>如下图所示，先输入<code>2</code>，安装 BBRplus版内核，安装完之后重启系统，再运行脚本，输入<code>7</code>，使用BBRplus版加速，一键安装：</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/20200410134529.png"  alt=""></p><p>安装之后的效果：</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/20200410134619.png"  alt=""></p><blockquote><p>Openvz 的机子装不了锐速</p></blockquote><h2 id="确定虚拟化技术"><a href="#确定虚拟化技术" class="headerlink" title="确定虚拟化技术"></a>确定虚拟化技术</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/code/master/vm_check.sh &amp;&amp; bash vm_check.sh</span><br></pre></td></tr></table></figure><p>代码运行结束就会在最后一行显示虚拟化技术： kvm 还是 openv 或者是 xen 一目了然。</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/20200410134743.png"  alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="科学上网" scheme="http://linuxwf.com/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
      <category term="bbr加速" scheme="http://linuxwf.com/tags/bbr%E5%8A%A0%E9%80%9F/"/>
    
      <category term="vpn" scheme="http://linuxwf.com/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>PicGo  一款免费高效的图床管理工具</title>
    <link href="http://linuxwf.com/2020/04/10/PicGo-%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E9%AB%98%E6%95%88%E7%9A%84%E5%9B%BE%E5%BA%8A%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://linuxwf.com/2020/04/10/PicGo-%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E9%AB%98%E6%95%88%E7%9A%84%E5%9B%BE%E5%BA%8A%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</id>
    <published>2020-04-10T05:30:00.000Z</published>
    <updated>2020-04-10T05:33:11.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="PicGo介绍"><a href="#PicGo介绍" class="headerlink" title="PicGo介绍"></a>PicGo介绍</h1><h2 id="应用概述"><a href="#应用概述" class="headerlink" title="#应用概述"></a><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#应用概述" target="_blank" rel="noopener">#</a>应用概述</h2><p><strong>PicGo: 一个用于快速上传图片并获取图片URL链接的工具</strong></p><p>PicGo 本体支持如下图床：</p><ul><li><code>微博图床</code> v1.0 <strong>微博图床从 2019 年 4 月开始进行防盗链，不建议继续使用</strong></li><li><code>七牛图床</code> v1.0</li><li><code>腾讯云 COS v4\v5版本</code> v1.1 &amp; v1.5.0</li><li><code>又拍云</code> v1.2.0</li><li><code>GitHub</code> v1.5.0</li><li><code>SM.MS</code> v1.5.1 <strong>由于官方不再支持V1版本，暂时请使用<a href="https://github.com/xlzy520/picgo-plugin-smms-user" target="_blank" rel="noopener">smms-user</a>插件</strong></li><li><code>阿里云 OSS</code> v1.6.0</li><li><code>Imgur</code> v1.6.0</li></ul><p><strong>本体不再增加默认的图床支持。你可以自行开发第三方图床插件。详见 <a href="https://picgo.github.io/PicGo-Core-Doc/" target="_blank" rel="noopener">PicGo-Core</a></strong>。</p><h2 id="特色功能"><a href="#特色功能" class="headerlink" title="#特色功能"></a><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#特色功能" target="_blank" rel="noopener">#</a>特色功能</h2><ul><li>支持拖拽图片上传</li><li>支持快捷键上传剪贴板里第一张图片</li><li>Windows和macOS支持右键图片文件通过菜单上传 (v2.1.0+)</li><li>上传图片后自动复制链接到剪贴板</li><li>支持自定义复制到剪贴板的链接格式</li><li>支持修改快捷键，默认快速上传快捷键：<code>command+shift+p</code>（macOS）| <code>control+shift+p</code>（Windows\Linux)</li><li>支持插件系统，已有插件支持Gitee、青云等第三方图床<ul><li>更多第三方插件以及使用了 PicGo 底层的应用可以在 <a href="https://github.com/PicGo/Awesome-PicGo" target="_blank" rel="noopener">Awesome-PicGo</a> 找到。欢迎贡献！</li></ul></li><li>支持通过发送HTTP请求调用 PicGo 上传（v2.2.0+)</li><li>更多功能等你自己去发现，同时也会不断开发新功能<ul><li>开发进度可以查看 <a href="https://github.com/Molunerfinn/PicGo/projects" target="_blank" rel="noopener">Projects</a>，会同步更新开发进度</li><li>欢迎加入<a href="https://gitter.im/picgo-all/PicGo?utm_source=share-link&utm_medium=link&utm_campaign=share-link" target="_blank" rel="noopener">官方Gitter频道</a>与我交流</li></ul></li></ul><p><strong>如果第一次使用，请参考应用<a href="https://picgo.github.io/PicGo-Doc/zh/guide/getting-started.html" target="_blank" rel="noopener">使用文档</a>。遇到问题了还可以看看 <a href="https://github.com/Molunerfinn/PicGo/blob/dev/FAQ.md" target="_blank" rel="noopener">FAQ</a> 以及被关闭的 <a href="https://github.com/Molunerfinn/PicGo/issues?q=is%3Aissue+is%3Aclosed" target="_blank" rel="noopener">issues</a>。</strong></p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="#下载安装"></a><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#下载安装" target="_blank" rel="noopener">#</a>下载安装</h2><p>点击此处下载<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">应用</a>。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="#Windows"></a><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#windows" target="_blank" rel="noopener">#</a>Windows</h3><p>Windows 用户请下载最新版本的 <code>exe</code> 文件。</p><p><strong>还可以使用 <a href="https://scoop.sh/" target="_blank" rel="noopener">Scoop</a> 来安装 PicGo: <code>scoop bucket add helbing https://github.com/helbing/scoop-bucket</code> &amp; <code>scoop install picgo</code>。 感谢 @helbing 的贡献！</strong></p><p><strong>还可以使用 <a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey</a> 来安装 PicGo: <code>choco install picgo</code>。 感谢 @iYato 的贡献！</strong></p><h3 id="macOS"><a href="#macOS" class="headerlink" title="#macOS"></a><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#macos" target="_blank" rel="noopener">#</a>macOS</h3><p>macOS 用户请下载最新版本的 <code>dmg</code> 文件。</p><p><strong>还可以使用 <code>brew cask</code> 来安装 PicGo: <code>brew cask install picgo</code>。感谢 @womeimingzi11 的贡献！</strong></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="#Linux"></a><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#linux" target="_blank" rel="noopener">#</a>Linux</h3><p>Linux用户请下载 <code>AppImage</code> 文件。</p><p><strong>如果你是 Arch 类的 Linux 用户，可以直接通过 <code>aurman -S picgo-appimage</code> 来安装 PicGo。感谢 @houbaron 的贡献！</strong></p><h2 id="应用截图"><a href="#应用截图" class="headerlink" title="#应用截图"></a><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#应用截图" target="_blank" rel="noopener">#</a>应用截图</h2><p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/Molunerfinn/test/master/picgo/picgo-2.0.gif"  alt="img"></p><p><img src="/" class="lazyload" data-src="https://user-images.githubusercontent.com/12621342/34242310-b5056510-e655-11e7-8568-60ffd4f71910.gif"  alt="picgo-menubar"></p><h1 id="七牛图床"><a href="#七牛图床" class="headerlink" title="七牛图床"></a>七牛图床</h1><p>官网地址：<a href="https://link.zhihu.com/?target=https%3A//portal.qiniu.com/signup%3Fcode%3D1h9fi8kw6w0nm">https://portal.qiniu.com</a></p><p>简介：注册认证后有10G永久免费空间，每月10G国内和10G国外流量，速度相当快，七牛云是国内专业CDN服务商，插件支持比较多，有免费ssl证书，但https流量收费</p><p><strong>注意：七牛云30天后会回收测试域名，因此你必须要绑定自己的已备案的域名</strong></p><p>图片上传限制：无</p><h4 id="注册七牛"><a href="#注册七牛" class="headerlink" title="注册七牛"></a>注册七牛</h4><ul><li>打开七牛首页，点击右上角“注册有礼”</li></ul><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/image-20200410094652881.png"  alt=""></p><ul><li>选择“申请个人认证”</li></ul><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/image-20200410094841789.png"  alt=""></p><ul><li>填写基本信息（注意：个人网站可以填你的域名，没有就随便填一个；请填写真实姓名，因为后面要实名认证）</li><li>按要求完成实名认证（这里我选择支付宝）</li></ul><h2 id="新建图床Bucket"><a href="#新建图床Bucket" class="headerlink" title="新建图床Bucket"></a>新建图床Bucket</h2><ul><li>新建图床：点击“资源主页”，在对象存储下点“立即添加”</li></ul><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/image-20200410095411823.png"  alt=""></p><ul><li>设置存储空间名，存储服务器（选一个离你最近的），访问控制设置为公开</li></ul><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/image-20200410100009396.png"  alt=""></p><ul><li>添加自己的域名</li></ul><p>默认有个七牛云CDN加速域名，我这里就使用了自己的域名，也可以使用七牛云给的CDN测试域名，不过就是一个月的时间，到期了会回收的，所以这里还是建议使用自己的，以免用了以后图片啥的地址就没了。</p><p>步骤：也是在自己的域名厂商解析个CNAME，根据七牛给的记录来解析即可。</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/20200410131513.png"  alt=""></p><ul><li>登陆自己的服务器厂商，添加对应的CNAME解析记录</li></ul><h1 id="使用PicGo添加图片"><a href="#使用PicGo添加图片" class="headerlink" title="使用PicGo添加图片"></a>使用PicGo添加图片</h1><h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/20200410131649.png"  alt=""></p><p>其中<code>accesskey</code>和<code>secretkey</code>可以从“个人中心”-“密钥管理”里面找到</p><p>在配置文件里，存储区域对应的键是<code>area</code>，值是下图所示（如果你是用PicGo-Core或者其他非electron版本的PicGo请注意此项），比如华东的话就是<code>z0</code>。</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/image-20200410103456888.png"  alt=""></p><p>在配置文件里，存储空间需要</p><p>设定上传地址是指七牛云 自动分配给你的网址，或者 是你自己绑定的域名（<strong>注意要加<code>http://</code>或者<code>https://</code></strong>）：</p><p>网址后缀通常是你用到了七牛的图片处理工具的时候会用到的一些处理参数，比如图片瘦身。</p><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p>图片上传前可以先使用在线压缩工具 <a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a> 进行压缩大小</p><p>这里我选择<code>markdown</code>模式</p><p>拖拽上传图片：点开上传区，拖进来就可以上传了（可以批量上传），上传完后自动生成markdown格式的网址到剪切板，可以直接粘贴到博文：</p><p><img src="/" class="lazyload" data-src="http://cdn.linuxwf.com/img/image-20200410105706598.png"  alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Hexo教程" scheme="http://linuxwf.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="picgo" scheme="http://linuxwf.com/tags/picgo/"/>
    
      <category term="七牛云图床" scheme="http://linuxwf.com/tags/%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>V2Ray搭建详细图文教程</title>
    <link href="http://linuxwf.com/2020/04/10/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B/"/>
    <id>http://linuxwf.com/2020/04/10/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B/</id>
    <published>2020-04-10T04:18:00.000Z</published>
    <updated>2020-04-10T05:34:06.469Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>搭建 V2Ray 看这篇文章就够了！这是完完全全为小白准备的 V2Ray 搭建教程，详细的图文教程确保你可以百分百成功搭建 V2Ray 使用。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此 V2Ray 教程完完全全是为小白准备的，从购买 VPS 到使用 SSH 登录并使用 V2Ray 一键安装脚本配置 V2Ray，详细的图文教程确保你可以百分百成功搭建 V2Ray 使用，哪怕你只是一个小白。<br>由于 V2Ray 的配置对于小白来说是非常不友好的，所以此 V2Ray 教程的 V2Ray 服务器端配置将会使用我本人撰写的 <a href="https://github.com/233boy/v2ray/wiki/V2Ray一键安装脚本" target="_blank" rel="noopener">V2Ray 一键安装脚本</a>，这是一个对小白友好的 V2Ray 一键脚本，简化 V2Ray 安装和部署，并且自动开启 BBR 优化，当然你也可以手动打开 BBR 来优化 V2Ray，也可以选择使用锐速来 优化 V2Ray。</p><h2 id="V2Ray-简介"><a href="#V2Ray-简介" class="headerlink" title="V2Ray 简介"></a>V2Ray 简介</h2><p>官网：<a href="https://www.v2ray.com/" target="_blank" rel="noopener">https://www.v2ray.com</a></p><p><a href="https://www.v2ray.com/" target="_blank" rel="noopener">V2Ray(Project V)</a> 相对于 Shadowsocks，V2Ray 更像全能选手，拥有更多可选择的协议 / 传输载体 (Socks、HTTP、TLS、TCP、mKCP、WebSocket )，还有强大的路由功能，不仅仅于此，它亦包含 Shadowsocks 组件，你只需要安装 V2Ray，你就可以使用所有的 V2Ray 相关的特性包括使用 Shadowsocks，由于 V2Ray 是使用 GO 语言所撰写的，天生的平台部署优势，下载即可使用，当然啦，由于 V2Ray 的配置相对来说是很繁琐的，毫无夸张的说，但是有了本人所写的 <a href="https://github.com/233boy/v2ray/wiki/V2Ray一键安装脚本" target="_blank" rel="noopener">V2Ray 一键安装脚本</a> 加持下，使用 V2Ray 便会显得轻松多了。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>总结一下此文章的大致流程，此 V2Ray 教程可百分百帮助你搭建 V2Ray 使用。哪怕你只是一个小白。</p><ul><li>购买一个 VPS<br>想要搭建 V2Ray，就必须要拥有一台 VPS。</li><li>获取 VPS 信息<br>我们必须要知道 VPS IP 地址，root 用户密码，SSH 端口</li><li>安装 Xshell<br>Xshell 是一个 SSH 客户端，要登录 VPS，当然需要 SSH 客户端</li><li>登录 VPS<br>使用 Xshell 配置 VPS SSH 信息，然后登录</li><li>安装 V2Ray<br>安装过程你可以随意选择你喜欢的传输协议或者配置 Shadowsocks</li><li>V2Ray 安装完成<br>此时你可以使用客户端配置 V2Ray 使用了</li><li>V2Ray 高级玩法<br>配置 WebSocket + TLS ， HTTP/2 ， mKCP 等</li></ul><h2 id="购买一个云主机"><a href="#购买一个云主机" class="headerlink" title="购买一个云主机"></a>购买一个云主机</h2><p>想要搭建 V2Ray， 拥有一个 VPS 是必需的。<br>我们推荐使用：<a href="https://on.affpass.com/go/bwg" target="_blank" rel="noopener">搬瓦工（Bandwagon Host）</a> VPS 来搭建 V2Ray，搬瓦工是一个对中国用户极度友好的 VPS 商家，有香港，CN2 GIA 等线路，支持支付宝付款，当然也是支持退款的！</p><p>哪个套餐好？<br>一般来说，<strong>推荐购买 香港线路</strong> 或 <strong>CN2 GIA 线路</strong>，或者哪个便宜选择那个，说着当然如果你使用量比较多或者想要分享给同学和朋友一起用的话，选择合适的套餐即可。又或者你土豪的话，选择最贵的也行。</p><p><strong>VPS 速度：香港线路 &gt; CN2 GIA 线路 &gt; CN2 线路 &gt; 普通线路</strong></p><p><strong>香港套餐 VPS 的速度最快。</strong> 如果你非常在乎速度的话，建议购买香港线路的 VPS，当然，但价格贵，流量相对其他套餐来说也是比较少的……退一步的选择是 CN2 GIA 线路，这个线路的速度也比较好。</p><p>线路是比较重要的，像香港和 CN2 GIA 线路到晚上一般不会怎么炸，其他的到了晚上可能会出现很慢慢的感觉。</p><p>我本人比较推荐 CN2 GIA 线路，稳定性，速度与价格适中选择，当然啦！如果你觉得价格太贵了，推荐你查看一下<a href="https://justmysocks.xyz/buy-justmysocks/" target="_blank" rel="noopener"> Just My Socks </a>，搬瓦工官方出品的代理服务，同样是 CN2 GIA 线路，<strong>每月仅需 $2.88 起！</strong>并且支持退款，放心无忧，再也不用自己折腾搭建了，<strong>最最最最重要的是：被墙自动换 IP，无须担心 IP 被墙！</strong><br>Just My Socks 购买教程在这里：<a href="https://justmysocks.xyz/buy-justmysocks/" target="_blank" rel="noopener"> Just My Socks 详细图文购买教程</a></p><p>毫无疑问！绝对的一分钱一分货。</p><blockquote><p>如果出现 out of stock 这样的提示，那就是这个套餐卖完了，选择其他套餐即可。</p></blockquote><p>本博主这里我使用了谷歌云主机，主要是注册用户免费送300$，可以用一年,刚刚好！</p><p>具体购买方法这里就不赘述了，网上一大把教程</p><h2 id="安装-V2Ray"><a href="#安装-V2Ray" class="headerlink" title="安装 V2Ray"></a>安装 V2Ray</h2><p>输入下面命令回车，你可以复制过去，然后在 Xshell 界面按 Shift + Insert 即可粘贴，不能按 Ctrl + V 的。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https:&#x2F;&#x2F;git.io&#x2F;v2ray.sh)</span><br></pre></td></tr></table></figure><blockquote><p>如果提示 curl: command not found ，那是因为你的 VPS 没装 Curl<br>ubuntu/debian 系统安装 Curl 方法: <code>apt-get update -y &amp;&amp; apt-get install curl -y</code><br>centos 系统安装 Curl 方法: <code>yum update -y &amp;&amp; yum install curl -y</code><br>安装好 curl 之后就能安装脚本了</p></blockquote><p>然后选择安装，即是输入 1 回车<br>选择传输协议，如果没有特别的需求，使用默认的 TCP 传输协议即可，直接回车<br>选择端口，如果没有特别的需求，使用默认的端口即可，直接回车<br>是否屏蔽广告，除非你真的需要，一般来说，直接回车即可</p><p><img src="/" class="lazyload" data-src="https://camo.githubusercontent.com/734eac925355bc405fcc603dc6d44956153061b6/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323463666530352e6a7067"  alt="安装 V2Ray"></p><p>是否配置 Shadowsocks ，如果不需要就直接回车，否则就输入 Y 回车<br>Shadowsocks 端口，密码，加密方式这些东西自己看情况配置即可，我个人当然是全部直接回车。。<br>OK，按回车继续</p><p><img src="/" class="lazyload" data-src="https://camo.githubusercontent.com/eec1b155bc310b7aaa33ae727a011a2a8625bf00/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323461643131632e6a7067"  alt="配置 Shadowsocks"></p><p>安装信息，如果确保没有什么问题了，按回车继续</p><p><img src="/" class="lazyload" data-src="https://camo.githubusercontent.com/3b7eddf949a9d8aec9a04ae19a7bd49991817085/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323438636133652e6a7067"  alt="安装信息"></p><p>(备注，安装信息会因你的配置而变化..不用在乎这截图)<br>(备注，由于我懒…脚本显示的一些信息可能会跟上面的截图有少许不同，但实际上都是很简单明了的)</p><h2 id="V2Ray-安装完成"><a href="#V2Ray-安装完成" class="headerlink" title="V2Ray 安装完成"></a>V2Ray 安装完成</h2><p>OK，此时 V2Ray 已经安装完成了。</p><p><img src="/" class="lazyload" data-src="https://camo.githubusercontent.com/85637928f4e109419ff40c8c219adf6684424a4b/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323462626437352e6a7067"  alt="V2Ray 安装完成"></p><p>如上图所示，V2Ray 配置信息，Shadowsocks 配置信息都有了<br>如果你使用过 Shadowsocks ，那么现在你可以测试一下 Shadowsocks 配置了，看看是否能正常使用。<br>如果你使用过 V2Ray 某些客户端，那么现在也可以测试一下配置了。<br>(备注，可能某些 V2Ray 客户端的选项或描述略有不同，但事实上，上面的 V2Ray 配置信息已经足够详细，由于客户端的不同，请对号入座。)</p><h2 id="V2Ray-客户端使用教程"><a href="#V2Ray-客户端使用教程" class="headerlink" title="V2Ray 客户端使用教程"></a>V2Ray 客户端使用教程</h2><p>暂停一下，我想，看这篇的孩子多数都是萌新，由于 V2Ray 已经安装完成了，所以此时你应该尝试使用 V2Ray 来连接上真正的互联网了。</p><blockquote><p>Windows<br><a href="https://github.com/233boy/v2ray/wiki/V2RayN使用教程" target="_blank" rel="noopener">V2RayN使用教程</a></p></blockquote><h2 id="V2Ray-管理面板"><a href="#V2Ray-管理面板" class="headerlink" title="V2Ray 管理面板"></a>V2Ray 管理面板</h2><p>现在可以尝试一下输入 <code>v2ray</code> 回车，即可管理 V2Ray</p><p><img src="/" class="lazyload" data-src="https://camo.githubusercontent.com/f440719cf368dc6b6586a93afc90a4c45bede3dc/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323463363036652e6a7067"  alt="V2Ray 管理面板"></p><h2 id="TCP-阻断"><a href="#TCP-阻断" class="headerlink" title="TCP 阻断"></a>TCP 阻断</h2><p>如果你觉得你的小鸡出现了这种情况，那么可以尝试使用 UDP 协议相关的 mKCP<br>当然，用了我的脚本那是很简单的啦，直接输入 <code>v2ray config</code> 然后选择修改 V2Ray 传输协议<br>之后再选择 mKCP 相关的就行咯<br>备注：使用 mKCP 或许还可以提高速度，但由于 UDP 的原因也许会被运营商 Qos，这是无解的。</p><h2 id="快速管理-V2Ray"><a href="#快速管理-V2Ray" class="headerlink" title="快速管理 V2Ray"></a>快速管理 V2Ray</h2><p><code>v2ray info</code> 查看 V2Ray 配置信息<br><code>v2ray config</code> 修改 V2Ray 配置<br><code>v2ray link</code> 生成 V2Ray 配置文件链接<br><code>v2ray infolink</code> 生成 V2Ray 配置信息链接<br><code>v2ray qr</code> 生成 V2Ray 配置二维码链接<br><code>v2ray ss</code> 修改 Shadowsocks 配置<br><code>v2ray ssinfo</code> 查看 Shadowsocks 配置信息<br><code>v2ray ssqr</code> 生成 Shadowsocks 配置二维码链接<br><code>v2ray status</code> 查看 V2Ray 运行状态<br><code>v2ray start</code> 启动 V2Ray<br><code>v2ray stop</code> 停止 V2Ray<br><code>v2ray restart</code> 重启 V2Ray<br><code>v2ray log</code> 查看 V2Ray 运行日志<br><code>v2ray update</code> 更新 V2Ray<br><code>v2ray update.sh</code> 更新 V2Ray 管理脚本<br><code>v2ray uninstall</code> 卸载 V2Ray</p><h2 id="优化-V2Ray"><a href="#优化-V2Ray" class="headerlink" title="优化 V2Ray"></a>优化 V2Ray</h2><p>由于本人的脚本在 Debian9 系统会自动开启 BBR 优化加速了，所以不需要再安装 BBR 优化了，<br>如果你还是觉得网络比较慢的话，你可以尝试使用含有 mKCP 的传输协议，这个 mKCP 的东东，简单一点说就像 Kcptun 一样加速，并且还能进行伪装 (可选)，但是由于 mKCP 是使用 UDP 协议的，也许运营商会限速得更加厉害，网络变得更加慢。但不管怎么样，你都可以随时尝试一下。<br>服务器输入 <code>v2ray config</code> 回车，然后选择 修改 V2Ray 传输协议，再接着选择 mKCP 相关的传输协议即可<br>如果你是使用其他商家的 VPS 并且是按照此教程流程来安装 V2Ray 的话，那么你可以输入 <code>v2ray bbr</code> 回车，然后选择安装 BBR 或者 锐速 来优化 V2Ray<br>只是还想再啰嗦一下，如果你是使用国际大厂的 VPS，并且是按照此教程流程来安装 V2Ray 的话，请自行在安全组 (防火墙) 开放端口和 UDP 协议 (如果你要使用含有 mKCP 的传输协议)</p><h2 id="WebSocket-TLS"><a href="#WebSocket-TLS" class="headerlink" title="WebSocket + TLS"></a>WebSocket + TLS</h2><p>实现 WebSocket + TLS 超级无敌简单，前提是要拥有一个能正常解析的域名 (并且知道怎么解析域名)<br>服务器输入 <code>v2ray config</code> 回车，然后选择 修改 V2Ray 传输协议，再选择 WebSocket + TLS，即是输入 4，接着输入你的域名，然后我都懒得说了，脚本都那么简单明了，我还瞎BB干嘛…<br>哈哈…可能有不少人在折腾 V2Ray 实现 WS + TLS 的时候真的是搞到很蛋痛咯，有些人的教程可能说得不是很清楚，或者是直接忽略小白萌新这些亲爱的用户，嗯，小白们好好加油吧，请尽量多学一些基础知识，别总是做伸手党，对于毫无交集的陌生人，人家并没有任何义务要帮你的啊<br>偷偷跟你说…使用 WebSocket + TLS 会有断流的问题<br>多说一句，不要被某些人带节奏，WS + TLS 并不是 V2Ray 的神级配置，该墙还是会墙，墙你不需要理由<br>备注一下啦，这里我没写怎么教你注册域名啦，怎么解析域名啦，如果你真的想要使用 WebSocket + TLS，那就 自己谷歌摸索一下，其实好简单的啦！<br>我本人并没有在使用 WS + TLS (WebSocket + TLS)，我用 TCP，就是用一键脚本全程回车的那种懒人</p><h2 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h2><p>实现 HTTP/2 (h2) 也超级无敌简单，和 WebSocket + TLS 一样，也就是只要一个域名就够<br>服务器输入 <code>v2ray config</code> 回车，然后选择 修改 V2Ray 传输协议，再选择 HTTP/2，即是输入 16，然后………看上面的 WebSocket + TLS 的相关。<br>备注一下，HTTP/2 相比 WS + TLS (WebSocket + TLS) ，在浏览网页时有一些优势。速度是差不多的啦</p><h2 id="mKCP"><a href="#mKCP" class="headerlink" title="mKCP"></a>mKCP</h2><p>mKCP 这个东东其实就是 KCP 协议，反正你知道是能提速的就行，但是不保证都能提速，还能避免 TCP 阻断，但是也可以会被运营商 Qos.<br>使用方法：服务器输入 <code>v2ray config</code> 回车，然后选择 修改 V2Ray 传输协议，之后再选择 mKCP 相关的就行</p><h2 id="搬瓦工-VPS-速度慢"><a href="#搬瓦工-VPS-速度慢" class="headerlink" title="搬瓦工 VPS 速度慢"></a>搬瓦工 VPS 速度慢</h2><p>由于本教程使用了 搬瓦工 VPS 做为教程的一部分，那么相信有些新接触 VPS 的同学可能会是按照教程使用了 搬瓦工 VPS 翻墙。<br>如果你觉得搬瓦工 VPS 速度慢，你可以尝试修改一下端口，服务器输入 <code>v2ray config</code> ，，然后选择 修改 V2Ray 端口 即可，建议使用常见的端口，比如说 443，当然，为了更加安全隐蔽，你可以直接尝试使用 WebSocket + TLS 或者 HTTP/2 协议，但是使用这两个协议对于没有接触过 域名 的同学相对来说会是比较困难的。<br>搬瓦工 VPS 速度慢的一个主要原因可能会是因为端口限速，如果你已经修改端口为 443，速度还是慢的话，我建议你尝试使用 mKCP 协议。</p><h2 id="Telegram-专用代理"><a href="#Telegram-专用代理" class="headerlink" title="Telegram 专用代理"></a>Telegram 专用代理</h2><blockquote><p>重要提醒：不建议使用 V2Ray 的 MTProto 代理！<br>推荐使用： <a href="https://github.com/cutelua/mtg-dist" target="_blank" rel="noopener">https://github.com/cutelua/mtg-dist</a></p></blockquote><p><del>如果你在使用 Telegram 的话，你可以配置一个 Telegram 的专用代理，这样来，在某些情况下你就不需要再开一个代理软件了。<br>输入 <code>v2ray tg</code> 即可配置 TG 专用代理<br>配置 Telegram MTProto</del></p><p><img src="/" class="lazyload" data-src="https://camo.githubusercontent.com/76790417fd184b9156d04f34d0020cf42e950ec9/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323438656137342e6a7067"  alt="配置Telegram MTProto"></p><p>Telegram MTProto 配置信息</p><p><img src="/" class="lazyload" data-src="https://camo.githubusercontent.com/f95d1c5bbe481b175defd9768972498250c7bef4/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323438613130662e6a7067"  alt="Telegram MTProto 配置信息"></p><h2 id="V2Ray-多用户"><a href="#V2Ray-多用户" class="headerlink" title="V2Ray 多用户"></a>V2Ray 多用户</h2><p>目前此 V2Ray 一键脚本只支持配置一个 V2Ray 账号…一个 Shadowsocks 账号<br>说着当然，如果你是大佬，配置 多用户 这种事，不是分分钟的事么？</p><h2 id="查看配置-修改配置-端口-传输协议……-？"><a href="#查看配置-修改配置-端口-传输协议……-？" class="headerlink" title="查看配置 / 修改配置 / 端口 / 传输协议…… ？"></a>查看配置 / 修改配置 / 端口 / 传输协议…… ？</h2><p>请看上面的快速管理。。。或者直接输入 <code>v2ray</code> 回车，找到你想要执行的功能。</p><h2 id="哪个传输协议好？"><a href="#哪个传输协议好？" class="headerlink" title="哪个传输协议好？"></a>哪个传输协议好？</h2><p>心中无杂念，用 TCP<br>ISP 常作怪，用 动态端口<br>小鸡速度不好，用 mKCP<br>处子之身，用 WS + TLS</p><h2 id="V2Ray-脚本说明"><a href="#V2Ray-脚本说明" class="headerlink" title="V2Ray 脚本说明"></a>V2Ray 脚本说明</h2><p><a href="https://github.com/233boy/v2ray/wiki/V2Ray一键安装脚本" target="_blank" rel="noopener">V2Ray 一键安装脚本</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="科学上网" scheme="http://linuxwf.com/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
      <category term="vpn" scheme="http://linuxwf.com/tags/vpn/"/>
    
      <category term="v2ray" scheme="http://linuxwf.com/tags/v2ray/"/>
    
  </entry>
  
  <entry>
    <title>安装Kubernetes Dashboard</title>
    <link href="http://linuxwf.com/2020/04/09/%E5%AE%89%E8%A3%85Kubernetes-Dashboard/"/>
    <id>http://linuxwf.com/2020/04/09/%E5%AE%89%E8%A3%85Kubernetes-Dashboard/</id>
    <published>2020-04-09T12:54:00.000Z</published>
    <updated>2020-04-09T12:55:43.086Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Kubernetes Dashboard</code> 是 <code>Kubernetes</code> 的官方 Web UI。使用 Kubernetes Dashboard，您可以：</p><ul><li>向 Kubernetes 集群部署容器化应用</li><li>诊断容器化应用的问题</li><li>管理集群的资源</li><li>查看集群上所运行的应用程序</li><li>创建、修改Kubernetes 上的资源（例如 Deployment、Job、DaemonSet等）</li><li>展示集群上发生的错误</li></ul><p>例如：您可以伸缩一个 Deployment、执行滚动更新、重启一个 Pod 或部署一个新的应用程序</p><p>以上文字翻译自 Kubernetes 官方文档。Kuboard 的定位和 Dashboard 是相似的，<strong>主要的区别</strong> 在于：</p><ul><li>Kuboard 关注微服务参考架构的视角对界面进行组织，参考 <a href="https://kuboard.cn/overview/share-coder.html" target="_blank" rel="noopener">Kuboard 简介</a></li><li>Kuboard 中，不需要手工编写 YAML 文件，进一步降低 K8S 使用难度，提高便捷性</li><li>Kuboard 可以导出整个微服务架构的部署信息，并在新的名称空间/集群导入配置信息</li><li>Kuboard 的一个发展方向是，提供内建的 <a href="https://kuboard.cn/guide/example/monitor.html" target="_blank" rel="noopener">监控套件</a>（目前的全局监控套件成熟度比较高）</li></ul><p>为了帮助大家选择适合自己的工具，本文将详细描述如何在 Kubernetes 集群中安装 Kubernetes Dashboard。</p><h2 id="安装"><a href="#安装" class="headerlink" title="#安装"></a><a href="https://kuboard.cn/install/install-k8s-dashboard.html#安装" target="_blank" rel="noopener">#</a>安装</h2><p>执行如下命令，以安装 <code>Kubernetes Dashboard</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta5/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure><p>如果访问不了该 yaml 文件，请使用下面的命令，效果是等价的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://kuboard.cn/install-script/k8s-dashboard/v2.0.0-beta5.yaml</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>Kubernetes Dashboard 当前，只支持使用 Bearer Token登录。 由于 Kubernetes Dashboard 默认部署时，只配置了最低权限的 RBAC。因此，我们要创建一个名为 <code>admin-user</code> 的 ServiceAccount，再创建一个 ClusterRolebinding，将其绑定到 Kubernetes 集群中默认初始化的 <code>cluster-admin</code> 这个 ClusterRole。</p><blockquote><p>更多关于权限管理的信息，请参考 <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/" target="_blank" rel="noopener">Using RBAC Authorization</a></p></blockquote><ul><li><p>创建 Service Account 和 ClusterRoleBinding</p><p>使用 <code>kubeadm</code> 安装集群时，默认创建了 ClusterRole <code>cluster-admin</code>。此时我们可以直接为刚才的 ServiceAccount 创建 ClusterRoleBinding。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure><p>执行如下命令可创建 ServiceAccount 和 ClusterRoleBinding</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://kuboard.cn/install-script/k8s-dashboard/auth.yaml</span><br></pre></td></tr></table></figure><ul><li>获取Bearer Token</li></ul><p>执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure><p>输出信息如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Name:         admin-user-token-v57nw</span><br><span class="line">Namespace:    kubernetes-dashboard</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class="line">              kubernetes.io/service-account.uid: 0303243c-4040-4a58-8a47-849ee9ba79c1</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1066 bytes</span><br><span class="line">namespace:  20 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLXY1N253Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIwMzAzMjQzYy00MDQwLTRhNTgtOGE0Ny04NDllZTliYTc5YzEiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.Z2JrQlitASVwWbc-s6deLRFVk5DWD3P_vjUFXsqVSY10pbjFLG4njoZwh8p3tLxnX_VBsr7_6bwxhWSYChp9hwxznemD5x5HLtjb16kI9Z7yFWLtohzkTwuFbqmQaMoget_nYcQBUC5fDmBHRfFvNKePh_vSSb2h_aYXa8GV5AcfPQpY7r461itme1EXHQJqv-SN-zUnguDguCTjD80pFZ_CmnSE1z9QdMHPB8hoB4V68gtswR1VLa6mSYdgPwCHauuOobojALSaMc3RH7MmFUumAgguhqAkX3Omqd3rJbYOMRuMjhANqd08piDC3aIabINX6gP5-Tuuw2svnV6NYQ</span><br></pre></td></tr></table></figure><ul><li><p>执行 <code>kubectl proxy</code> 命令</p><p>您必须能够在自己的笔记本（工作电脑）上运行 kubectl 并访问您的集群。可参考文档 <a href="https://kuboard.cn/install/install-kubectl.html" target="_blank" rel="noopener">安装Kubectl</a></p><p>访问路径： <code>http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</code></p><blockquote><p>我曾经尝试过将 kubernetes-dashboard 的访问当时修改为 nodePort 的访问，但是一直未能成功，如果有朋友解决了此问题，请告知我一下。</p></blockquote></li><li><p>将上一个步骤中获得的 Token 输入到登录界面中，点击 <strong>Sign in</strong> 按钮，完成登录</p><p><img src="/" class="lazyload" data-src="https://kuboard.cn/assets/img/signin.7fa3a8e0.png"  alt="Kubernetes教程_安装KubernetesDashboard"></p></li><li><p>登录成功后，界面如下图所示：</p><p><img src="/" class="lazyload" data-src="https://kuboard.cn/assets/img/overview.0bfd156b.png"  alt="Kubernetes教程_登录KubernetesDashboard"></p></li></ul><p>🎉 🎉 🎉 Have Fun!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="http://linuxwf.com/categories/Kubernetes/"/>
    
    
      <category term="docker" scheme="http://linuxwf.com/tags/docker/"/>
    
      <category term="k8s" scheme="http://linuxwf.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>安装Kuboard</title>
    <link href="http://linuxwf.com/2020/04/09/%E5%AE%89%E8%A3%85Kuboard/"/>
    <id>http://linuxwf.com/2020/04/09/%E5%AE%89%E8%A3%85Kuboard/</id>
    <published>2020-04-09T12:51:00.000Z</published>
    <updated>2020-04-09T12:52:34.998Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>安装 Kuboard 时，假设您已经有一个 Kubernetes 集群</p><p>如果没有 Kubernetes 集群：请参考 <a href="https://www.linuxwf.com/2020/04/09/%E4%BD%BF%E7%94%A8kubeadm%E5%AE%89%E8%A3%85K8s/" target="_blank" rel="noopener">Kubernetes 安装</a></p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><table><thead><tr><th>Kubernetes 版本</th><th>Kuboard 版本</th><th>兼容性</th><th>说明</th></tr></thead><tbody><tr><td>v1.18</td><td>v1.0.x</td><td>😄</td><td>已验证</td></tr><tr><td>v1.17</td><td>v1.0.x</td><td>😄</td><td>已验证</td></tr><tr><td>v1.16</td><td>v1.0.x</td><td>😄</td><td>已验证</td></tr><tr><td>v1.15</td><td>v1.0.x</td><td>😄</td><td>已验证</td></tr><tr><td>v1.14</td><td>v1.0.x</td><td>😄</td><td>已验证</td></tr><tr><td>v1.13</td><td>v1.0.x</td><td>😄</td><td>已验证</td></tr><tr><td>v1.12</td><td>v1.0.x</td><td>😐</td><td>Kubernetes Api v1.12 不支持 dryRun， Kuboard 不支持 Kubernetes v1.12</td></tr><tr><td>v1.11</td><td>v1.0.x</td><td>😐</td><td>Kuboard 不支持 Kubernetes v1.11</td></tr></tbody></table><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 Kuboard。</p><blockquote><p>如果您参考 <a href="https://kuboard.cn" target="_blank" rel="noopener">https://kuboard.cn</a> 网站上提供的 Kubernetes 安装文档，可在 master 节点上执行以下命令。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://kuboard.cn/install-script/kuboard.yaml</span><br><span class="line">kubectl apply -f https://addons.kuboard.cn/metrics-server/0.3.6/metrics-server.yaml</span><br></pre></td></tr></table></figure><p>查看 Kuboard 运行状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -l k8s.eip.work/name=kuboard -n kube-system</span><br></pre></td></tr></table></figure><p>输出结果如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME                       READY   STATUS        RESTARTS   AGE</span><br><span class="line">kuboard-54c9c4f6cb-6lf88   1/1     Running       0          45s</span><br></pre></td></tr></table></figure><h2 id="获取Token"><a href="#获取Token" class="headerlink" title="获取Token"></a>获取Token</h2><p>您可以获得管理员用户、只读用户的Token。</p><blockquote><ul><li>默认情况下，您可以使用 ServiceAccount 的 Token 登录 Kuboard</li><li>您还可以 <a href="https://kuboard.cn/learning/k8s-advanced/sec/authenticate/install.html" target="_blank" rel="noopener">使用 GitLab/GitHub 账号登录 Kuboard/Kubectl</a></li><li>您也可以 <a href="https://kuboard.cn/learning/k8s-advanced/sec/kuboard.html" target="_blank" rel="noopener">为用户授权</a></li></ul></blockquote><h3 id="管理员用户"><a href="#管理员用户" class="headerlink" title="管理员用户"></a>管理员用户</h3><p><strong>拥有的权限</strong></p><ul><li>此Token拥有 ClusterAdmin 的权限，可以执行所有操作</li></ul><p><strong>执行命令</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果您参考 www.kuboard.cn 提供的文档安装 Kuberenetes，可在第一个 Master 节点上执行此命令</span></span><br><span class="line">kubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep kuboard-user | awk <span class="string">'&#123;print $1&#125;'</span>) -o go-template=<span class="string">'&#123;&#123;.data.token&#125;&#125;'</span> | base64 -d</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><p>取输出信息中 <code>token</code> 字段</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWc4aHhiIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI5NDhiYjVlNi04Y2RjLTExZTktYjY3ZS1mYTE2M2U1ZjdhMGYiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.DZ6dMTr8GExo5IH_vCWdB_MDfQaNognjfZKl0E5VW8vUFMVvALwo0BS-6Qsqpfxrlz87oE9yGVCpBYV0D00811bLhHIg-IR_MiBneadcqdQ_TGm_a0Pz0RbIzqJlRPiyMSxk1eXhmayfPn01upPdVCQj6D3vAY77dpcGplu3p5wE6vsNWAvrQ2d_V1KhR03IB1jJZkYwrI8FHCq_5YuzkPfHsgZ9MBQgH-jqqNXs6r8aoUZIbLsYcMHkin2vzRsMy_tjMCI9yXGiOqI-E5efTb-_KbDVwV5cbdqEIegdtYZ2J3mlrFQlmPGYTwFI8Ba9LleSYbCi4o0k74568KcN_w</span><br></pre></td></tr></table></figure><h3 id="只读用户"><a href="#只读用户" class="headerlink" title="只读用户"></a>只读用户</h3><p><strong>拥有的权限</strong></p><ul><li>view 可查看名称空间的内容</li><li>system:node 可查看节点信息</li><li>system:persistent-volume-provisioner 可查看存储类和存储卷声明的信息</li></ul><p><strong>适用场景</strong></p><p>只读用户不能对集群的配置执行修改操作，非常适用于将开发环境中的 Kuboard 只读权限分发给开发者，以便开发者可以便捷地诊断问题</p><p><strong>执行命令</strong></p><p>执行如下命令可以获得 只读用户 的 <code>Token</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果您参考 www.kuboard.cn 提供的文档安装 Kuberenetes，可在第一个 Master 节点上执行此命令</span></span><br><span class="line">kubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep kuboard-viewer | awk <span class="string">'&#123;print $1&#125;'</span>) -o go-template=<span class="string">'&#123;&#123;.data.token&#125;&#125;'</span> | base64 -d</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><p>取输出信息中 token 字段</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWc4aHhiIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI5NDhiYjVlNi04Y2RjLTExZTktYjY3ZS1mYTE2M2U1ZjdhMGYiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.DZ6dMTr8GExo5IH_vCWdB_MDfQaNognjfZKl0E5VW8vUFMVvALwo0BS-6Qsqpfxrlz87oE9yGVCpBYV0D00811bLhHIg-IR_MiBneadcqdQ_TGm_a0Pz0RbIzqJlRPiyMSxk1eXhmayfPn01upPdVCQj6D3vAY77dpcGplu3p5wE6vsNWAvrQ2d_V1KhR03IB1jJZkYwrI8FHCq_5YuzkPfHsgZ9MBQgH-jqqNXs6r8aoUZIbLsYcMHkin2vzRsMy_tjMCI9yXGiOqI-E5efTb-_KbDVwV5cbdqEIegdtYZ2J3mlrFQlmPGYTwFI8Ba9LleSYbCi4o0k74568KcN_w</span><br></pre></td></tr></table></figure><h2 id="访问Kuboard"><a href="#访问Kuboard" class="headerlink" title="访问Kuboard"></a>访问Kuboard</h2><p>您可以通过<code>NodePort</code>、<code>port-forward</code> 两种方式当中的任意一种访问 <code>Kuboard</code></p><h3 id="通过NodePort访问"><a href="#通过NodePort访问" class="headerlink" title="通过NodePort访问"></a>通过<code>NodePort</code>访问</h3><p>Kuboard Service 使用了 NodePort 的方式暴露服务，NodePort 为 32567；您可以按如下方式访问 Kuboard。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;任意一个Worker节点的IP地址:32567&#x2F;</span><br></pre></td></tr></table></figure><p>输入前一步骤中获得的 token，可进入 <strong>Kuboard 集群概览页</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TIP</span><br><span class="line"></span><br><span class="line">如果您使用的是阿里云、腾讯云等，请在其安全组设置里开放 worker 节点 32567 端口的入站访问，</span><br><span class="line">您也可以修改 Kuboard.yaml 文件，使用自己定义的 NodePort 端口号</span><br></pre></td></tr></table></figure><h3 id="通过-port-forward-访问"><a href="#通过-port-forward-访问" class="headerlink" title="通过 port-forward 访问"></a>通过 <code>port-forward</code> 访问</h3><p>在您的客户端电脑中执行如下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward service/kuboard 8080:80 -n kube-system</span><br></pre></td></tr></table></figure><p>在浏览器打开链接 （请使用 kubectl 所在机器的IP地址）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure><p>输入前一步骤中获得的 token，可进入 <strong>Kuboard 集群概览页</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TIP</span><br><span class="line"></span><br><span class="line">需要您先完成 [从客户端电脑远程管理 Kubernetes](https:&#x2F;&#x2F;kuboard.cn&#x2F;install&#x2F;install-kubectl.html) 的配置</span><br></pre></td></tr></table></figure><h2 id="免登陆访问"><a href="#免登陆访问" class="headerlink" title="免登陆访问"></a>免登陆访问</h2><p>可以通过查询参数中的 k8sToken 字段直接登录系统，无需在登录界面输入 Token。</p><h3 id="直接访问集群概览页"><a href="#直接访问集群概览页" class="headerlink" title="#直接访问集群概览页"></a><a href="https://kuboard.cn/install/install-dashboard.html#直接访问集群概览页" target="_blank" rel="noopener">#</a>直接访问集群概览页</h3><p>如需要无登录访问集群概览页面，可使用如下格式的 url 进入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://任意一个Worker节点的IP地址:32567/dashboard?k8sToken=yourtoken</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">其他界面</span><br><span class="line"></span><br><span class="line">其他任意 Kuboard 界面同理，只需要增加 k8sToken 作为查询参数，即可跳过输入 Token 的步骤</span><br></pre></td></tr></table></figure><h3 id="直接访问终端界面"><a href="#直接访问终端界面" class="headerlink" title="#直接访问终端界面"></a><a href="https://kuboard.cn/install/install-dashboard.html#直接访问终端界面" target="_blank" rel="noopener">#</a>直接访问终端界面</h3><p>如果想要无登录直接访问容器组的控制台，可使用如下格式的 url 进入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://任意一个Worker节点的IP地址:32567/console/yournamespace/yourpod?containerName=yourcontainer&amp;shell=bash&amp;k8sToken=yourtoken</span><br></pre></td></tr></table></figure><p>其中，shell 参数可选取值有：</p><ul><li><code>bash</code>，使用 /bin/bash 作为 shell</li><li><code>sh</code>， 使用 /bin/sh 作为 shell</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="http://linuxwf.com/categories/Kubernetes/"/>
    
    
      <category term="docker" scheme="http://linuxwf.com/tags/docker/"/>
    
      <category term="k8s" scheme="http://linuxwf.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>harbor镜像仓库</title>
    <link href="http://linuxwf.com/2020/04/09/harbor%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <id>http://linuxwf.com/2020/04/09/harbor%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</id>
    <published>2020-04-09T12:25:00.000Z</published>
    <updated>2020-04-09T12:26:18.289Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="安装harbor并创建项目"><a href="#安装harbor并创建项目" class="headerlink" title="安装harbor并创建项目"></a>安装harbor并创建项目</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum install -y python2-pip</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install docker-compose</span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">wget https://storage.googleapis.com/harbor-releases/release-1.9.0/harbor-offline-installer-v1.9.0-rc1.tgz</span><br><span class="line">tar zxf harbor-offline-installer-v1.9.0-rc1.tgz</span><br><span class="line"><span class="built_in">cd</span> harbor/</span><br><span class="line">sed -i <span class="string">'/^hostname/c hostname: 10.0.0.11'</span> harbor.yml</span><br><span class="line">sed -i <span class="string">'/^harbor_admin_passwordr.yml/c harbor_admin_password: 123456'</span> harbor.yml</span><br><span class="line">sed -i <span class="string">'/^data_volume/c data_volume: /data/harbor'</span> harbor.yml</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p>创建项目</p><p>10.0.0.11</p><p>新建私有项目</p><h2 id="配置docker信任harbor仓库"><a href="#配置docker信任harbor仓库" class="headerlink" title="配置docker信任harbor仓库"></a>配置docker信任harbor仓库</h2><p>注意！所有的节点都要操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/docker/daemon.json&lt;&lt;EOF </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://1660dchq.mirror.aliyuncs.com"</span>],</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"insecure-registries"</span>: [<span class="string">"http://10.0.0.11"</span>] </span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>所有节点都登陆docker-harbor</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login 10.0.0.11</span><br></pre></td></tr></table></figure><h2 id="将镜像打包并推送到harbor仓库"><a href="#将镜像打包并推送到harbor仓库" class="headerlink" title="将镜像打包并推送到harbor仓库"></a>将镜像打包并推送到harbor仓库</h2><ol><li>拉取2个Nginx镜像</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># docker pull nginx:1.14.0</span></span><br><span class="line"></span><br><span class="line">[root@node1 ~]<span class="comment"># docker pull nginx:1.16.0</span></span><br></pre></td></tr></table></figure><ol start="2"><li>给镜像打标签</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># docker tag nginx:1.14.0 10.0.0.11/k8s/nginx:1.14.0</span></span><br><span class="line"></span><br><span class="line">[root@node1 ~]<span class="comment"># docker tag nginx:1.16.0 10.0.0.11/k8s/nginx:1.16.0</span></span><br></pre></td></tr></table></figure><ol start="3"><li>推送到镜像仓库</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># docker push 10.0.0.11/k8s/nginx:1.14.0</span></span><br><span class="line"></span><br><span class="line">[root@node1 ~]<span class="comment"># docker push 10.0.0.11/k8s/nginx:1.16.0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker容器" scheme="http://linuxwf.com/categories/Docker%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="docker" scheme="http://linuxwf.com/tags/docker/"/>
    
      <category term="k8s" scheme="http://linuxwf.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像加速</title>
    <link href="http://linuxwf.com/2020/04/09/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/"/>
    <id>http://linuxwf.com/2020/04/09/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/</id>
    <published>2020-04-09T12:15:00.000Z</published>
    <updated>2020-04-09T12:18:27.560Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Docker镜像加速"><a href="#Docker镜像加速" class="headerlink" title="Docker镜像加速"></a>Docker镜像加速</h2><ul><li>docker 中，只能够为 docker 官方镜像仓库 hub.docker.com 提供 mirror 加速，自建的 docker 镜像仓库是不能配置 mirror 加速的；</li><li>如果您参考 kuboard.cn 提供的 kubernetes 安装文档，默认使用的 docker mirror 是 <a href="https://registry.cn-hangzhou.aliyuncs.com" target="_blank" rel="noopener">https://registry.cn-hangzhou.aliyuncs.com</a> 。</li></ul><h2 id="修改镜像仓库-mirror-地址"><a href="#修改镜像仓库-mirror-地址" class="headerlink" title="#修改镜像仓库 mirror 地址"></a><a href="https://kuboard.cn/install/docker-mirror.html#修改镜像仓库-mirror-地址" target="_blank" rel="noopener">#</a>修改镜像仓库 mirror 地址</h2><p>本文提供了快速修改的方式和手工修改的方式，效果相同</p><h3 id="快速修改"><a href="#快速修改" class="headerlink" title="快速修改"></a>快速修改</h3><ul><li>下面提供了四个 mirror 地址，您可以去掉其中任意一个地址的注释，以使用该 mirror 地址。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker中国 mirror</span></span><br><span class="line"><span class="comment"># export REGISTRY_MIRROR="https://registry.docker-cn.com"</span></span><br><span class="line"><span class="comment"># 腾讯云 docker hub mirror</span></span><br><span class="line"><span class="comment"># export REGISTRY_MIRROR="https://mirror.ccs.tencentyun.com"</span></span><br><span class="line"><span class="comment"># 华为云镜像</span></span><br><span class="line"><span class="comment"># export REGISTRY_MIRROR="https://05f073ad3c0010ea0f4bc00b7105ec20.mirror.swr.myhuaweicloud.com"</span></span><br><span class="line"><span class="comment"># DaoCloud 镜像</span></span><br><span class="line"><span class="comment"># export REGISTRY_MIRROR="http://f1361db2.m.daocloud.io"</span></span><br><span class="line"><span class="comment"># 阿里云 docker hub mirror</span></span><br><span class="line"><span class="built_in">export</span> REGISTRY_MIRROR=https://registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">curl -sSL https://kuboard.cn/install-script/set_mirror.sh | sh -s <span class="variable">$&#123;REGISTRY_MIRROR&#125;</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl restart kubelet  <span class="comment"># 假设您安装了 kubenetes</span></span><br></pre></td></tr></table></figure><h3 id="手工修改"><a href="#手工修改" class="headerlink" title="手工修改"></a>手工修改</h3><ul><li><p>修改 /etc/docker/daemon.json 文件（如果没有，则创建）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></li><li><p>添加 registry-mirrors 字段：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">"registry-mirrors"</span>: [<span class="string">"https://registry.cn-hangzhou.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启 docker/kubelet</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl start kubelet <span class="comment"># 假设您安装了 kubenetes</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="查看修改结果"><a href="#查看修改结果" class="headerlink" title="查看修改结果"></a>查看修改结果</h2><ul><li>执行命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><ul><li>查看结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">Docker Root Dir: /var/lib/docker</span><br><span class="line">Debug Mode (client): <span class="literal">false</span></span><br><span class="line">Debug Mode (server): <span class="literal">false</span></span><br><span class="line">Registry: https://index.docker.io/v1/</span><br><span class="line">Labels:</span><br><span class="line">Experimental: <span class="literal">false</span></span><br><span class="line">Insecure Registries:</span><br><span class="line"> 127.0.0.0/8</span><br><span class="line">Registry Mirrors:</span><br><span class="line"> https://registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">Live Restore Enabled: <span class="literal">false</span></span><br><span class="line">Product License: Community Engine</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker容器" scheme="http://linuxwf.com/categories/Docker%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="docker" scheme="http://linuxwf.com/tags/docker/"/>
    
      <category term="k8s" scheme="http://linuxwf.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>使用kubeadm安装K8s</title>
    <link href="http://linuxwf.com/2020/04/09/%E4%BD%BF%E7%94%A8kubeadm%E5%AE%89%E8%A3%85K8s/"/>
    <id>http://linuxwf.com/2020/04/09/%E4%BD%BF%E7%94%A8kubeadm%E5%AE%89%E8%A3%85K8s/</id>
    <published>2020-04-09T11:59:00.000Z</published>
    <updated>2020-04-09T12:01:06.880Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>参考文档：<a href="https://kuboard.cn/install/install-k8s.html#文档特点" target="_blank" rel="noopener">https://kuboard.cn/install/install-k8s.html#%E6%96%87%E6%A1%A3%E7%89%B9%E7%82%B9</a></p><h2 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h2><p>对于 Kubernetes 初学者，在搭建K8S集群时，推荐在阿里云或腾讯云采购如下配置：（您也可以使用自己的虚拟机、私有云等您最容易获得的 Linux 环境）</p><ul><li>至少2台 <strong>2核4G</strong> 的服务器</li><li><strong>Cent OS 7.6</strong></li></ul><p><strong>安装后的软件版本为</strong></p><ul><li>Kubernetes v1.18.x<ul><li>calico 3.13.1</li><li>nginx-ingress 1.5.5</li></ul></li><li>Docker 19.03.8</li></ul><blockquote><p>如果要安装 Kubernetes 历史版本，请参考：</p><ul><li><a href="https://kuboard.cn/install/history-k8s/install-k8s-1.17.x.html" target="_blank" rel="noopener">安装 Kubernetes v1.17.x 单Master节点</a></li><li><a href="https://kuboard.cn/install/history-k8s/install-k8s-1.16.3.html" target="_blank" rel="noopener">安装 Kubernetes v1.16.3 单Master节点</a></li><li><a href="https://kuboard.cn/install/history-k8s/install-k8s-1.15.4.html" target="_blank" rel="noopener">安装 Kubernetes v1.15.4 单Master节点</a></li></ul></blockquote><p>安装后的拓扑图如下：<a href="https://kuboard.cn/kuboard.rp" target="_blank" rel="noopener">下载拓扑图源文件</a> 使用Axure RP 9.0可打开该文件</p><p>强烈建议初学者先按照此文档完成安装，在对 K8S 有更多理解后，再参考文档 <a href="https://kuboard.cn/install/install-kubernetes.html" target="_blank" rel="noopener">安装Kubernetes高可用</a></p><p><img src="/" class="lazyload" data-src="https://kuboard.cn/images/topology/k8s.png"  alt="Kubernetes安装：Kubernetes安装拓扑图"></p><p>关于二进制安装</p><p>kubeadm 是 Kubernetes 官方支持的安装方式，“二进制” 不是。本文档采用 kubernetes.io 官方推荐的 kubeadm 工具安装 kubernetes 集群。</p><h2 id="检查-centos-hostname"><a href="#检查-centos-hostname" class="headerlink" title="检查 centos / hostname"></a>检查 centos / hostname</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 master 节点和 worker 节点都要执行</span></span><br><span class="line">cat /etc/redhat-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处 hostname 的输出将会是该机器在 Kubernetes 集群中的节点名字</span></span><br><span class="line"><span class="comment"># 不能使用 localhost 作为节点的名字</span></span><br><span class="line">hostname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请使用 lscpu 命令，核对 CPU 信息</span></span><br><span class="line"><span class="comment"># Architecture: x86_64    本安装文档不支持 arm 架构</span></span><br><span class="line"><span class="comment"># CPU(s):       2         CPU 内核数量不能低于 2</span></span><br><span class="line">lscpu</span><br></pre></td></tr></table></figure><p><strong>操作系统兼容性</strong></p><table><thead><tr><th>CentOS 版本</th><th>本文档是否兼容</th><th>备注</th></tr></thead><tbody><tr><td>7.7</td><td>😄</td><td>已验证</td></tr><tr><td>7.6</td><td>😄</td><td>已验证</td></tr><tr><td>7.5</td><td>😞</td><td>已证实会出现 kubelet 无法启动的问题</td></tr><tr><td>7.4</td><td>😞</td><td>已证实会出现 kubelet 无法启动的问题</td></tr><tr><td>7.3</td><td>😞</td><td>已证实会出现 kubelet 无法启动的问题</td></tr><tr><td>7.2</td><td>😞</td><td>已证实会出现 kubelet 无法启动的问题</td></tr></tbody></table><p>修改 hostname</p><p>如果您需要修改 hostname，可执行如下指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 hostname</span></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname your-new-host-name</span><br><span class="line"><span class="comment"># 查看修改结果</span></span><br><span class="line">hostnamectl status</span><br><span class="line"><span class="comment"># 设置 hostname 解析</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"127.0.0.1   <span class="variable">$(hostname)</span>"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h2 id="检查网络"><a href="#检查网络" class="headerlink" title="检查网络"></a>检查网络</h2><p>在所有节点执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@demo-master<span class="_">-a</span>-1 ~]$ ip route show</span><br><span class="line">default via 172.21.0.1 dev eth0 </span><br><span class="line">169.254.0.0/16 dev eth0 scope link metric 1002 </span><br><span class="line">172.21.0.0/20 dev eth0 proto kernel scope link src 172.21.0.12 </span><br><span class="line"></span><br><span class="line">[root@demo-master<span class="_">-a</span>-1 ~]$ ip address</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:16:3e:12:a4:1b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.216.80/20 brd 172.17.223.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 305741654sec preferred_lft 305741654sec</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubelet使用的IP地址</span><br><span class="line"></span><br><span class="line">ip route show 命令中，可以知道机器的默认网卡，通常是 eth0，如 default via 172.21.0.23 dev eth0</span><br><span class="line">ip address 命令中，可显示默认网卡的 IP 地址，Kubernetes 将使用此 IP 地址与集群内的其他节点通信，如 172.17.216.80</span><br><span class="line">所有节点上 Kubernetes 所使用的 IP 地址必须可以互通（无需 NAT 映射、无安全组或防火墙隔离）</span><br></pre></td></tr></table></figure><h2 id="安装docker及kubelet"><a href="#安装docker及kubelet" class="headerlink" title="安装docker及kubelet"></a>安装docker及kubelet</h2><p><code>请认真核对如下选项，7 个都选中后才能显示如何安装。</code></p><p>选中后显示 安装 docker/kubelet 的文档</p><ul><li>我的任意节点 centos 版本为 7.6 或 7.7</li><li>我的任意节点 CPU 内核数量大于等于 2，且内存大于等于 4G</li><li>我的任意节点 hostname 不是 localhost，且不包含下划线、小数点、大写字母</li><li>我的任意节点都有固定的内网 IP 地址</li><li>我的任意节点都只有一个网卡，如果有特殊目的，我可以在完成 K8S 安装后再增加新的网卡</li><li>我的任意节点上 <a href="https://kuboard.cn/install/install-k8s.html#检查网络" target="_blank" rel="noopener">Kubelet使用的 IP 地址</a> 可互通（无需 NAT 映射即可相互访问），且没有防火墙、安全组隔离</li><li>我的任意节点不会直接使用 docker run 或 docker-compose 运行容器</li></ul><h2 id="初始化-master-节点"><a href="#初始化-master-节点" class="headerlink" title="初始化 master 节点"></a>初始化 master 节点</h2><p>关于初始化时用到的环境变量</p><ul><li><strong>APISERVER_NAME</strong> 不能是 master 的 hostname</li><li><strong>APISERVER_NAME</strong> 必须全为小写字母、数字、小数点，不能包含减号</li><li><strong>POD_SUBNET</strong> 所使用的网段不能与 <strong><em>master节点/worker节点</em></strong> 所在的网段重叠。该字段的取值为一个 <a href="https://kuboard.cn/glossary/cidr.html" target="_blank" rel="noopener">CIDR</a> 值，如果您对 CIDR 这个概念还不熟悉，请仍然执行 export POD_SUBNET=10.100.0.1/16 命令，不做修改</li></ul><p><code>快速初始化</code></p><p><strong>请将脚本最后的 1.18.0 替换成您需要的版本号，</strong> 脚本中间的 v1.18.x 不要替换</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line"><span class="comment"># 替换 x.x.x.x 为 master 节点实际 IP（请使用内网 IP）</span></span><br><span class="line"><span class="comment"># export 命令只在当前 shell 会话中有效，开启新的 shell 窗口后，如果要继续安装过程，请重新执行此处的 export 命令</span></span><br><span class="line"><span class="built_in">export</span> MASTER_IP=x.x.x.x</span><br><span class="line"><span class="comment"># 替换 apiserver.demo 为 您想要的 dnsName</span></span><br><span class="line"><span class="built_in">export</span> APISERVER_NAME=apiserver.demo</span><br><span class="line"><span class="comment"># Kubernetes 容器组所在的网段，该网段安装完成后，由 kubernetes 创建，事先并不存在于您的物理网络中</span></span><br><span class="line"><span class="built_in">export</span> POD_SUBNET=10.100.0.1/16</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;MASTER_IP&#125;</span>    <span class="variable">$&#123;APISERVER_NAME&#125;</span>"</span> &gt;&gt; /etc/hosts</span><br><span class="line">curl -sSL https://kuboard.cn/install-script/v1.18.x/init_master.sh | sh -s 1.18.0</span><br></pre></td></tr></table></figure><p><code>手动初始化</code></p><p>手动执行以下代码，结果与快速初始化相同。<strong><em>请将脚本第21行（已高亮）的 ${1} 替换成您需要的版本号，例如 1.18.0</em></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line"><span class="comment"># 替换 x.x.x.x 为 master 节点的内网IP</span></span><br><span class="line"><span class="comment"># export 命令只在当前 shell 会话中有效，开启新的 shell 窗口后，如果要继续安装过程，请重新执行此处的 export 命令</span></span><br><span class="line"><span class="built_in">export</span> MASTER_IP=x.x.x.x</span><br><span class="line"><span class="comment"># 替换 apiserver.demo 为 您想要的 dnsName</span></span><br><span class="line"><span class="built_in">export</span> APISERVER_NAME=apiserver.demo</span><br><span class="line"><span class="comment"># Kubernetes 容器组所在的网段，该网段安装完成后，由 kubernetes 创建，事先并不存在于您的物理网络中</span></span><br><span class="line"><span class="built_in">export</span> POD_SUBNET=10.100.0.1/16</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;MASTER_IP&#125;</span>    <span class="variable">$&#123;APISERVER_NAME&#125;</span>"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 脚本出错时终止执行</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;#POD_SUBNET&#125;</span> -eq 0 ] || [ <span class="variable">$&#123;#APISERVER_NAME&#125;</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"\033[31;1m请确保您已经设置了环境变量 POD_SUBNET 和 APISERVER_NAME \033[0m"</span></span><br><span class="line">  <span class="built_in">echo</span> 当前POD_SUBNET=<span class="variable">$POD_SUBNET</span></span><br><span class="line">  <span class="built_in">echo</span> 当前APISERVER_NAME=<span class="variable">$APISERVER_NAME</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看完整配置选项 https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2</span></span><br><span class="line">rm -f ./kubeadm-config.yaml</span><br><span class="line">cat &lt;&lt;EOF &gt; ./kubeadm-config.yaml</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v<span class="variable">$&#123;1&#125;</span></span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">controlPlaneEndpoint: <span class="string">"<span class="variable">$&#123;APISERVER_NAME&#125;</span>:6443"</span></span><br><span class="line">networking:</span><br><span class="line">  serviceSubnet: <span class="string">"10.96.0.0/16"</span></span><br><span class="line">  podSubnet: <span class="string">"<span class="variable">$&#123;POD_SUBNET&#125;</span>"</span></span><br><span class="line">  dnsDomain: <span class="string">"cluster.local"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubeadm init</span></span><br><span class="line"><span class="comment"># 根据您服务器网速的情况，您需要等候 3 - 10 分钟</span></span><br><span class="line">kubeadm init --config=kubeadm-config.yaml --upload-certs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 kubectl</span></span><br><span class="line">rm -rf /root/.kube/</span><br><span class="line">mkdir /root/.kube/</span><br><span class="line">cp -i /etc/kubernetes/admin.conf /root/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 calico 网络插件</span></span><br><span class="line"><span class="comment"># 参考文档 https://docs.projectcalico.org/v3.13/getting-started/kubernetes/self-managed-onprem/onpremises</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"安装calico-3.13.1"</span></span><br><span class="line">rm -f calico-3.13.1.yaml</span><br><span class="line">wget https://kuboard.cn/install-script/calico/calico-3.13.1.yaml</span><br><span class="line">kubectl apply -f calico-3.13.1.yaml</span><br></pre></td></tr></table></figure><p><strong>检查 master 初始化结果</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行如下命令，等待 3-10 分钟，直到所有的容器组处于 Running 状态</span></span><br><span class="line">watch kubectl get pod -n kube-system -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 master 节点初始化结果</span></span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><h2 id="初始化-worker节点"><a href="#初始化-worker节点" class="headerlink" title="初始化 worker节点"></a>初始化 worker节点</h2><h3 id="获得-join命令参数获得-join命令参数"><a href="#获得-join命令参数获得-join命令参数" class="headerlink" title="获得-join命令参数获得 join命令参数"></a>获得-join命令参数获得 join命令参数</h3><p><strong>在 master 节点上执行</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br></pre></td></tr></table></figure><p>可获取kubeadm join 命令及参数，如下所示</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubeadm token create 命令的输出</span></span><br><span class="line">kubeadm join apiserver.demo:6443 --token mpfjma.4vjjg8flqihor4vt     --discovery-token-ca-cert-hash sha256:6f7a8e40a810323672de5eee6f4d19aa2dbdb38411845a1bf5dd63485c43d303</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有效时间</span><br><span class="line"></span><br><span class="line">该 token 的有效时间为 2 个小时，2小时内，您可以使用此 token 初始化任意数量的 worker 节点。</span><br></pre></td></tr></table></figure><h3 id="初始化worker"><a href="#初始化worker" class="headerlink" title="初始化worker"></a>初始化worker</h3><p><strong>针对所有的 worker 节点执行</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只在 worker 节点执行</span></span><br><span class="line"><span class="comment"># 替换 x.x.x.x 为 master 节点的内网 IP</span></span><br><span class="line"><span class="built_in">export</span> MASTER_IP=x.x.x.x</span><br><span class="line"><span class="comment"># 替换 apiserver.demo 为初始化 master 节点时所使用的 APISERVER_NAME</span></span><br><span class="line"><span class="built_in">export</span> APISERVER_NAME=apiserver.demo</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;MASTER_IP&#125;</span>    <span class="variable">$&#123;APISERVER_NAME&#125;</span>"</span> &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为 master 节点上 kubeadm token create 命令的输出</span></span><br><span class="line">kubeadm join apiserver.demo:6443 --token mpfjma.4vjjg8flqihor4vt     --discovery-token-ca-cert-hash sha256:6f7a8e40a810323672de5eee6f4d19aa2dbdb38411845a1bf5dd63485c43d303</span><br></pre></td></tr></table></figure><h3 id="检查初始化结果"><a href="#检查初始化结果" class="headerlink" title="检查初始化结果"></a>检查初始化结果</h3><p>在 master 节点上执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><p>输出结果如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@demo-master<span class="_">-a</span>-1 ~]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME     STATUS   ROLES    AGE     VERSION</span><br><span class="line">demo-master<span class="_">-a</span>-1   Ready    master   5m3s    v1.18.x</span><br><span class="line">demo-worker<span class="_">-a</span>-1   Ready    &lt;none&gt;   2m26s   v1.18.x</span><br><span class="line">demo-worker<span class="_">-a</span>-2   Ready    &lt;none&gt;   3m56s   v1.18.x</span><br></pre></td></tr></table></figure><h2 id="安装-Ingress-Controller"><a href="#安装-Ingress-Controller" class="headerlink" title="安装 Ingress Controller"></a>安装 Ingress Controller</h2><h3 id="快速初始化"><a href="#快速初始化" class="headerlink" title="快速初始化"></a><code>快速初始化</code></h3><p><strong>在 master 节点上执行</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line">kubectl apply -f https://kuboard.cn/install-script/v1.18.x/nginx-ingress.yaml</span><br></pre></td></tr></table></figure><h3 id="卸载-Ingress-Controller"><a href="#卸载-Ingress-Controller" class="headerlink" title="卸载 Ingress Controller"></a><code>卸载 Ingress Controller</code></h3><p><strong>在 master 节点上执行</strong></p><p>只在您想选择其他 Ingress Controller 的情况下卸载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line">kubectl delete -f https://kuboard.cn/install-script/v1.18.x/nginx-ingress.yaml</span><br></pre></td></tr></table></figure><h3 id="Yaml文件"><a href="#Yaml文件" class="headerlink" title="Yaml文件"></a><code>Yaml文件</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果打算用于生产环境，请参考 https://github.com/nginxinc/kubernetes-ingress/blob/v1.5.5/docs/installation.md 并根据您自己的情况做进一步定制</span></span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress </span><br><span class="line">  namespace: nginx-ingress</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: default-server-secret</span><br><span class="line">  namespace: nginx-ingress</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br><span class="line">data:</span><br><span class="line">  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN2akNDQWFZQ0NRREFPRjl0THNhWFhEQU5CZ2txaGtpRzl3MEJBUXNGQURBaE1SOHdIUVlEVlFRRERCWk8KUjBsT1dFbHVaM0psYzNORGIyNTBjbTlzYkdWeU1CNFhEVEU0TURreE1qRTRNRE16TlZvWERUSXpNRGt4TVRFNApNRE16TlZvd0lURWZNQjBHQTFVRUF3d1dUa2RKVGxoSmJtZHlaWE56UTI5dWRISnZiR3hsY2pDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUwvN2hIUEtFWGRMdjNyaUM3QlBrMTNpWkt5eTlyQ08KR2xZUXYyK2EzUDF0azIrS3YwVGF5aGRCbDRrcnNUcTZzZm8vWUk1Y2Vhbkw4WGM3U1pyQkVRYm9EN2REbWs1Qgo4eDZLS2xHWU5IWlg0Rm5UZ0VPaStlM2ptTFFxRlBSY1kzVnNPazFFeUZBL0JnWlJVbkNHZUtGeERSN0tQdGhyCmtqSXVuektURXUyaDU4Tlp0S21ScUJHdDEwcTNRYzhZT3ExM2FnbmovUWRjc0ZYYTJnMjB1K1lYZDdoZ3krZksKWk4vVUkxQUQ0YzZyM1lma1ZWUmVHd1lxQVp1WXN2V0RKbW1GNWRwdEMzN011cDBPRUxVTExSakZJOTZXNXIwSAo1TmdPc25NWFJNV1hYVlpiNWRxT3R0SmRtS3FhZ25TZ1JQQVpQN2MwQjFQU2FqYzZjNGZRVXpNQ0F3RUFBVEFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWpLb2tRdGRPcEsrTzhibWVPc3lySmdJSXJycVFVY2ZOUitjb0hZVUoKdGhrYnhITFMzR3VBTWI5dm15VExPY2xxeC9aYzJPblEwMEJCLzlTb0swcitFZ1U2UlVrRWtWcitTTFA3NTdUWgozZWI4dmdPdEduMS9ienM3bzNBaS9kclkrcUI5Q2k1S3lPc3FHTG1US2xFaUtOYkcyR1ZyTWxjS0ZYQU80YTY3Cklnc1hzYktNbTQwV1U3cG9mcGltU1ZmaXFSdkV5YmN3N0NYODF6cFErUyt1eHRYK2VBZ3V0NHh3VlI5d2IyVXYKelhuZk9HbWhWNThDd1dIQnNKa0kxNXhaa2VUWXdSN0diaEFMSkZUUkk3dkhvQXprTWIzbjAxQjQyWjNrN3RXNQpJUDFmTlpIOFUvOWxiUHNoT21FRFZkdjF5ZytVRVJxbStGSis2R0oxeFJGcGZnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=</span><br><span class="line">  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdi91RWM4b1JkMHUvZXVJTHNFK1RYZUprckxMMnNJNGFWaEMvYjVyYy9XMlRiNHEvClJOcktGMEdYaVN1eE9ycXgrajlnamx4NXFjdnhkenRKbXNFUkJ1Z1B0ME9hVGtIekhvb3FVWmcwZGxmZ1dkT0EKUTZMNTdlT1l0Q29VOUZ4amRXdzZUVVRJVUQ4R0JsRlNjSVo0b1hFTkhzbysyR3VTTWk2Zk1wTVM3YUhudzFtMApxWkdvRWEzWFNyZEJ6eGc2clhkcUNlUDlCMXl3VmRyYURiUzc1aGQzdUdETDU4cGszOVFqVUFQaHpxdmRoK1JWClZGNGJCaW9CbTVpeTlZTW1hWVhsMm0wTGZzeTZuUTRRdFFzdEdNVWozcGJtdlFmazJBNnljeGRFeFpkZFZsdmwKMm82MjBsMllxcHFDZEtCRThCay90elFIVTlKcU56cHpoOUJUTXdJREFRQUJBb0lCQVFDZklHbXowOHhRVmorNwpLZnZJUXQwQ0YzR2MxNld6eDhVNml4MHg4Mm15d1kxUUNlL3BzWE9LZlRxT1h1SENyUlp5TnUvZ2IvUUQ4bUFOCmxOMjRZTWl0TWRJODg5TEZoTkp3QU5OODJDeTczckM5bzVvUDlkazAvYzRIbjAzSkVYNzZ5QjgzQm9rR1FvYksKMjhMNk0rdHUzUmFqNjd6Vmc2d2szaEhrU0pXSzBwV1YrSjdrUkRWYmhDYUZhNk5nMUZNRWxhTlozVDhhUUtyQgpDUDNDeEFTdjYxWTk5TEI4KzNXWVFIK3NYaTVGM01pYVNBZ1BkQUk3WEh1dXFET1lvMU5PL0JoSGt1aVg2QnRtCnorNTZud2pZMy8yUytSRmNBc3JMTnIwMDJZZi9oY0IraVlDNzVWYmcydVd6WTY3TWdOTGQ5VW9RU3BDRkYrVm4KM0cyUnhybnhBb0dCQU40U3M0ZVlPU2huMVpQQjdhTUZsY0k2RHR2S2ErTGZTTXFyY2pOZjJlSEpZNnhubmxKdgpGenpGL2RiVWVTbWxSekR0WkdlcXZXaHFISy9iTjIyeWJhOU1WMDlRQ0JFTk5jNmtWajJTVHpUWkJVbEx4QzYrCk93Z0wyZHhKendWelU0VC84ajdHalRUN05BZVpFS2FvRHFyRG5BYWkyaW5oZU1JVWZHRXFGKzJyQW9HQkFOMVAKK0tZL0lsS3RWRzRKSklQNzBjUis3RmpyeXJpY05iWCtQVzUvOXFHaWxnY2grZ3l4b25BWlBpd2NpeDN3QVpGdwpaZC96ZFB2aTBkWEppc1BSZjRMazg5b2pCUmpiRmRmc2l5UmJYbyt3TFU4NUhRU2NGMnN5aUFPaTVBRHdVU0FkCm45YWFweUNweEFkREtERHdObit3ZFhtaTZ0OHRpSFRkK3RoVDhkaVpBb0dCQUt6Wis1bG9OOTBtYlF4VVh5YUwKMjFSUm9tMGJjcndsTmVCaWNFSmlzaEhYa2xpSVVxZ3hSZklNM2hhUVRUcklKZENFaHFsV01aV0xPb2I2NTNyZgo3aFlMSXM1ZUtka3o0aFRVdnpldm9TMHVXcm9CV2xOVHlGanIrSWhKZnZUc0hpOGdsU3FkbXgySkJhZUFVWUNXCndNdlQ4NmNLclNyNkQrZG8wS05FZzFsL0FvR0FlMkFVdHVFbFNqLzBmRzgrV3hHc1RFV1JqclRNUzRSUjhRWXQKeXdjdFA4aDZxTGxKUTRCWGxQU05rMXZLTmtOUkxIb2pZT2pCQTViYjhibXNVU1BlV09NNENoaFJ4QnlHbmR2eAphYkJDRkFwY0IvbEg4d1R0alVZYlN5T294ZGt5OEp0ek90ajJhS0FiZHd6NlArWDZDODhjZmxYVFo5MWpYL3RMCjF3TmRKS2tDZ1lCbyt0UzB5TzJ2SWFmK2UwSkN5TGhzVDQ5cTN3Zis2QWVqWGx2WDJ1VnRYejN5QTZnbXo5aCsKcDNlK2JMRUxwb3B0WFhNdUFRR0xhUkcrYlNNcjR5dERYbE5ZSndUeThXczNKY3dlSTdqZVp2b0ZpbmNvVlVIMwphdmxoTUVCRGYxSjltSDB5cDBwWUNaS2ROdHNvZEZtQktzVEtQMjJhTmtsVVhCS3gyZzR6cFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-config</span><br><span class="line">  namespace: nginx-ingress</span><br><span class="line">data:</span><br><span class="line">  server-names-hash-bucket-size: <span class="string">"1024"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - services</span><br><span class="line">  - endpoints</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - secrets</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - configmaps</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">  - update</span><br><span class="line">  - create</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods</span><br><span class="line">  verbs:</span><br><span class="line">  - list</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - events</span><br><span class="line">  verbs:</span><br><span class="line">  - create</span><br><span class="line">  - patch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - extensions</span><br><span class="line">  resources:</span><br><span class="line">  - ingresses</span><br><span class="line">  verbs:</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">  - get</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">"extensions"</span></span><br><span class="line">  resources:</span><br><span class="line">  - ingresses/status</span><br><span class="line">  verbs:</span><br><span class="line">  - update</span><br><span class="line">- apiGroups:</span><br><span class="line">  - k8s.nginx.org</span><br><span class="line">  resources:</span><br><span class="line">  - virtualservers</span><br><span class="line">  - virtualserverroutes</span><br><span class="line">  verbs:</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">  - get</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: nginx-ingress</span><br><span class="line">  namespace: nginx-ingress</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nginx-ingress</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress</span><br><span class="line">  namespace: nginx-ingress</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/scrape: <span class="string">"true"</span></span><br><span class="line">    prometheus.io/port: <span class="string">"9113"</span></span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx-ingress</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-ingress</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: nginx-ingress</span><br><span class="line">      containers:</span><br><span class="line">      - image: nginx/nginx-ingress:1.5.5</span><br><span class="line">        name: nginx-ingress</span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br><span class="line">          hostPort: 80</span><br><span class="line">        - name: https</span><br><span class="line">          containerPort: 443</span><br><span class="line">          hostPort: 443</span><br><span class="line">        - name: prometheus</span><br><span class="line">          containerPort: 9113</span><br><span class="line">        env:</span><br><span class="line">        - name: POD_NAMESPACE</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">        - name: POD_NAME</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.name</span><br><span class="line">        args:</span><br><span class="line">          - -nginx-configmaps=$(POD_NAMESPACE)/nginx-config</span><br><span class="line">          - -default-server-tls-secret=$(POD_NAMESPACE)/default-server-secret</span><br><span class="line">         <span class="comment">#- -v=3 # Enables extensive logging. Useful for troubleshooting.</span></span><br><span class="line">         <span class="comment">#- -report-ingress-status</span></span><br><span class="line">         <span class="comment">#- -external-service=nginx-ingress</span></span><br><span class="line">         <span class="comment">#- -enable-leader-election</span></span><br><span class="line">          - -<span class="built_in">enable</span>-prometheus-metrics</span><br><span class="line">         <span class="comment">#- -enable-custom-resources</span></span><br></pre></td></tr></table></figure><p><strong>配置域名解析</strong></p><p>将域名 *.demo.yourdomain.com 解析到 demo-worker-a-2 的 IP 地址 z.z.z.z （也可以是 demo-worker-a-1 的地址 y.y.y.y）</p><p><strong>验证配置</strong></p><p>在浏览器访问 a.demo.yourdomain.com，将得到 404 NotFound 错误页面</p><p><code>提示</code></p><p>许多初学者在安装 Ingress Controller 时会碰到问题，请不要灰心，可暂时跳过 <strong><em>安装 Ingress Controller</em></strong> 这个部分，等您学完 <a href="http://www.kuboard.cn" target="_blank" rel="noopener">www.kuboard.cn</a> 上 <a href="https://kuboard.cn/learning/k8s-basics/kubernetes-basics.html" target="_blank" rel="noopener">Kubernetes 入门</a> 以及 <a href="https://kuboard.cn/learning/k8s-intermediate/service/ingress.html" target="_blank" rel="noopener">通过互联网访问您的应用程序</a> 这两部分内容后，再来回顾 Ingress Controller 的安装。</p><p>也可以参考 <a href="https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/" target="_blank" rel="noopener">Install Nginx Ingress</a></p><p><code>WARNING</code></p><p>如果您打算将 Kubernetes 用于生产环境，请参考此文档 <a href="https://github.com/nginxinc/kubernetes-ingress/blob/v1.5.3/docs/installation.md" target="_blank" rel="noopener">Installing Ingress Controller</a>，完善 Ingress 的配置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="http://linuxwf.com/categories/Kubernetes/"/>
    
    
      <category term="k8s" scheme="http://linuxwf.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>第1章 k8s简介</title>
    <link href="http://linuxwf.com/2020/04/09/%E7%AC%AC1%E7%AB%A0-k8s%E7%AE%80%E4%BB%8B/"/>
    <id>http://linuxwf.com/2020/04/09/%E7%AC%AC1%E7%AB%A0-k8s%E7%AE%80%E4%BB%8B/</id>
    <published>2020-04-09T11:00:00.000Z</published>
    <updated>2020-04-09T11:11:18.978Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="第1章-k8s简介"><a href="#第1章-k8s简介" class="headerlink" title="第1章 k8s简介"></a>第1章 k8s简介</h1><p><a href="https://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a> 简称k8s. 是一个开源的 Linux<br>容器自动化运维平台，它消除了容器化应用程序在部署、伸缩时涉及到的许多手动操作。换句话说，你可以将多台主机组合成集群来运行<br>Linux 容器，而 Kubernetes可以帮助你简单高效地管理那些集群。</p><p>Kubernetes 最开始是由 Google 的工程师设计开发的。Google 作为 Linux<br>容器技术的早期贡献者之一，曾公开演讲介绍 Google 如何将一切都运行于容器之中（这是<br>Google 的云服务背后的技术）。Google一周内的容器部署超过 20<br>亿次，全部的工作都由内部平台 Borg支撑。Borg是 Kubernetes 的前身，几年来开发 Borg<br>的经验教训也成了影响 Kubernetes 中许多技术的主要因素。</p><h1 id="第2章-k8s特性"><a href="#第2章-k8s特性" class="headerlink" title="第2章 k8s特性"></a>第2章 k8s特性</h1><p>Kubernetes是为生产环境而设计的容器调度管理系统，对于负载均衡、服务发现、高可用、滚动升级、自动伸缩等容器云平台的功能要求有原生支持</p><p>一个K8s集群是由分布式存储（etcd）、服务节点（Minion，etcd现在称为Node）和控制节点（Master）构成的。所有的集群状态都保存在etcd中，<br>Master节点上则运行集群的管理控制模块。<br>Node节点是真正运行应用容器的主机节点，在每个Minion节点上都会运行一个Kubelet代理，控制该节点上的容器、镜像和存储卷等。</p><h1 id="第3章-k8s系统架构"><a href="#第3章-k8s系统架构" class="headerlink" title="第3章 k8s系统架构"></a>第3章 k8s系统架构</h1><p>Kubernetes被设计为Master和Node两个节点，Master为控制节点，Node为计算节点或工作节点，在Master节点上有一个API<br>Server，对外提供标准的RestAPI,这也是Kubernetes集群的入口，意味只要和集群交互就必须连到API<br>Server</p><p><img src="/" class="lazyload" data-src="https://note.youdao.com/yws/public/resource/53f7c5494fd6e7788baee5b1267d8997/07240F78F6E84164AF4EBCA3CB172C2C?ynotemdtimestamp=1586429563125"  alt="image"></p><p><img src="/" class="lazyload" data-src="https://note.youdao.com/yws/public/resource/53f7c5494fd6e7788baee5b1267d8997/23F75CFA322A43368E0CE0703CA297C5?ynotemdtimestamp=1586429563125"  alt="image"></p><h2 id="3-1-Master节点介绍"><a href="#3-1-Master节点介绍" class="headerlink" title="3.1 Master节点介绍"></a>3.1 Master节点介绍</h2><p>Master节点主要有4个组件，API Server, Scheduler, Contoller, etcd</p><h3 id="1-API-Server"><a href="#1-API-Server" class="headerlink" title="1.API Server"></a>1.API Server</h3><p>提供Kubernetes<br>API接口，主要处理Rest操作以及更新Etcd中的对象，是所有资源增删改查的唯一入口。</p><h3 id="2-Scheduler"><a href="#2-Scheduler" class="headerlink" title="2.Scheduler"></a>2.Scheduler</h3><p>绑定Pod到Node上，主要做资源调度</p><h3 id="3-Controller-Manager"><a href="#3-Controller-Manager" class="headerlink" title="3.Controller Manager"></a>3.Controller Manager</h3><p>所有其他集群级别的功能，目前由控制器器Manager执行。资源对象的自动化控制中心，Kubernetes集群有很多控制器。</p><h3 id="4-Etcd"><a href="#4-Etcd" class="headerlink" title="4.Etcd"></a>4.Etcd</h3><p>所有持久化的状态信息存储在Etcd中，这个是Kubernetes集群的数据库</p><h2 id="3-2-Node节点介绍"><a href="#3-2-Node节点介绍" class="headerlink" title="3.2 Node节点介绍"></a>3.2 Node节点介绍</h2><p>Node节点是Kuerntes集群的工作节点,Node节点上主要运行了Docker,Kubelet,kub-proxy<strong>三个服务</strong></p><p><img src="/" class="lazyload" data-src="https://note.youdao.com/yws/public/resource/53f7c5494fd6e7788baee5b1267d8997/41F42C504F6E49FD88B0DFE4DE485610?ynotemdtimestamp=1586429563125"  alt="image"></p><p><strong>1.Docker Engine</strong></p><p>负责节点容器的管理工作，最终创建出来的是一个Docker容器。</p><p><strong>2.kubelet</strong></p><p>安装在Node上的代理服务，用来管理Pods以及容器/镜像/Volume等，实现对集群对节点的管理。</p><p><strong>3.kube-proxy</strong></p><p>安装在Node上的网络代理服务，提供网络代理以及负载均衡，实现与Service通讯。</p><h1 id="第4章-kubernetes逻辑架构"><a href="#第4章-kubernetes逻辑架构" class="headerlink" title="第4章 kubernetes逻辑架构"></a>第4章 kubernetes逻辑架构</h1><h2 id="4-1-Pod"><a href="#4-1-Pod" class="headerlink" title="4.1 Pod"></a>4.1 Pod</h2><p>Pod是Kubernetes的最小管理单元，一个Pod可以包含一组容器和卷。虽然一个Pod里面可以包含一个或者多个容器，但是Pod只有一个IP地址，而且Pod重启后，IP地址会发生变化。</p><p><img src="/" class="lazyload" data-src="https://note.youdao.com/yws/public/resource/53f7c5494fd6e7788baee5b1267d8997/7E22BF8ACB2A420EA993F3D16B04FE42?ynotemdtimestamp=1586429563125"  alt="image"></p><h2 id="4-2-Controller"><a href="#4-2-Controller" class="headerlink" title="4.2 Controller"></a>4.2 Controller</h2><p>集群中会有很多Pod，那么就需要使用控制器来管理Pod</p><p>k8s中有很多控制器，常见的控制器如下：</p><ul><li>Replication Controller（新版本已经被ReplicaSet所替代）</li><li>ReplicaSet（新版本被封装在Deployment中）</li><li>Deployment：封装了Pod的副本管理、部署更新、回滚、扩容、缩容等功能。</li><li>DaemonSet：保证所有的Node上有且只有一个Pod在运行。</li><li>StatefulSet：有状态的应用，为 Pod 提供唯一的标识，它可以保证部署和 scale</li><li>的顺序。</li><li>Job：使用Kubernetes运行单一任务。</li><li>CronJob：使用Kubernetes运行定时任务。</li></ul><h2 id="4-3-Service"><a href="#4-3-Service" class="headerlink" title="4.3 Service"></a>4.3 Service</h2><p>由于Pod的生命周期是短暂的，而且每次重启Pod的IP地址都会发生变化，而且一个Pod有多个副本，也就是说一个集群中有了多个节点，就需要考虑负载均衡的问题。Kubernetes使用Service来实现Pod的访问，而且Service有一个Cluster<br>IP，通常也称之为VIP，是固定不变的。</p><h1 id="第5章-kubernetes网络介绍"><a href="#第5章-kubernetes网络介绍" class="headerlink" title="第5章 kubernetes网络介绍"></a>第5章 kubernetes网络介绍</h1><p>在Kubernetes集群中存在着三种网络，分别是Node网络、Pod网络和Service网络，这几种网络之间的通信需要依靠网络插件，Kubernetes本身并没有提供，社区提供了像Flannel、Calico、Cannal等网络插件。</p><h2 id="5-1-Node网络"><a href="#5-1-Node网络" class="headerlink" title="5.1 Node网络"></a>5.1 Node网络</h2><p>Node网络指的是Kubernetes<br>Node节点本地的网络，在本实验环境中使用的是10.0.0./24这个网段，所有的Node和Master在该网段都可以正常通信。</p><h2 id="5-2-Service网络"><a href="#5-2-Service网络" class="headerlink" title="5.2 Service网络"></a>5.2 Service网络</h2><p>Service是为Pod提供访问和负载均衡的网络地址段</p><h2 id="5-3-Pod网络"><a href="#5-3-Pod网络" class="headerlink" title="5.3 Pod网络"></a>5.3 Pod网络</h2><p>后面创建的Pod，每一个Pod都会有一个IP地址，这个IP地址网络段被称之为Pod网络，如下图所示。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="http://linuxwf.com/categories/Kubernetes/"/>
    
    
      <category term="dokcer" scheme="http://linuxwf.com/tags/dokcer/"/>
    
      <category term="k8s" scheme="http://linuxwf.com/tags/k8s/"/>
    
      <category term="容器" scheme="http://linuxwf.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器</title>
    <link href="http://linuxwf.com/2020/04/09/Docker%E5%AE%B9%E5%99%A8/"/>
    <id>http://linuxwf.com/2020/04/09/Docker%E5%AE%B9%E5%99%A8/</id>
    <published>2020-04-09T07:16:00.000Z</published>
    <updated>2020-04-09T07:37:05.297Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h1><h2 id="Docker-容器介绍"><a href="#Docker-容器介绍" class="headerlink" title="Docker 容器介绍"></a>Docker 容器介绍</h2><h3 id="docker-是什么"><a href="#docker-是什么" class="headerlink" title="docker 是什么"></a>docker 是什么</h3><p>Docker 是Docker.Inc 公司开源的一个基于LXC 技术之上构建的Container 容器引擎， 源代码托管<br>在GitHub 上, 基于Go 语言并遵从Apache2.0 协议开源。<br>Docker 是通过内核虚拟化技术（namespaces 及cgroups 等）来提供容器的资源隔离与安全保障等。由于Docker 通过操作系统层的虚拟化实现隔离，所以Docker 容器在运行时，不需要类似虚拟机（VM）额外的操作系统开销，提高资源利用率。</p><h3 id="namespace-命名空间"><a href="#namespace-命名空间" class="headerlink" title="namespace 命名空间"></a>namespace 命名空间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mount Namespace - 用于隔离文件系统的挂载点</span><br><span class="line">UTS Namespace - 用于隔离HostName 和DomianName</span><br><span class="line">IPC Namespace - 用于隔离进程间通信</span><br><span class="line">PID Namespace - 用于隔离进程ID</span><br><span class="line">Network Namespace - 用于隔离网络</span><br><span class="line">User Namespace - 用于隔离用户和用户组UID/GID</span><br></pre></td></tr></table></figure><h3 id="cgroups资源限制"><a href="#cgroups资源限制" class="headerlink" title="cgroups资源限制"></a>cgroups资源限制</h3><p>控制组（cgroups）是Linux 内核的一个特性，主要用来对共享资源进行隔离、限制、审计等。只有<br>能控制分配到容器的资源，才能避免当多个容器同时运行时的对系统资源的竞争。<br>控制组技术最早是由Google 的程序员在2006 年提出，Linux 内核自2.6.24 开始支持。<br>控制组可以提供对容器的内存、CPU、磁盘IO 等资源的限制和审计管理。</p><h3 id="容器与虚拟机对比"><a href="#容器与虚拟机对比" class="headerlink" title="容器与虚拟机对比"></a>容器与虚拟机对比</h3><p><img src="/" class="lazyload" data-src="https://note.youdao.com/yws/public/resource/f681b4611780d72ab9718e381df5ea17/58F195B98CB741CF97EB5AFA4076F8B3?ynotemdtimestamp=1586417471888"  alt="image"></p><p><img src="/" class="lazyload" data-src="https://note.youdao.com/yws/public/resource/f681b4611780d72ab9718e381df5ea17/2136579F0E664FB38DE98440F203F638?ynotemdtimestamp=1586417471888"  alt="image"></p><h3 id="docker-的三个重要概念"><a href="#docker-的三个重要概念" class="headerlink" title="docker 的三个重要概念"></a>docker 的三个重要概念</h3><p><strong>Image(镜像):</strong><br>那么镜像到底是什么呢？Docker 镜像可以看作是一个特殊的文件系统，除了提供容器运行时所需的<br>程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。</p><p><strong>Container(容器)</strong><br>容器(Container)的定义和镜像(Image)几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。</p><p><strong>Repository(仓库)</strong><br>镜像仓库是Docker 用来集中存放镜像文件的地方，类似于我们之前常用的代码仓库。<br>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。<br>我们可以通过&lt;仓库名&gt;:&lt;标签&gt;的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将<br>以Latest 作为默认标签。</p><p><img src="/" class="lazyload" data-src="https://note.youdao.com/yws/public/resource/f681b4611780d72ab9718e381df5ea17/797B5B7220C249E29DA22FF643FE4198?ynotemdtimestamp=1586417471888"  alt="image"></p><h3 id="docker-的组成部分"><a href="#docker-的组成部分" class="headerlink" title="docker 的组成部分"></a>docker 的组成部分</h3><p>docker 是传统的CS 架构分为docker client 和docker server<br>Docker 客户端是Docker 用户与Docker 交互的主要方式。当您使用Docker 命令行运行命令时，<br>Docker 客户端将这些命令发送给服务器端，服务端将执行这些命令。<br>Docker 命令使用Docker API 。Docker 客户端可以与多个服务端进行通信。</p><p><img src="/" class="lazyload" data-src="https://note.youdao.com/yws/public/resource/f681b4611780d72ab9718e381df5ea17/1EF6422FF8044852AFE47F294CD6B928?ynotemdtimestamp=1586417471888"  alt="image"></p><h2 id="Docker-安装部署"><a href="#Docker-安装部署" class="headerlink" title="Docker 安装部署"></a>Docker 安装部署</h2><h3 id="国内源安装docker-ce"><a href="#国内源安装docker-ce" class="headerlink" title="国内源安装docker-ce"></a>国内源安装docker-ce</h3><p>这里我们使用清华源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/<span class="built_in">help</span>/docker-ce/</span><br></pre></td></tr></table></figure><p>操作步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker docker-common docker-selinux docker-engine</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">wget -O /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">sed -i <span class="string">'s+download.docker.com+mirrors.tuna.tsinghua.edu.cn/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br><span class="line">yum install docker-ce</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="国内远镜像加速配置"><a href="#国内远镜像加速配置" class="headerlink" title="国内远镜像加速配置"></a>国内远镜像加速配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/docker</span><br><span class="line"> tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://1660dchq.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">思路：</span><br><span class="line">1.开启yum 缓存</span><br><span class="line">2.全新环境安装docker</span><br><span class="line">3.将缓存的包全部打包出来</span><br><span class="line">4.安装的时候使用rpm -ivh *.rpm 方式安装</span><br></pre></td></tr></table></figure><h3 id="运行第一个容器"><a href="#运行第一个容器" class="headerlink" title="运行第一个容器"></a>运行第一个容器</h3><p>运行一个Hello world</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run alpine /bin/<span class="built_in">echo</span> <span class="string">"Hello world"</span></span><br></pre></td></tr></table></figure><h2 id="Docker-镜像和容器管理"><a href="#Docker-镜像和容器管理" class="headerlink" title="Docker 镜像和容器管理"></a>Docker 镜像和容器管理</h2><h3 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h3><h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><p>选择镜像建议：</p><p>1.优先选择官方的</p><p>2.选择星星多的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search centos</span><br></pre></td></tr></table></figure><p>3.搜索镜像并查看该镜像的tag</p><p>默认我们使用命令查看是看不到镜像的版本的，可以通过docker-hub 查看，但是国内原因。。。<br>这里可以使用仓库的restful APIl 来查询<br>jq 是一个json 格式化工具，需要提前安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install jq -y</span><br><span class="line">curl -s https://registry.hub.docker.com/v1/repositories/centos/tags|jq</span><br></pre></td></tr></table></figure><h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:7</span><br></pre></td></tr></table></figure><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi centos:7</span><br></pre></td></tr></table></figure><h4 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker save centos:7 -o centos-v7.tar</span><br><span class="line">docker save centos:7 &gt; centos-v7.tar</span><br></pre></td></tr></table></figure><h4 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker load -i centos-v7.tar</span><br><span class="line">docker load &lt; centos-v7.tar</span><br></pre></td></tr></table></figure><h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.启动一个容器并保持不退出</span><br><span class="line">docker run -it -d centos:7 /bin/bash </span><br><span class="line">2.启动一个容器并保持不退出并自定义命名</span><br><span class="line">docker run --name mycentos -it -d centos:7 /bin/bash</span><br></pre></td></tr></table></figure><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器ID</span><br></pre></td></tr></table></figure><h4 id="查看容器的详细信息"><a href="#查看容器的详细信息" class="headerlink" title="查看容器的详细信息"></a>查看容器的详细信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名或ID</span><br></pre></td></tr></table></figure><h4 id="查看正在运行和已经停止的容器"><a href="#查看正在运行和已经停止的容器" class="headerlink" title="查看正在运行和已经停止的容器"></a>查看正在运行和已经停止的容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker ps -a</span><br><span class="line">docker ps -q</span><br><span class="line">docker ps -qa</span><br></pre></td></tr></table></figure><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><p>docker exec 会分配一个新的终端tty</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.docker <span class="built_in">exec</span> 会分配一个新的终端tty</span><br><span class="line">docker <span class="built_in">exec</span> -it 容器ID /bin/bash</span><br><span class="line">2.docker attach 会使用同一个终端</span><br><span class="line">docker attach 容器ID</span><br></pre></td></tr></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><p>删除单个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器ID</span><br></pre></td></tr></table></figure><p>批量删除容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -q)</span><br><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><h2 id="Docker-网络管理"><a href="#Docker-网络管理" class="headerlink" title="Docker 网络管理"></a>Docker 网络管理</h2><h3 id="随机映射端口"><a href="#随机映射端口" class="headerlink" title="随机映射端口"></a>随机映射端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -P -d nginx:latest</span><br></pre></td></tr></table></figure><h3 id="指定映射端口"><a href="#指定映射端口" class="headerlink" title="指定映射端口"></a>指定映射端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:80 -d nginx:latest</span><br></pre></td></tr></table></figure><p>如果想多个容器使用8080 端口，可以通过添加多个IP 地址实现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0:1 10.0.1.52 up</span><br><span class="line">docker run -d -p 10.0.1.51:8080:80 nginx:latest</span><br><span class="line">docker run -d -p 10.0.1.52:8080:80 nginx:latest</span><br></pre></td></tr></table></figure><p>进入容器里修改站点目录，然后访问测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it bdb2a4e7e24d /bin/bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"web01"</span> &gt; /usr/share/nginx/html/index.html</span><br><span class="line">docker <span class="built_in">exec</span> -it 31c1de138dda /bin/bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"web02"</span> &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><p>访问测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]<span class="comment"># curl 10.0.1.51:8080</span></span><br></pre></td></tr></table></figure><h3 id="跨主机通信"><a href="#跨主机通信" class="headerlink" title="跨主机通信"></a>跨主机通信</h3><h2 id="Docker-数据卷管理"><a href="#Docker-数据卷管理" class="headerlink" title="Docker 数据卷管理"></a>Docker 数据卷管理</h2><h3 id="持久化数据卷"><a href="#持久化数据卷" class="headerlink" title="持久化数据卷"></a>持久化数据卷</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v 宿主机目录:容器内目录</span><br></pre></td></tr></table></figure><p>下面我们来创建一个html5 小游戏</p><h4 id="创建游戏代码目录"><a href="#创建游戏代码目录" class="headerlink" title="创建游戏代码目录"></a>创建游戏代码目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/ -p</span><br><span class="line"><span class="built_in">cd</span> /data/</span><br><span class="line">unzip xiaoniaofeifei.zip -d xiaoniao</span><br></pre></td></tr></table></figure><h4 id="创建容器并映射数据卷"><a href="#创建容器并映射数据卷" class="headerlink" title="创建容器并映射数据卷"></a>创建容器并映射数据卷</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -q)</span><br><span class="line">docker rm $(docker ps -aq)</span><br><span class="line">docker run -d -p 80:80 -v /data/xiaoniao:/usr/share/nginx/html nginx:latest</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h4 id="访问游戏页面"><a href="#访问游戏页面" class="headerlink" title="访问游戏页面"></a>访问游戏页面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.0.1.51</span><br></pre></td></tr></table></figure><h3 id="持久化数据卷容器"><a href="#持久化数据卷容器" class="headerlink" title="持久化数据卷容器"></a>持久化数据卷容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--volumes-from (跟某一个已经存在的容器挂载相同的卷)</span><br></pre></td></tr></table></figure><p>查看当前容器有哪些卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><p>下面我们利用容器卷创建一个小游戏</p><h4 id="创建一个容器卷"><a href="#创建一个容器卷" class="headerlink" title="创建一个容器卷"></a>创建一个容器卷</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 --volume xiaoniao:/usr/share/nginx/html nginx:latest</span><br><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><h4 id="查看卷的目录"><a href="#查看卷的目录" class="headerlink" title="查看卷的目录"></a>查看卷的目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect xiaoniao</span><br></pre></td></tr></table></figure><h4 id="复制代码目录到容器卷目录"><a href="#复制代码目录到容器卷目录" class="headerlink" title="复制代码目录到容器卷目录"></a>复制代码目录到容器卷目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\cp -a /data/xiaoniao/* /var/lib/docker/volumes/xiaoniao/_data/</span><br></pre></td></tr></table></figure><h4 id="使用容器卷创建新容器"><a href="#使用容器卷创建新容器" class="headerlink" title="使用容器卷创建新容器"></a>使用容器卷创建新容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8090:80 --volume xiaoniao:/usr/share/nginx/html nginx:latest</span><br></pre></td></tr></table></figure><h3 id="实验-访问不同端口展示不同页面"><a href="#实验-访问不同端口展示不同页面" class="headerlink" title="实验-访问不同端口展示不同页面"></a>实验-访问不同端口展示不同页面</h3><p>需求：<br>访问8080 端口，展示xiaoniao 首页<br>访问8090 端口，展示游戏集合页面</p><h4 id="准备nginx-配置文件"><a href="#准备nginx-配置文件" class="headerlink" title="准备nginx 配置文件"></a>准备nginx 配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/data/game.conf&lt;&lt;EOF</span><br><span class="line">server &#123;</span><br><span class="line">    listen       8080;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /opt/game/;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       8090;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /opt/xiaoniao/;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="上传代码目录"><a href="#上传代码目录" class="headerlink" title="上传代码目录"></a>上传代码目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 /data]<span class="comment"># ll</span></span><br><span class="line">总用量18896</span><br><span class="line">drwxr-xr-x 5 root root 73 9 月7 23:03 game</span><br><span class="line">-rw-r--r-- 1 root root 309 9 月7 22:57 game.conf</span><br><span class="line">-rw-r--r-- 1 root root 19248295 8 月28 09:48 html5.zip</span><br><span class="line">drwxr-xr-x 3 root root 92 9 月7 22:15 xiaoniao</span><br><span class="line">-rw-r--r-- 1 root root 91014 9 月7 22:11 xiaoniaofeifei.zip</span><br></pre></td></tr></table></figure><h4 id="创建容器并挂载"><a href="#创建容器并挂载" class="headerlink" title="创建容器并挂载"></a>创建容器并挂载</h4><p>需要挂载的内容：<br>1.nginx 配置文件<br>2.游戏目录<br>创建容器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -q)</span><br><span class="line">docker rm $(docker ps -aq)</span><br><span class="line">docker run -d -p 8080:8080 -p 8090:8090 -v /data/xiaoniao:/opt/xiaoniao -v /data/game:/opt/game -v /data/game.conf:/etc/nginx/conf.d/game.conf nginx:latest</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h2 id="Docker-镜像手动构建"><a href="#Docker-镜像手动构建" class="headerlink" title="Docker 镜像手动构建"></a>Docker 镜像手动构建</h2><h3 id="手动制作游戏镜像"><a href="#手动制作游戏镜像" class="headerlink" title="手动制作游戏镜像"></a>手动制作游戏镜像</h3><p>下面我们基于centos 容器制作一个新镜像，并安装nginx 服务</p><h4 id="启动一个容器并安装nginx"><a href="#启动一个容器并安装nginx" class="headerlink" title="启动一个容器并安装nginx"></a>启动一个容器并安装nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos:7 /bin/bash</span><br><span class="line">yum install wget install openssh-clients -y</span><br><span class="line">rm -rf /etc/yum.repos.d/*</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">sed -i -e <span class="string">'/mirrors.cloud.aliyuncs.com/d'</span> -e <span class="string">'/mirrors.aliyuncs.com/d'</span> /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line">cat &gt;/etc/yum.repos.d/nginx.repo&lt;&lt;EOF  </span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/\<span class="variable">$releasever</span>/\<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/\<span class="variable">$releasever</span>/\<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">EOF</span><br><span class="line">yum makecache fast</span><br><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure><h4 id="上传代码目录并配置nginx-配置文件"><a href="#上传代码目录并配置nginx-配置文件" class="headerlink" title="上传代码目录并配置nginx 配置文件"></a>上传代码目录并配置nginx 配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r 10.0.1.51:/data/* /opt/</span><br><span class="line">mv /opt/game.conf /etc/nginx/conf.d/</span><br></pre></td></tr></table></figure><h4 id="将容器提交为新的镜像"><a href="#将容器提交为新的镜像" class="headerlink" title="将容器提交为新的镜像"></a>将容器提交为新的镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker commit 容器ID game:v1</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="测试镜像功能是否可用"><a href="#测试镜像功能是否可用" class="headerlink" title="测试镜像功能是否可用"></a>测试镜像功能是否可用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:8080 -p 8090:8090 -d game:v1 nginx -g <span class="string">'daemon off;'</span></span><br></pre></td></tr></table></figure><h4 id="将新镜像导出"><a href="#将新镜像导出" class="headerlink" title="将新镜像导出"></a>将新镜像导出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker save game:v1 &gt; game-v1.tar</span><br><span class="line">docker load &lt; game-v1.tar</span><br></pre></td></tr></table></figure><h3 id="手动制作云盘镜像"><a href="#手动制作云盘镜像" class="headerlink" title="手动制作云盘镜像"></a>手动制作云盘镜像</h3><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 --name clould game:v1 nginx -g <span class="string">'daemon off;'</span></span><br></pre></td></tr></table></figure><h4 id="进入容器安装php-并求改运行用户"><a href="#进入容器安装php-并求改运行用户" class="headerlink" title="进入容器安装php 并求改运行用户"></a>进入容器安装php 并求改运行用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">yum install wget install openssh-clients unzip -y</span><br><span class="line">rm -rf /etc/yum.repos.d/*</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">sed -i -e <span class="string">'/mirrors.cloud.aliyuncs.com/d'</span> -e <span class="string">'/mirrors.aliyuncs.com/d'</span> /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line">cat &gt;/etc/yum.repos.d/nginx.repo&lt;&lt;EOF  </span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/\<span class="variable">$releasever</span>/\<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/\<span class="variable">$releasever</span>/\<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">EOF</span><br><span class="line">yum makecache fast</span><br><span class="line">yum install nginx php-fpm php-mbstring php-gd -y</span><br><span class="line">sed -i <span class="string">'/^user/c user = nginx'</span> /etc/php-fpm.d/www.conf</span><br><span class="line">sed -i <span class="string">'/^group/c group = nginx'</span> /etc/php-fpm.d/www.conf</span><br><span class="line">sed -i <span class="string">'/daemonize/s#no#yes#g'</span> /etc/php-fpm.conf     </span><br><span class="line">php-fpm -c /etc/php.ini -y /etc/php-fpm.conf</span><br><span class="line">ps -ef|grep php</span><br></pre></td></tr></table></figure><h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cat&gt; /etc/nginx/conf.d/cloud.conf &lt;&lt;EOF  </span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    root /code/kod;</span><br><span class="line">    index index.php index.html;</span><br><span class="line"></span><br><span class="line">    location ~ \.php\$ &#123;</span><br><span class="line">        root /code/kod;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME \<span class="variable">$document_root</span>\<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">rm -rf /etc/nginx/conf.d/default.conf </span><br><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h4 id="下载代码目录"><a href="#下载代码目录" class="headerlink" title="下载代码目录"></a>下载代码目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /code</span><br><span class="line">scp 10.0.1.51:/data/kodexplorer4.40.zip </span><br><span class="line">unzip kodexplorer4.40.zip -d kod</span><br><span class="line">chown -R nginx:nginx /code/</span><br></pre></td></tr></table></figure><h4 id="容器启动脚本命令"><a href="#容器启动脚本命令" class="headerlink" title="容器启动脚本命令"></a>容器启动脚本命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;init.sh&lt;&lt;EOF</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">php-fpm -c /etc/php.ini -y /etc/php-fpm.conf</span><br><span class="line">nginx -g <span class="string">'daemon off;'</span></span><br><span class="line">EOF </span><br><span class="line">chmod +x init.sh</span><br></pre></td></tr></table></figure><h4 id="提交新的镜像"><a href="#提交新的镜像" class="headerlink" title="提交新的镜像"></a>提交新的镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit 9e691858a4bd kod:v1</span><br></pre></td></tr></table></figure><h4 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -q)</span><br><span class="line">docker rm $(docker ps -aq)</span><br><span class="line">docker run -p 80:80 -v /data/kod/data:/code/kod/data/ -d kod:v1 /bin/bash /root/init.sh</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p><img src="/" class="lazyload" data-src="https://note.youdao.com/yws/public/resource/f681b4611780d72ab9718e381df5ea17/7EC73629DAD746768555EB27A63345D7?ynotemdtimestamp=1586417471888"  alt="image"></p><h2 id="Dockerfile-自动构建Docker-镜像"><a href="#Dockerfile-自动构建Docker-镜像" class="headerlink" title="Dockerfile 自动构建Docker 镜像"></a>Dockerfile 自动构建Docker 镜像</h2><h3 id="Dockerfile-操作命令说明"><a href="#Dockerfile-操作命令说明" class="headerlink" title="Dockerfile 操作命令说明"></a>Dockerfile 操作命令说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">Docker 通过对于在Dockerfile 中的一系列指令的顺序解析实现自动的image 的构建</span><br><span class="line">通过使用build 命令，根据Dockerfiel 的描述来构建镜像</span><br><span class="line">通过源代码路径的方式</span><br><span class="line">通过标准输入流的方式</span><br><span class="line">Dockerfile 指令：</span><br><span class="line">只支持Docker 自己定义的一套指令，不支持自定义</span><br><span class="line">大小写不敏感，但是建议全部使用大写</span><br><span class="line">根据Dockerfile 的内容顺序执行</span><br><span class="line">FROM：</span><br><span class="line">FROM &#123;base 镜像&#125;</span><br><span class="line">必须放在DOckerfile 的第一行，表示从哪个baseimage 开始构建</span><br><span class="line">MAINTAINER：</span><br><span class="line">可选的，用来标识image 作者的地方</span><br><span class="line">RUN：</span><br><span class="line">每一个RUN 指令都会是在一个新的container 里面运行，并提交为一个image 作为下一个RUN 的base</span><br><span class="line">一个Dockerfile 中可以包含多个RUN，按定义顺序执行</span><br><span class="line">RUN 支持两种运行方式：</span><br><span class="line">RUN &lt;cmd&gt; 这个会当作/bin/sh -c “cmd” 运行</span><br><span class="line">RUN [“executable”，“arg1”，。。]，Docker 把他当作json 的顺序来解析，因此必须使用双引号，</span><br><span class="line">而且executable 需要是完整路径</span><br><span class="line">RUN 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层RUN command1 的执行仅仅是当前进程，</span><br><span class="line">一个内存上的变化而已，其结果不会造成任何文件。而到第二层的时候，启动的是一个全新的容器，跟第一层的容</span><br><span class="line">器更完全没关系，自然不可能继承前一层构建过程中的内存变化。而如果需要将两条命令或者多条命令联合起来执</span><br><span class="line">行需要加上&amp;&amp;。如：<span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src &amp;&amp; wget xxxxxxx</span><br><span class="line">CMD：</span><br><span class="line">CMD 的作用是作为执行container 时候的默认行为（容器默认的启动命令）</span><br><span class="line">当运行container 的时候声明了<span class="built_in">command</span>，则不再用image 中的CMD 默认所定义的命令</span><br><span class="line">一个Dockerfile 中只能有一个有效的CMD，当定义多个CMD 的时候，只有最后一个才会起作用</span><br><span class="line">CMD 定义的三种方式：</span><br><span class="line">CMD &lt;cmd&gt; 这个会当作/bin/sh -c <span class="string">"cmd"</span>来执行</span><br><span class="line">CMD [<span class="string">"executable"</span>,<span class="string">"arg1"</span>,....]</span><br><span class="line">CMD [<span class="string">"arg1"</span>,<span class="string">"arg2"</span>]，这个时候CMD 作为ENTRYPOINT 的参数</span><br><span class="line">EXPOSE 声明端口</span><br><span class="line">格式为EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]。</span><br><span class="line">EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启</span><br><span class="line">这个端口的服务。在Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护</span><br><span class="line">端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是docker run -P 时，会自动随机</span><br><span class="line">映射EXPOSE 的端口。</span><br><span class="line">entrypoint：</span><br><span class="line">entrypoint 的作用是，把整个container 变成了一个可执行的文件，这样不能够通过替换CMD 的方法来改变创</span><br><span class="line">建container 的方式。但是可以通过参数传递的方法影响到container 内部</span><br><span class="line">每个Dockerfile 只能够包含一个entrypoint，多个entrypoint 只有最后一个有效</span><br><span class="line">当定义了entrypoint 以后，CMD 只能够作为参数进行传递</span><br><span class="line">entrypoint 定义方式：</span><br><span class="line">entrypoint [<span class="string">"executable"</span>,<span class="string">"arg1"</span>,<span class="string">"arg2"</span>]，这种定义方式下，CMD 可以通过json 的方式来定义entrypoint</span><br><span class="line">的参数，可以通过在运行container 的时候通过指定<span class="built_in">command</span> 的方式传递参数</span><br><span class="line">entrypoint &lt;cmd&gt;，当作/bin/bash -c <span class="string">"cmd"</span>运行命令</span><br><span class="line">ADD &amp; COPY：</span><br><span class="line">当在源代码构建的方式下，可以通过ADD 和COPY 的方式，把host 上的文件或者目录复制到image 中</span><br><span class="line">ADD 和COPY 的源必须在context 路径下</span><br><span class="line">当src 为网络URL 的情况下，ADD 指令可以把它下载到dest 的指定位置，这个在任何build 的方式下都可以</span><br><span class="line">work</span><br><span class="line">ADD 相对COPY 还有一个多的功能，能够进行自动解压压缩包</span><br><span class="line">ENV：</span><br><span class="line">ENV key value</span><br><span class="line">用来设置环境变量，后续的RUN 可以使用它所创建的环境变量</span><br><span class="line">当创建基于该镜像的container 的时候，会自动拥有设置的环境变量</span><br><span class="line">WORKDIR：</span><br><span class="line">用来指定当前工作目录（或者称为当前目录）</span><br><span class="line">当使用相对目录的情况下，采用上一个WORKDIR 指定的目录作为基准</span><br><span class="line">USER：</span><br><span class="line">指定UID 或者username，来决定运行RUN 指令的用户</span><br><span class="line">ONBUILD：</span><br><span class="line">ONBUILD 作为一个trigger 的标记，可以用来trigger 任何Dockerfile 中的指令</span><br><span class="line">可以定义多个ONBUILD 指令</span><br><span class="line">当下一个镜像B 使用镜像A 作为base 的时候，在FROM A 指令前，会先按照顺序执行在构建A 时候定义的ONBUILD指令</span><br><span class="line">ONBUILD &lt;DOCKERFILE 指令&gt; &lt;content&gt;</span><br><span class="line">VOLUME：</span><br><span class="line">用来创建一个在image 之外的mount point，用来在多个container 之间实现数据共享</span><br><span class="line">运行使用json array 的方式定义多个volume</span><br><span class="line">VOLUME [<span class="string">"/var/data1"</span>,<span class="string">"/var/data2"</span>]</span><br><span class="line">或者plain text 的情况下定义多个VOLUME 指令</span><br></pre></td></tr></table></figure><h3 id="使用Dockerfile-创建基础系统镜像"><a href="#使用Dockerfile-创建基础系统镜像" class="headerlink" title="使用Dockerfile 创建基础系统镜像"></a>使用Dockerfile 创建基础系统镜像</h3><h3 id="使用Dockerfile-创建云盘"><a href="#使用Dockerfile-创建云盘" class="headerlink" title="使用Dockerfile 创建云盘"></a>使用Dockerfile 创建云盘</h3><h4 id="准备需要的文件"><a href="#准备需要的文件" class="headerlink" title="准备需要的文件"></a>准备需要的文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~/dockerfile/kod]<span class="comment"># ls</span></span><br><span class="line">CentOS-Base.repo cloud.conf dockerfile epel.repo init.sh kodexplorer4.40.zip nginx.repo</span><br></pre></td></tr></table></figure><h4 id="编写dockerfile"><a href="#编写dockerfile" class="headerlink" title="编写dockerfile"></a>编写dockerfile</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~/dockerfile/kod]<span class="comment"># cat dockerfile</span></span><br><span class="line">FROM centos:latest</span><br><span class="line">ADD CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line">ADD epel.repo /etc/yum.repos.d/epel.repo</span><br><span class="line">ADD nginx.repo /etc/yum.repos.d/nginx.repo</span><br><span class="line">RUN yum install nginx php-fpm unzip php-gd php-mbstring -y</span><br><span class="line">RUN rm -rf /etc/nginx/conf.d/default.conf</span><br><span class="line">RUN sed -i <span class="string">'/^user/c user = nginx'</span> /etc/php-fpm.d/www.conf</span><br><span class="line">RUN sed -i <span class="string">'/^group/c group = nginx'</span> /etc/php-fpm.d/www.conf</span><br><span class="line">RUN sed -i <span class="string">'/daemonize/s#no#yes#g'</span> /etc/php-fpm.conf</span><br><span class="line">ADD cloud.conf /etc/nginx/conf.d/cloud.conf</span><br><span class="line">RUN mkdir /code</span><br><span class="line">WORKDIR /code</span><br><span class="line">ADD kodexplorer4.40.zip /code/kodexplorer4.40.zip</span><br><span class="line">RUN unzip kodexplorer4.40.zip</span><br><span class="line">RUN chown -R nginx:nginx .</span><br><span class="line">VOLUME /code</span><br><span class="line">ADD init.sh /init.sh</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD [<span class="string">"/bin/bash"</span>,<span class="string">"/init.sh"</span>]</span><br></pre></td></tr></table></figure><h4 id="构建新镜像"><a href="#构建新镜像" class="headerlink" title="构建新镜像"></a>构建新镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~/dockerfile/kod]<span class="comment"># docker build --network=host -t centos_kod:v1 .</span></span><br><span class="line">[root@docker01 ~/dockerfile/kod]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY TAG IMAGE ID CREATED SIZE</span><br><span class="line">centos_kod v1 87071ea7c86b 2 minutes ago 465MB</span><br></pre></td></tr></table></figure><h4 id="基于新镜像运行容器"><a href="#基于新镜像运行容器" class="headerlink" title="基于新镜像运行容器"></a>基于新镜像运行容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~/dockerfile/kod]<span class="comment"># docker run -d -p 80:80 centos_kod:v1</span></span><br><span class="line">4d1007d7194d434248762e5aca76070206643f0f0f533f2112d0359b25fe7ba0</span><br></pre></td></tr></table></figure><h2 id="Docker-私有仓库"><a href="#Docker-私有仓库" class="headerlink" title="Docker 私有仓库"></a>Docker 私有仓库</h2><h3 id="企业级的docker-harbor"><a href="#企业级的docker-harbor" class="headerlink" title="企业级的docker-harbor"></a>企业级的docker-harbor</h3><h4 id="部署思路"><a href="#部署思路" class="headerlink" title="部署思路"></a>部署思路</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一步：安装docker 和docker-compose</span><br><span class="line">第二步：下载harbor-offline-installer-v1.9.0-rc1.tgz</span><br><span class="line">第三步：上传到/opt,并解压</span><br><span class="line">第四步：修改harbor.yml 配置文件hostname = 10.0.0.11 harbor_admin_password = 123456</span><br><span class="line">第五步：执行install.sh</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>1.下载软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget https://github.com/goharbor/harbor/releases/download/v1.9.3/harbor-offline-installer-v1.9.3.tgz</span><br><span class="line">tar xf harbor-offline-installer-v1.9.0-rc1.tgz</span><br></pre></td></tr></table></figure><p>2.修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim harbor.yml </span><br><span class="line">hostname: 10.0.1.5</span><br><span class="line">harbor_admin_password: 123456</span><br></pre></td></tr></table></figure><p>3.下载docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-compose -y</span><br></pre></td></tr></table></figure><p>4.安装harbor</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p>5.修改镜像名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 019a54813db0 10.0.1.51/linux/centos_kod:v1</span><br></pre></td></tr></table></figure><p>6.修改docker配置添加信任仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/docker/daemon.json&lt;&lt;EOF </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://1660dchq.mirror.aliyuncs.com"</span>],</span><br><span class="line">  <span class="string">"insecure-registries"</span>: [<span class="string">"http://10.0.1.51"</span>] </span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>7.docker登录到harbor</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login 10.0.1.51</span><br></pre></td></tr></table></figure><p>8.上传镜像到私有仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 10.0.1.51/linux/centos_kod:v1</span><br></pre></td></tr></table></figure><p>9.客户端使用仓库下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:80 -d 10.0.1.51/linux/centos_kod:v1</span><br></pre></td></tr></table></figure><p>10.访问测试</p><p><img src="/" class="lazyload" data-src="https://note.youdao.com/yws/public/resource/f681b4611780d72ab9718e381df5ea17/177D74A8FB504F1DB6D881B13ED113A7?ynotemdtimestamp=1586417471888"  alt="image"></p><h2 id="docker运行zabbix"><a href="#docker运行zabbix" class="headerlink" title="docker运行zabbix"></a>docker运行zabbix</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql-server -t \</span><br><span class="line">-e MYSQL_DATABASE=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">"zabbix_pwd"</span> \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">"root_pwd"</span> \</span><br><span class="line">-d mysql:5.7 \</span><br><span class="line">--character-set-server=utf8 --collation-server=utf8_bin</span><br><span class="line"></span><br><span class="line">docker run --name zabbix-server-mysql -t \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">"mysql-server"</span> \</span><br><span class="line">-e MYSQL_DATABASE=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">"zabbix_pwd"</span> \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">"root_pwd"</span> \</span><br><span class="line">--link mysql-server:mysql \</span><br><span class="line">-p 10051:10051 \</span><br><span class="line">-d zabbix/zabbix-server-mysql:latest</span><br><span class="line"></span><br><span class="line">docker run --name zabbix-web-nginx-mysql -t \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">"mysql-server"</span> \</span><br><span class="line">-e MYSQL_DATABASE=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">"zabbix_pwd"</span> \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">"root_pwd"</span> \</span><br><span class="line">--link mysql-server:mysql \</span><br><span class="line">--link zabbix-server-mysql:zabbix-server \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-d zabbix/zabbix-web-nginx-mysql:latest</span><br></pre></td></tr></table></figure><h2 id="docker运行gitlab"><a href="#docker运行gitlab" class="headerlink" title="docker运行gitlab"></a>docker运行gitlab</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">--hostname 10.0.1.51 \</span><br><span class="line">--publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">--volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">--volume /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">--volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker容器" scheme="http://linuxwf.com/categories/Docker%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="dokcer" scheme="http://linuxwf.com/tags/dokcer/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搜索插件</title>
    <link href="http://linuxwf.com/2020/04/09/Hexo%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/"/>
    <id>http://linuxwf.com/2020/04/09/Hexo%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/</id>
    <published>2020-04-09T07:08:00.000Z</published>
    <updated>2020-04-09T07:08:41.169Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Hexo-Algoliasearch"><a href="#Hexo-Algoliasearch" class="headerlink" title="Hexo-Algoliasearch"></a>Hexo-Algoliasearch</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>一个在Algolia上为Hexo博客的帖子编制索引的插件 ，增加搜索功能。</strong></p><p>你需要安裝 <a href="https://github.com/oncletom/hexo-algolia" target="_blank" rel="noopener">hexo-algolia</a> 或 <a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch" target="_blank" rel="noopener">hexo-algoliasearch</a>. 根据它们的说明文档去做相应的配置。</p><p><a href="https://puui.qpic.cn/fans_admin/0/3_290186585_1571456373974/0" target="_blank" rel="noopener"><img src="/" class="lazyload" data-src="https://puui.qpic.cn/fans_admin/0/3_290186585_1571456373974/0"  alt="img"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里我们使用 <code>hexo-algoliasearch</code>插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-algoliasearch --save</span><br></pre></td></tr></table></figure><p><strong>Hexo自动检测到所有插件 ， 如果不是这种情况，请在您的<code>_config.yml</code>文件中注册插件：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugins:</span><br><span class="line">  - hexo-algoliasearch</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>在<code>_config.yml</code>文件中配置此插件：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">algolia:</span><br><span class="line">  appId: &quot;Application ID 对应的值&quot;</span><br><span class="line">  apiKey: &quot;新建的 api key 对应的值&quot;</span><br><span class="line">  adminApiKey: &quot;***&quot;</span><br><span class="line">  chunkSize: 5000</span><br><span class="line">  indexName: &quot;my-blog&quot;</span><br><span class="line">  fields:</span><br><span class="line">    - content:strip:truncate,0,500</span><br><span class="line">    - excerpt:strip</span><br><span class="line">    - gallery</span><br><span class="line">    - permalink</span><br><span class="line">    - photos</span><br><span class="line">    - slug</span><br><span class="line">    - tags</span><br><span class="line">    - title</span><br><span class="line">    - about</span><br><span class="line">    - categories</span><br><span class="line">    - link</span><br><span class="line">    - movies</span><br><span class="line">    - music</span><br><span class="line">    - _posts</span><br><span class="line">    - messageboard</span><br></pre></td></tr></table></figure><table><thead><tr><th>键</th><th>类型</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td>appId</td><td>String</td><td></td><td>您的应用程序ID。可选，如果<code>ALGOLIA_APP_ID</code>设置了环境变量</td></tr><tr><td>apiKey</td><td>String</td><td></td><td>您的API密钥（只读）。用于搜索索引。可选，如果<code>ALGOLIA_API_KEY</code>设置了环境变量</td></tr><tr><td>adminApiKey</td><td>String</td><td></td><td>您的adminAPI密钥。它用于创建，删除，更新索引。可选，如果<code>ALGOLIA_ADMIN_API_KEY</code>设置了环境变量</td></tr><tr><td>chunkSize</td><td>Number</td><td>5000</td><td>记录/帖子被分成几块上传。建议使用Algolia以<code>5000</code>获得最佳性能。请注意，如果您要为帖子内容编制索引，则由于篇幅限制，它可能会失败。为了克服这个问题，请减小块的大小，直到通过为止。</td></tr><tr><td>indexName</td><td>String</td><td></td><td>存储帖子的索引名称。可选，如果<code>ALGOLIA_INDEX_NAME</code>设置了环境变量</td></tr><tr><td>fields</td><td>List</td><td></td><td>要索引的字段名称列表。用分隔字段名称和过滤器<code>:</code>。阅读<a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch#filters" target="_blank" rel="noopener">过滤器</a>以获取更多信息</td></tr></tbody></table><h3 id="筛选器"><a href="#筛选器" class="headerlink" title="筛选器"></a>筛选器</h3><p>过滤器使您能够在建立索引之前处理字段的值。过滤器之间用冒号（<code>:</code>）隔开，并且可能具有以逗号（<code>,</code>）分隔的可选参数。可以链接多个过滤器。一个滤波器的输出将应用于下一个。</p><h3 id="过滤器列表："><a href="#过滤器列表：" class="headerlink" title="过滤器列表："></a>过滤器列表：</h3><table><thead><tr><th>过滤</th><th>签名</th><th>句法</th><th>描述</th></tr></thead><tbody><tr><td>跳闸</td><td><code>strip()</code></td><td><code>strip</code></td><td>删除HTML。对于摘录和内容值不索引HTML标签和属性可能很有用。</td></tr><tr><td>截短</td><td><code>truncate(start: number, end: number)</code></td><td><code>truncate,0,300</code></td><td>从<code>start</code>索引到<code>end</code>索引截断字符串。阿尔戈利亚（Algolia）在记录大小方面有一些限制，因此减少帖子内容可能很有用。</td></tr></tbody></table><h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fields:</span><br><span class="line">  - content:strip:truncate,0,200</span><br></pre></td></tr></table></figure><h3 id="选件"><a href="#选件" class="headerlink" title="选件"></a>选件</h3><table><thead><tr><th>选件</th><th>描述</th></tr></thead><tbody><tr><td>-n，-不清除</td><td>不清除现有索引</td></tr></tbody></table><h2 id="生成索引文件"><a href="#生成索引文件" class="headerlink" title="生成索引文件"></a>生成索引文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo algolia</span><br></pre></td></tr></table></figure><h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>你需要安裝 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a>. 根據它的文檔去做相應配置。注意格式只支持 xml。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>修改站点配置文件 <code>_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure><p>修改配置文件 <code>butterfly.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;We didn&#39;t find any results for the search: $&#123;query&#125;&quot; # if there are no result</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Hexo教程" scheme="http://linuxwf.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="http://linuxwf.com/tags/hexo/"/>
    
  </entry>
  
</feed>
